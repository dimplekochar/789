// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  LEDS : $uint<16>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [LEDS] 16 $depth 1 $signal 
// $pipe  reg_output : $uint<8>  $depth 40 
// can point into 
// in scope  top-level
$pipe [reg_output] 8 $depth 40 
// $pipe  write_mem : $uint<8>  $depth 40 
// can point into 
// in scope  top-level
$pipe [write_mem] 8 $depth 40 
// load store constants for object mem
$constant $W[mem_base_address] : $int<8> := _b00000000
// load store constants for object next_pc1
$constant $W[next_pc1_base_address] : $int<1> := _b0
// load store constants for object reg
$constant $W[reg_base_address] : $int<8> := _b00000000
// load store constants for object right_shift
$constant $W[right_shift_base_address] : $int<1> := _b0
$memoryspace [memory_space_0] 
{
  $capacity 256
  $datawidth 32
  $addrwidth 8
  $maxaccesswidth 32
  // $storage  mem : $array[256] $of $uint<32> // memory space index = 0  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [mem] : $array[256] $of $int<32>
}
$memoryspace [memory_space_1] 
{
  $capacity 1
  $datawidth 8
  $addrwidth 1
  $maxaccesswidth 8
  // $storage  next_pc1 : $uint<8> // memory space index = 1  base address = 0  word size = 8
  // can point into 
  // in scope  top-level
  $object [next_pc1] : $int<8>
}
$memoryspace [memory_space_2] 
{
  $capacity 256
  $datawidth 32
  $addrwidth 8
  $maxaccesswidth 32
  // $storage  reg : $array[256] $of $uint<32> // memory space index = 2  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [reg] : $array[256] $of $int<32>
}
$memoryspace [memory_space_3] 
{
  $capacity 1
  $datawidth 32
  $addrwidth 1
  $maxaccesswidth 32
  // $storage  right_shift : $uint<32> // memory space index = 3  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [right_shift] : $int<32>
}
$pipeline $depth 7 $buffering 1 $module [accessMem] 
{
  $in read_write_bar:$int<1>
  // can point into 
  addr:$int<8>
  // can point into 
  write_data:$int<32>
  // can point into 
  $out read_data:$int<32>
  // can point into 
  // pipe-declarations for block %accessMem
  //  file prog.linked.opt.aa, line 15
  // memory-space 0 is written into.
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_21_to_assign_stmt_26] 
    {
      $T [read_write_bar_update_enable] 
      $T [read_write_bar_update_enable_out] 
      read_write_bar_update_enable &-> (read_write_bar_update_enable_out)
      $null &-> (read_write_bar_update_enable)
      $T [addr_update_enable] 
      $T [addr_update_enable_out] 
      addr_update_enable &-> (addr_update_enable_out)
      $null &-> (addr_update_enable)
      $T [write_data_update_enable] 
      $T [write_data_update_enable_out] 
      write_data_update_enable &-> (write_data_update_enable_out)
      $null &-> (write_data_update_enable)
      $T [read_data_update_enable] 
      $T [read_data_update_enable_in] 
      $null &-> (read_data_update_enable)
      $null <-& (read_data_update_enable_in) 
      $null &-> (read_data_update_enable)
      read_data_update_enable <-& (read_data_update_enable_in) 
      // start:  	$guard (~read_write_bar) mem[addr] := write_data// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 20
      // Guard expression 
      // read_write_bar
      // Source expression
      // write_data
      // Target expression
      // mem[addr]
      $T[array_obj_ref_19_sample_start_] 
      $T[array_obj_ref_19_sample_completed_] 
      $T[array_obj_ref_19_update_start_] 
      $T[array_obj_ref_19_update_completed_] 
      $T[array_obj_ref_19_word_address_calculated] 
      $T[array_obj_ref_19_root_address_calculated] 
      $T[array_obj_ref_19_offset_calculated] 
      $T[array_obj_ref_19_index_resized_0] 
      $T[array_obj_ref_19_index_scaled_0] 
      $T[array_obj_ref_19_index_computed_0] 
      // addr
      // start: Forward dependencies from addr to transition array_obj_ref_19_index_computed_0
      array_obj_ref_19_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr to transition array_obj_ref_19_index_computed_0
      ;;[array_obj_ref_19_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_19_index_computed_0 &-> (array_obj_ref_19_index_resize_0)
      array_obj_ref_19_index_resized_0 <-& (array_obj_ref_19_index_resize_0)
      ;;[array_obj_ref_19_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_19_index_resized_0 &-> (array_obj_ref_19_index_scale_0)
      array_obj_ref_19_index_scaled_0 <-& (array_obj_ref_19_index_scale_0)
      ;;[array_obj_ref_19_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_19_index_scaled_0 &-> (array_obj_ref_19_final_index_sum_regn)
      array_obj_ref_19_offset_calculated <-& (array_obj_ref_19_final_index_sum_regn)
      ;;[array_obj_ref_19_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_19_offset_calculated &-> (array_obj_ref_19_base_plus_offset)
      array_obj_ref_19_root_address_calculated <-& (array_obj_ref_19_base_plus_offset)
      ;;[array_obj_ref_19_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_19_root_address_calculated &-> (array_obj_ref_19_word_addrgen)
      array_obj_ref_19_word_address_calculated <-& (array_obj_ref_19_word_addrgen)
      ;;[array_obj_ref_19_Sample] 
      {
        ;;[array_obj_ref_19_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_19_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_19_sample_start_ <-& (array_obj_ref_19_word_address_calculated)
      // reenable-joins
      addr_update_enable o<-& (array_obj_ref_19_sample_completed_ 0)
      array_obj_ref_19_sample_start_ &-> (array_obj_ref_19_Sample)
      array_obj_ref_19_sample_completed_ <-& (array_obj_ref_19_Sample)
      array_obj_ref_19_sample_completed_ &-> ($null)
      array_obj_ref_19_update_start_ &-> (array_obj_ref_19_Update)
      array_obj_ref_19_update_completed_ <-& (array_obj_ref_19_Update)
      // Guard dependency for expression array_obj_ref_19 with guard R_read_write_bar_17
      array_obj_ref_19_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (array_obj_ref_19_sample_completed_ 0)
      // self-release: 
      array_obj_ref_19_sample_start_ o<-& (array_obj_ref_19_sample_completed_ 1)
      $null &-> (array_obj_ref_19_update_start_)
      array_obj_ref_19_update_start_ o<-& (array_obj_ref_19_update_completed_ 0)
      // start: Forward dependencies from write_data to transition array_obj_ref_19_sample_start_
      array_obj_ref_19_sample_start_ <-& ($entry)
      // done: Forward dependencies from write_data to transition array_obj_ref_19_sample_start_
      // RAW reenables for write_data
      write_data_update_enable o<-& (array_obj_ref_19_sample_completed_ 0)
      // end:  	$guard (~read_write_bar) mem[addr] := write_data// bits of buffering = 32. 
      // start:  	$guard (read_write_bar) read_data := mem[addr]// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 21
      // Guard expression 
      // read_write_bar
      // Source expression
      // mem[addr]
      $T[array_obj_ref_25_base_address_calculated] 
      $T[array_obj_ref_25_sample_start_] 
      $T[array_obj_ref_25_sample_completed_] 
      $T[array_obj_ref_25_update_start_] 
      $T[array_obj_ref_25_update_completed_] 
      $T[array_obj_ref_25_word_address_calculated] 
      $T[array_obj_ref_25_root_address_calculated] 
      $T[array_obj_ref_25_offset_calculated] 
      $T[array_obj_ref_25_index_resized_0] 
      $T[array_obj_ref_25_index_scaled_0] 
      $T[array_obj_ref_25_index_computed_0] 
      // addr
      // start: Forward dependencies from addr to transition array_obj_ref_25_index_computed_0
      array_obj_ref_25_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr to transition array_obj_ref_25_index_computed_0
      ;;[array_obj_ref_25_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_25_index_computed_0 &-> (array_obj_ref_25_index_resize_0)
      array_obj_ref_25_index_resized_0 <-& (array_obj_ref_25_index_resize_0)
      ;;[array_obj_ref_25_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_25_index_resized_0 &-> (array_obj_ref_25_index_scale_0)
      array_obj_ref_25_index_scaled_0 <-& (array_obj_ref_25_index_scale_0)
      ;;[array_obj_ref_25_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_25_index_scaled_0 &-> (array_obj_ref_25_final_index_sum_regn)
      array_obj_ref_25_offset_calculated <-& (array_obj_ref_25_final_index_sum_regn)
      ;;[array_obj_ref_25_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_25_offset_calculated &-> (array_obj_ref_25_base_plus_offset)
      array_obj_ref_25_root_address_calculated <-& (array_obj_ref_25_base_plus_offset)
      ;;[array_obj_ref_25_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_25_root_address_calculated &-> (array_obj_ref_25_word_addrgen)
      array_obj_ref_25_word_address_calculated <-& (array_obj_ref_25_word_addrgen)
      ;;[array_obj_ref_25_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_25_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_25_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_25_sample_start_ <-& (array_obj_ref_25_word_address_calculated)
      // reenable-joins
      addr_update_enable o<-& (array_obj_ref_25_sample_completed_ 0)
      array_obj_ref_25_sample_start_ &-> (array_obj_ref_25_Sample)
      array_obj_ref_25_sample_completed_ <-& (array_obj_ref_25_Sample)
      array_obj_ref_25_sample_completed_ &-> ($null)
      array_obj_ref_25_update_start_ &-> (array_obj_ref_25_Update)
      array_obj_ref_25_update_completed_ <-& (array_obj_ref_25_Update)
      // self-release: 
      array_obj_ref_25_sample_start_ o<-& (array_obj_ref_25_sample_completed_ 1)
      $null &-> (array_obj_ref_25_update_start_)
      array_obj_ref_25_update_start_ o<-& (array_obj_ref_25_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_25 with guard R_read_write_bar_22
      array_obj_ref_25_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (array_obj_ref_25_sample_completed_ 0)
      // Target expression
      // (as target) read_data
      // read_data
      // write to interface object
      // start: WAR dependencies for read_data
      // done: WAR dependencies for read_data
      // read_data
      // write to interface object
      array_obj_ref_25_update_start_ <-& (read_data_update_enable)
      // end:  	$guard (read_write_bar) read_data := mem[addr]// bits of buffering = 32. 
      // load-store dependencies..
      // memory-space  memory_space_0
      //  array_obj_ref_19 store
      //  array_obj_ref_25 load
      $T [array_obj_ref_19_array_obj_ref_25_delay] $delay
      // array_obj_ref_19(store) -> array_obj_ref_25(load)
      array_obj_ref_25_sample_start_ <-& (array_obj_ref_19_array_obj_ref_25_delay)
      array_obj_ref_19_array_obj_ref_25_delay <-& (array_obj_ref_19_sample_completed_)
      // reenable across ring for memory space memory_space_0
      $T[ring_reenable_memory_space_0] 
      // ordered memory-subsystem.
      ring_reenable_memory_space_0 <-& (array_obj_ref_25_sample_completed_)
      // ordered memory-subsystem.
      ring_reenable_memory_space_0 <-& (array_obj_ref_19_sample_completed_)
      array_obj_ref_19_sample_start_ o<-& (ring_reenable_memory_space_0 1)
    }
    ( read_data_update_enable_in)
    ( read_write_bar_update_enable_out addr_update_enable_out write_data_update_enable_out)
    $P [read_write_bar_update_enable] 
    $P [addr_update_enable] 
    $P [write_data_update_enable] 
    $P [read_data_update_enable] 
    $bind read_write_bar_update_enable <= assign_stmt_21_to_assign_stmt_26 : read_write_bar_update_enable_out
    $bind addr_update_enable <= assign_stmt_21_to_assign_stmt_26 : addr_update_enable_out
    $bind write_data_update_enable <= assign_stmt_21_to_assign_stmt_26 : write_data_update_enable_out
    $bind read_data_update_enable => assign_stmt_21_to_assign_stmt_26 : read_data_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %accessMem
    //  file prog.linked.opt.aa, line 15
    // mem[addr]
    $constant $W[array_obj_ref_19_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_19_offset_scale_factor_0] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_19_word_offset_0] : $int<8> := _b00000000// 0
    // mem[addr]
    $constant $W[array_obj_ref_25_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_25_offset_scale_factor_0] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_25_word_offset_0] : $int<8> := _b00000000// 0
    // 	$guard (~read_write_bar) mem[addr] := write_data// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 20
    // mem[addr]
    $intermediate $W[R_addr_18_resized] : $int<8>
    $intermediate $W[R_addr_18_scaled] : $int<8>
    $intermediate $W[array_obj_ref_19_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_19_root_address] : $int<8>
    $W[array_obj_ref_19_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_19_data_0] : $int<32>
    // 	$guard (read_write_bar) read_data := mem[addr]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 21
    // mem[addr]
    $intermediate $W[R_addr_24_resized] : $int<8>
    $intermediate $W[R_addr_24_scaled] : $int<8>
    $intermediate $W[array_obj_ref_25_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_25_root_address] : $int<8>
    $W[array_obj_ref_25_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_25_data_0] : $int<32>
    // read_data
    // 	$guard (~read_write_bar) mem[addr] := write_data// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 20
    // mem[addr]
    &/ [array_obj_ref_19_index_0_resize] (addr) (R_addr_18_resized) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_19_index_0_rename] (R_addr_18_resized) (R_addr_18_scaled) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_19_index_offset] (R_addr_18_scaled) (array_obj_ref_19_final_offset) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_19_root_address_inst] (array_obj_ref_19_final_offset) (array_obj_ref_19_root_address) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_19_addr_0] (array_obj_ref_19_root_address) (array_obj_ref_19_word_address_0) $guard ( ~ read_write_bar ) 
    $flowthrough 
    $store [array_obj_ref_19_store_0] $to memory_space_0 (array_obj_ref_19_word_address_0 array_obj_ref_19_data_0) $guard ( ~ read_write_bar ) 
    $delay array_obj_ref_19_store_0 5
    &/ [array_obj_ref_19_gather_scatter] (write_data) (array_obj_ref_19_data_0) $guard ( ~ read_write_bar ) 
    $flowthrough 
    // 	$guard (read_write_bar) read_data := mem[addr]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 21
    // mem[addr]
    &/ [array_obj_ref_25_index_0_resize] (addr) (R_addr_24_resized) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_25_index_0_rename] (R_addr_24_resized) (R_addr_24_scaled) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_25_index_offset] (R_addr_24_scaled) (array_obj_ref_25_final_offset) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_25_root_address_inst] (array_obj_ref_25_final_offset) (array_obj_ref_25_root_address) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_25_addr_0] (array_obj_ref_25_root_address) (array_obj_ref_25_word_address_0) $guard ( read_write_bar ) 
    $flowthrough 
    $load [array_obj_ref_25_load_0] $from memory_space_0 (array_obj_ref_25_word_address_0) (array_obj_ref_25_data_0) $guard ( read_write_bar ) 
    $delay array_obj_ref_25_load_0 4
    &/ [array_obj_ref_25_gather_scatter] (array_obj_ref_25_data_0) (read_data) $guard ( read_write_bar ) 
    $flowthrough 
  }
  // end data-path
  // 	$guard (~read_write_bar) mem[addr] := write_data// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 20
  // write_data
  // addr
  array_obj_ref_19_index_0_resize <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_index_resize_0/index_resize_req) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_index_resize_0/index_resize_ack)
  array_obj_ref_19_index_0_rename <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_index_scale_0/scale_rename_req) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_index_scale_0/scale_rename_ack)
  array_obj_ref_19_index_offset <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_final_index_sum_regn/req) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_final_index_sum_regn/ack)
  array_obj_ref_19_root_address_inst <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_base_plus_offset/sum_rename_req) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_base_plus_offset/sum_rename_ack)
  array_obj_ref_19_addr_0 <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_word_addrgen/root_register_req) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_word_addrgen/root_register_ack)
  array_obj_ref_19_gather_scatter <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_Sample/array_obj_ref_19_Split/split_req) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_Sample/array_obj_ref_19_Split/split_ack)
  array_obj_ref_19_store_0 <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_Sample/word_access_start/word_0/rr assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_Update/word_access_complete/word_0/cr) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_Sample/word_access_start/word_0/ra assign_stmt_21_to_assign_stmt_26/array_obj_ref_19_Update/word_access_complete/word_0/ca)
  // 	$guard (read_write_bar) read_data := mem[addr]// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 21
  // mem[addr]
  // addr
  array_obj_ref_25_index_0_resize <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_index_resize_0/index_resize_req) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_index_resize_0/index_resize_ack)
  array_obj_ref_25_index_0_rename <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_index_scale_0/scale_rename_req) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_index_scale_0/scale_rename_ack)
  array_obj_ref_25_index_offset <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_final_index_sum_regn/req) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_final_index_sum_regn/ack)
  array_obj_ref_25_root_address_inst <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_base_plus_offset/sum_rename_req) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_base_plus_offset/sum_rename_ack)
  array_obj_ref_25_addr_0 <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_word_addrgen/root_register_req) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_word_addrgen/root_register_ack)
  array_obj_ref_25_gather_scatter <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_Update/array_obj_ref_25_Merge/merge_req) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_Update/array_obj_ref_25_Merge/merge_ack)
  array_obj_ref_25_load_0 <=> (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_Sample/word_access_start/word_0/rr assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_Update/word_access_complete/word_0/cr) (assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_Sample/word_access_start/word_0/ra assign_stmt_21_to_assign_stmt_26/array_obj_ref_25_Update/word_access_complete/word_0/ca)
  $attribute delay => "6"
}
$pipeline $depth 7 $buffering 1 $module [accessreg] 
{
  $in read_write_bar:$int<1>
  // can point into 
  addr:$int<8>
  // can point into 
  write_data:$int<32>
  // can point into 
  $out read_data:$int<32>
  // can point into 
  // pipe-declarations for block %accessreg
  //  file prog.linked.opt.aa, line 24
  // memory-space 2 is written into.
  // memory-space 2 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_37_to_assign_stmt_42] 
    {
      $T [read_write_bar_update_enable] 
      $T [read_write_bar_update_enable_out] 
      read_write_bar_update_enable &-> (read_write_bar_update_enable_out)
      $null &-> (read_write_bar_update_enable)
      $T [addr_update_enable] 
      $T [addr_update_enable_out] 
      addr_update_enable &-> (addr_update_enable_out)
      $null &-> (addr_update_enable)
      $T [write_data_update_enable] 
      $T [write_data_update_enable_out] 
      write_data_update_enable &-> (write_data_update_enable_out)
      $null &-> (write_data_update_enable)
      $T [read_data_update_enable] 
      $T [read_data_update_enable_in] 
      $null &-> (read_data_update_enable)
      $null <-& (read_data_update_enable_in) 
      $null &-> (read_data_update_enable)
      read_data_update_enable <-& (read_data_update_enable_in) 
      // start:  	$guard (~read_write_bar) reg[addr] := write_data// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 29
      // Guard expression 
      // read_write_bar
      // Source expression
      // write_data
      // Target expression
      // reg[addr]
      $T[array_obj_ref_35_sample_start_] 
      $T[array_obj_ref_35_sample_completed_] 
      $T[array_obj_ref_35_update_start_] 
      $T[array_obj_ref_35_update_completed_] 
      $T[array_obj_ref_35_word_address_calculated] 
      $T[array_obj_ref_35_root_address_calculated] 
      $T[array_obj_ref_35_offset_calculated] 
      $T[array_obj_ref_35_index_resized_0] 
      $T[array_obj_ref_35_index_scaled_0] 
      $T[array_obj_ref_35_index_computed_0] 
      // addr
      // start: Forward dependencies from addr to transition array_obj_ref_35_index_computed_0
      array_obj_ref_35_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr to transition array_obj_ref_35_index_computed_0
      ;;[array_obj_ref_35_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_35_index_computed_0 &-> (array_obj_ref_35_index_resize_0)
      array_obj_ref_35_index_resized_0 <-& (array_obj_ref_35_index_resize_0)
      ;;[array_obj_ref_35_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_35_index_resized_0 &-> (array_obj_ref_35_index_scale_0)
      array_obj_ref_35_index_scaled_0 <-& (array_obj_ref_35_index_scale_0)
      ;;[array_obj_ref_35_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_35_index_scaled_0 &-> (array_obj_ref_35_final_index_sum_regn)
      array_obj_ref_35_offset_calculated <-& (array_obj_ref_35_final_index_sum_regn)
      ;;[array_obj_ref_35_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_35_offset_calculated &-> (array_obj_ref_35_base_plus_offset)
      array_obj_ref_35_root_address_calculated <-& (array_obj_ref_35_base_plus_offset)
      ;;[array_obj_ref_35_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_35_root_address_calculated &-> (array_obj_ref_35_word_addrgen)
      array_obj_ref_35_word_address_calculated <-& (array_obj_ref_35_word_addrgen)
      ;;[array_obj_ref_35_Sample] 
      {
        ;;[array_obj_ref_35_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_35_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_35_sample_start_ <-& (array_obj_ref_35_word_address_calculated)
      // reenable-joins
      addr_update_enable o<-& (array_obj_ref_35_sample_completed_ 0)
      array_obj_ref_35_sample_start_ &-> (array_obj_ref_35_Sample)
      array_obj_ref_35_sample_completed_ <-& (array_obj_ref_35_Sample)
      array_obj_ref_35_sample_completed_ &-> ($null)
      array_obj_ref_35_update_start_ &-> (array_obj_ref_35_Update)
      array_obj_ref_35_update_completed_ <-& (array_obj_ref_35_Update)
      // Guard dependency for expression array_obj_ref_35 with guard R_read_write_bar_33
      array_obj_ref_35_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (array_obj_ref_35_sample_completed_ 0)
      // self-release: 
      array_obj_ref_35_sample_start_ o<-& (array_obj_ref_35_sample_completed_ 1)
      $null &-> (array_obj_ref_35_update_start_)
      array_obj_ref_35_update_start_ o<-& (array_obj_ref_35_update_completed_ 0)
      // start: Forward dependencies from write_data to transition array_obj_ref_35_sample_start_
      array_obj_ref_35_sample_start_ <-& ($entry)
      // done: Forward dependencies from write_data to transition array_obj_ref_35_sample_start_
      // RAW reenables for write_data
      write_data_update_enable o<-& (array_obj_ref_35_sample_completed_ 0)
      // end:  	$guard (~read_write_bar) reg[addr] := write_data// bits of buffering = 32. 
      // start:  	$guard (read_write_bar) read_data := reg[addr]// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 30
      // Guard expression 
      // read_write_bar
      // Source expression
      // reg[addr]
      $T[array_obj_ref_41_base_address_calculated] 
      $T[array_obj_ref_41_sample_start_] 
      $T[array_obj_ref_41_sample_completed_] 
      $T[array_obj_ref_41_update_start_] 
      $T[array_obj_ref_41_update_completed_] 
      $T[array_obj_ref_41_word_address_calculated] 
      $T[array_obj_ref_41_root_address_calculated] 
      $T[array_obj_ref_41_offset_calculated] 
      $T[array_obj_ref_41_index_resized_0] 
      $T[array_obj_ref_41_index_scaled_0] 
      $T[array_obj_ref_41_index_computed_0] 
      // addr
      // start: Forward dependencies from addr to transition array_obj_ref_41_index_computed_0
      array_obj_ref_41_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr to transition array_obj_ref_41_index_computed_0
      ;;[array_obj_ref_41_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_41_index_computed_0 &-> (array_obj_ref_41_index_resize_0)
      array_obj_ref_41_index_resized_0 <-& (array_obj_ref_41_index_resize_0)
      ;;[array_obj_ref_41_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_41_index_resized_0 &-> (array_obj_ref_41_index_scale_0)
      array_obj_ref_41_index_scaled_0 <-& (array_obj_ref_41_index_scale_0)
      ;;[array_obj_ref_41_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_41_index_scaled_0 &-> (array_obj_ref_41_final_index_sum_regn)
      array_obj_ref_41_offset_calculated <-& (array_obj_ref_41_final_index_sum_regn)
      ;;[array_obj_ref_41_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_41_offset_calculated &-> (array_obj_ref_41_base_plus_offset)
      array_obj_ref_41_root_address_calculated <-& (array_obj_ref_41_base_plus_offset)
      ;;[array_obj_ref_41_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_41_root_address_calculated &-> (array_obj_ref_41_word_addrgen)
      array_obj_ref_41_word_address_calculated <-& (array_obj_ref_41_word_addrgen)
      ;;[array_obj_ref_41_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_41_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_41_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_41_sample_start_ <-& (array_obj_ref_41_word_address_calculated)
      // reenable-joins
      addr_update_enable o<-& (array_obj_ref_41_sample_completed_ 0)
      array_obj_ref_41_sample_start_ &-> (array_obj_ref_41_Sample)
      array_obj_ref_41_sample_completed_ <-& (array_obj_ref_41_Sample)
      array_obj_ref_41_sample_completed_ &-> ($null)
      array_obj_ref_41_update_start_ &-> (array_obj_ref_41_Update)
      array_obj_ref_41_update_completed_ <-& (array_obj_ref_41_Update)
      // self-release: 
      array_obj_ref_41_sample_start_ o<-& (array_obj_ref_41_sample_completed_ 1)
      $null &-> (array_obj_ref_41_update_start_)
      array_obj_ref_41_update_start_ o<-& (array_obj_ref_41_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_41 with guard R_read_write_bar_38
      array_obj_ref_41_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (array_obj_ref_41_sample_completed_ 0)
      // Target expression
      // (as target) read_data
      // read_data
      // write to interface object
      // start: WAR dependencies for read_data
      // done: WAR dependencies for read_data
      // read_data
      // write to interface object
      array_obj_ref_41_update_start_ <-& (read_data_update_enable)
      // end:  	$guard (read_write_bar) read_data := reg[addr]// bits of buffering = 32. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  array_obj_ref_35 store
      //  array_obj_ref_41 load
      $T [array_obj_ref_35_array_obj_ref_41_delay] $delay
      // array_obj_ref_35(store) -> array_obj_ref_41(load)
      array_obj_ref_41_sample_start_ <-& (array_obj_ref_35_array_obj_ref_41_delay)
      array_obj_ref_35_array_obj_ref_41_delay <-& (array_obj_ref_35_sample_completed_)
      // reenable across ring for memory space memory_space_2
      $T[ring_reenable_memory_space_2] 
      // ordered memory-subsystem.
      ring_reenable_memory_space_2 <-& (array_obj_ref_35_sample_completed_)
      // ordered memory-subsystem.
      ring_reenable_memory_space_2 <-& (array_obj_ref_41_sample_completed_)
      array_obj_ref_35_sample_start_ o<-& (ring_reenable_memory_space_2 1)
    }
    ( read_data_update_enable_in)
    ( read_write_bar_update_enable_out addr_update_enable_out write_data_update_enable_out)
    $P [read_write_bar_update_enable] 
    $P [addr_update_enable] 
    $P [write_data_update_enable] 
    $P [read_data_update_enable] 
    $bind read_write_bar_update_enable <= assign_stmt_37_to_assign_stmt_42 : read_write_bar_update_enable_out
    $bind addr_update_enable <= assign_stmt_37_to_assign_stmt_42 : addr_update_enable_out
    $bind write_data_update_enable <= assign_stmt_37_to_assign_stmt_42 : write_data_update_enable_out
    $bind read_data_update_enable => assign_stmt_37_to_assign_stmt_42 : read_data_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %accessreg
    //  file prog.linked.opt.aa, line 24
    // reg[addr]
    $constant $W[array_obj_ref_35_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_35_offset_scale_factor_0] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_35_word_offset_0] : $int<8> := _b00000000// 0
    // reg[addr]
    $constant $W[array_obj_ref_41_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_41_offset_scale_factor_0] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_41_word_offset_0] : $int<8> := _b00000000// 0
    // 	$guard (~read_write_bar) reg[addr] := write_data// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 29
    // reg[addr]
    $intermediate $W[R_addr_34_resized] : $int<8>
    $intermediate $W[R_addr_34_scaled] : $int<8>
    $intermediate $W[array_obj_ref_35_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_35_root_address] : $int<8>
    $W[array_obj_ref_35_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_35_data_0] : $int<32>
    // 	$guard (read_write_bar) read_data := reg[addr]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 30
    // reg[addr]
    $intermediate $W[R_addr_40_resized] : $int<8>
    $intermediate $W[R_addr_40_scaled] : $int<8>
    $intermediate $W[array_obj_ref_41_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_41_root_address] : $int<8>
    $W[array_obj_ref_41_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_41_data_0] : $int<32>
    // read_data
    // 	$guard (~read_write_bar) reg[addr] := write_data// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 29
    // reg[addr]
    &/ [array_obj_ref_35_index_0_resize] (addr) (R_addr_34_resized) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_35_index_0_rename] (R_addr_34_resized) (R_addr_34_scaled) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_35_index_offset] (R_addr_34_scaled) (array_obj_ref_35_final_offset) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_35_root_address_inst] (array_obj_ref_35_final_offset) (array_obj_ref_35_root_address) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_35_addr_0] (array_obj_ref_35_root_address) (array_obj_ref_35_word_address_0) $guard ( ~ read_write_bar ) 
    $flowthrough 
    $store [array_obj_ref_35_store_0] $to memory_space_2 (array_obj_ref_35_word_address_0 array_obj_ref_35_data_0) $guard ( ~ read_write_bar ) 
    $delay array_obj_ref_35_store_0 5
    &/ [array_obj_ref_35_gather_scatter] (write_data) (array_obj_ref_35_data_0) $guard ( ~ read_write_bar ) 
    $flowthrough 
    // 	$guard (read_write_bar) read_data := reg[addr]// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 30
    // reg[addr]
    &/ [array_obj_ref_41_index_0_resize] (addr) (R_addr_40_resized) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_41_index_0_rename] (R_addr_40_resized) (R_addr_40_scaled) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_41_index_offset] (R_addr_40_scaled) (array_obj_ref_41_final_offset) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_41_root_address_inst] (array_obj_ref_41_final_offset) (array_obj_ref_41_root_address) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_41_addr_0] (array_obj_ref_41_root_address) (array_obj_ref_41_word_address_0) $guard ( read_write_bar ) 
    $flowthrough 
    $load [array_obj_ref_41_load_0] $from memory_space_2 (array_obj_ref_41_word_address_0) (array_obj_ref_41_data_0) $guard ( read_write_bar ) 
    $delay array_obj_ref_41_load_0 4
    &/ [array_obj_ref_41_gather_scatter] (array_obj_ref_41_data_0) (read_data) $guard ( read_write_bar ) 
    $flowthrough 
  }
  // end data-path
  // 	$guard (~read_write_bar) reg[addr] := write_data// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 29
  // write_data
  // addr
  array_obj_ref_35_index_0_resize <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_index_resize_0/index_resize_req) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_index_resize_0/index_resize_ack)
  array_obj_ref_35_index_0_rename <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_index_scale_0/scale_rename_req) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_index_scale_0/scale_rename_ack)
  array_obj_ref_35_index_offset <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_final_index_sum_regn/req) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_final_index_sum_regn/ack)
  array_obj_ref_35_root_address_inst <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_base_plus_offset/sum_rename_req) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_base_plus_offset/sum_rename_ack)
  array_obj_ref_35_addr_0 <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_word_addrgen/root_register_req) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_word_addrgen/root_register_ack)
  array_obj_ref_35_gather_scatter <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_Sample/array_obj_ref_35_Split/split_req) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_Sample/array_obj_ref_35_Split/split_ack)
  array_obj_ref_35_store_0 <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_Sample/word_access_start/word_0/rr assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_Update/word_access_complete/word_0/cr) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_Sample/word_access_start/word_0/ra assign_stmt_37_to_assign_stmt_42/array_obj_ref_35_Update/word_access_complete/word_0/ca)
  // 	$guard (read_write_bar) read_data := reg[addr]// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 30
  // reg[addr]
  // addr
  array_obj_ref_41_index_0_resize <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_index_resize_0/index_resize_req) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_index_resize_0/index_resize_ack)
  array_obj_ref_41_index_0_rename <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_index_scale_0/scale_rename_req) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_index_scale_0/scale_rename_ack)
  array_obj_ref_41_index_offset <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_final_index_sum_regn/req) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_final_index_sum_regn/ack)
  array_obj_ref_41_root_address_inst <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_base_plus_offset/sum_rename_req) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_base_plus_offset/sum_rename_ack)
  array_obj_ref_41_addr_0 <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_word_addrgen/root_register_req) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_word_addrgen/root_register_ack)
  array_obj_ref_41_gather_scatter <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_Update/array_obj_ref_41_Merge/merge_req) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_Update/array_obj_ref_41_Merge/merge_ack)
  array_obj_ref_41_load_0 <=> (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_Sample/word_access_start/word_0/rr assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_Update/word_access_complete/word_0/cr) (assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_Sample/word_access_start/word_0/ra assign_stmt_37_to_assign_stmt_42/array_obj_ref_41_Update/word_access_complete/word_0/ca)
  $attribute delay => "6"
}
$module [add] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %add
  //  file prog.linked.opt.aa, line 33
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_54_to_assign_stmt_64] 
    {
      // start:  	output := (rs1_data + rs2_data)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 38
      // Source expression
      // (rs1_data + rs2_data)
      $T[ADD_u32_u32_53_sample_start_] 
      $T[ADD_u32_u32_53_sample_completed_] 
      $T[ADD_u32_u32_53_update_start_] 
      $T[ADD_u32_u32_53_update_completed_] 
      // rs1_data
      // rs2_data
      // start: Forward dependencies from rs1_data to transition ADD_u32_u32_53_sample_start_
      // done: Forward dependencies from rs1_data to transition ADD_u32_u32_53_sample_start_
      // start: Forward dependencies from rs2_data to transition ADD_u32_u32_53_sample_start_
      // done: Forward dependencies from rs2_data to transition ADD_u32_u32_53_sample_start_
      ;;[ADD_u32_u32_53_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u32_u32_53_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u32_u32_53_sample_start_ &-> (ADD_u32_u32_53_Sample)
      ADD_u32_u32_53_sample_completed_ <-& (ADD_u32_u32_53_Sample)
      ADD_u32_u32_53_sample_completed_ &-> ($null)
      ADD_u32_u32_53_update_start_ &-> (ADD_u32_u32_53_Update)
      ADD_u32_u32_53_update_completed_ <-& (ADD_u32_u32_53_Update)
      // Target expression
      // (as target) output
      // start: WAR dependencies for output
      // done: WAR dependencies for output
      // end:  	output := (rs1_data + rs2_data)// bits of buffering = 32. 
      // start: 	$call accessreg (0  rd output ) (dummy ) 
      //  file prog.linked.opt.aa, line 39
      $T[call_stmt_59_sample_start_] 
      $T[call_stmt_59_sample_completed_] 
      $T[call_stmt_59_update_start_] 
      $T[call_stmt_59_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rd
      // Call input argument 2
      // output
      // start: Forward dependencies from rd to transition call_stmt_59_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_59_sample_start_
      // start: Forward dependencies from output to transition call_stmt_59_sample_start_
      call_stmt_59_sample_start_ <-& (ADD_u32_u32_53_update_completed_)
      // done: Forward dependencies from output to transition call_stmt_59_sample_start_
      ;;[call_stmt_59_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_59_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_59_sample_start_ &-> (call_stmt_59_Sample)
      call_stmt_59_sample_completed_ <-& (call_stmt_59_Sample)
      call_stmt_59_sample_completed_ &-> ($null)
      call_stmt_59_update_start_ &-> (call_stmt_59_Update)
      call_stmt_59_update_completed_ <-& (call_stmt_59_Update)
      // Call output argument 0
      // (as target) dummy
      // start: WAR dependencies for dummy
      // done: WAR dependencies for dummy
      // end: 	$call accessreg (0  rd output ) (dummy ) 
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 40
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_63_sample_start_] 
      $T[ADD_u8_u8_63_sample_completed_] 
      $T[ADD_u8_u8_63_update_start_] 
      $T[ADD_u8_u8_63_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_63_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_63_sample_start_
      ;;[ADD_u8_u8_63_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_63_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_63_sample_start_ &-> (ADD_u8_u8_63_Sample)
      ADD_u8_u8_63_sample_completed_ <-& (ADD_u8_u8_63_Sample)
      ADD_u8_u8_63_sample_completed_ &-> ($null)
      ADD_u8_u8_63_update_start_ &-> (ADD_u8_u8_63_Update)
      ADD_u8_u8_63_update_completed_ <-& (ADD_u8_u8_63_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  call_stmt_59 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %add
    //  file prog.linked.opt.aa, line 33
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 39
    // 0 
    $constant $W[konst_55_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_62_wire_constant] : $int<8> := _b00000001// 1
    // 	output := (rs1_data + rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 38
    // output
    $W[output_54] : $int<32>
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 39
    // dummy
    $W[dummy_59] : $int<32>
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 40
    // next_pc
    // 	output := (rs1_data + rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 38
    // (rs1_data + rs2_data)
    +[ADD_u32_u32_53_inst] (rs1_data rs2_data) (output_54)   
    $buffering  $out ADD_u32_u32_53_inst output_54 1
    $delay ADD_u32_u32_53_inst 1
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 39
    $call [call_stmt_59_call] $module accessreg(konst_55_wire_constant rd output_54) (dummy_59)  
    $delay call_stmt_59_call 6
    $buffering  $in call_stmt_59_call konst_55_wire_constant 1
    $buffering  $in call_stmt_59_call rd 1
    $buffering  $in call_stmt_59_call output_54 1
    $buffering  $out call_stmt_59_call dummy_59 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 40
    // (pc + 1 )
    +[ADD_u8_u8_63_inst] (pc konst_62_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_63_inst next_pc 1
    $delay ADD_u8_u8_63_inst 1
  }
  // end data-path
  // 	output := (rs1_data + rs2_data)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 38
  // (rs1_data + rs2_data)
  // rs1_data
  // rs2_data
  ADD_u32_u32_53_inst <=> (assign_stmt_54_to_assign_stmt_64/ADD_u32_u32_53_Sample/rr assign_stmt_54_to_assign_stmt_64/ADD_u32_u32_53_Update/cr) (assign_stmt_54_to_assign_stmt_64/ADD_u32_u32_53_Sample/ra assign_stmt_54_to_assign_stmt_64/ADD_u32_u32_53_Update/ca)
  // 	$call accessreg (0  rd output ) (dummy ) 
  //  file prog.linked.opt.aa, line 39
  // rd
  // output
  call_stmt_59_call <=> (assign_stmt_54_to_assign_stmt_64/call_stmt_59_Sample/crr assign_stmt_54_to_assign_stmt_64/call_stmt_59_Update/ccr) (assign_stmt_54_to_assign_stmt_64/call_stmt_59_Sample/cra assign_stmt_54_to_assign_stmt_64/call_stmt_59_Update/cca)
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 40
  // (pc + 1 )
  // pc
  ADD_u8_u8_63_inst <=> (assign_stmt_54_to_assign_stmt_64/ADD_u8_u8_63_Sample/rr assign_stmt_54_to_assign_stmt_64/ADD_u8_u8_63_Update/cr) (assign_stmt_54_to_assign_stmt_64/ADD_u8_u8_63_Sample/ra assign_stmt_54_to_assign_stmt_64/ADD_u8_u8_63_Update/ca)
}
$module [and_i] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %and_i
  //  file prog.linked.opt.aa, line 42
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_76_to_assign_stmt_86] 
    {
      // start:  	output := (rs1_data & rs2_data)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 47
      // Source expression
      // (rs1_data & rs2_data)
      $T[AND_u32_u32_75_sample_start_] 
      $T[AND_u32_u32_75_sample_completed_] 
      $T[AND_u32_u32_75_update_start_] 
      $T[AND_u32_u32_75_update_completed_] 
      // rs1_data
      // rs2_data
      // start: Forward dependencies from rs1_data to transition AND_u32_u32_75_sample_start_
      // done: Forward dependencies from rs1_data to transition AND_u32_u32_75_sample_start_
      // start: Forward dependencies from rs2_data to transition AND_u32_u32_75_sample_start_
      // done: Forward dependencies from rs2_data to transition AND_u32_u32_75_sample_start_
      ;;[AND_u32_u32_75_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[AND_u32_u32_75_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      AND_u32_u32_75_sample_start_ &-> (AND_u32_u32_75_Sample)
      AND_u32_u32_75_sample_completed_ <-& (AND_u32_u32_75_Sample)
      AND_u32_u32_75_sample_completed_ &-> ($null)
      AND_u32_u32_75_update_start_ &-> (AND_u32_u32_75_Update)
      AND_u32_u32_75_update_completed_ <-& (AND_u32_u32_75_Update)
      // Target expression
      // (as target) output
      // start: WAR dependencies for output
      // done: WAR dependencies for output
      // end:  	output := (rs1_data & rs2_data)// bits of buffering = 32. 
      // start: 	$call accessreg (0  rd output ) (dummy1 ) 
      //  file prog.linked.opt.aa, line 48
      $T[call_stmt_81_sample_start_] 
      $T[call_stmt_81_sample_completed_] 
      $T[call_stmt_81_update_start_] 
      $T[call_stmt_81_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rd
      // Call input argument 2
      // output
      // start: Forward dependencies from rd to transition call_stmt_81_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_81_sample_start_
      // start: Forward dependencies from output to transition call_stmt_81_sample_start_
      call_stmt_81_sample_start_ <-& (AND_u32_u32_75_update_completed_)
      // done: Forward dependencies from output to transition call_stmt_81_sample_start_
      ;;[call_stmt_81_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_81_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_81_sample_start_ &-> (call_stmt_81_Sample)
      call_stmt_81_sample_completed_ <-& (call_stmt_81_Sample)
      call_stmt_81_sample_completed_ &-> ($null)
      call_stmt_81_update_start_ &-> (call_stmt_81_Update)
      call_stmt_81_update_completed_ <-& (call_stmt_81_Update)
      // Call output argument 0
      // (as target) dummy1
      // start: WAR dependencies for dummy1
      // done: WAR dependencies for dummy1
      // end: 	$call accessreg (0  rd output ) (dummy1 ) 
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 49
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_85_sample_start_] 
      $T[ADD_u8_u8_85_sample_completed_] 
      $T[ADD_u8_u8_85_update_start_] 
      $T[ADD_u8_u8_85_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_85_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_85_sample_start_
      ;;[ADD_u8_u8_85_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_85_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_85_sample_start_ &-> (ADD_u8_u8_85_Sample)
      ADD_u8_u8_85_sample_completed_ <-& (ADD_u8_u8_85_Sample)
      ADD_u8_u8_85_sample_completed_ &-> ($null)
      ADD_u8_u8_85_update_start_ &-> (ADD_u8_u8_85_Update)
      ADD_u8_u8_85_update_completed_ <-& (ADD_u8_u8_85_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  call_stmt_81 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %and_i
    //  file prog.linked.opt.aa, line 42
    // 	$call accessreg (0  rd output ) (dummy1 ) 
    //  file prog.linked.opt.aa, line 48
    // 0 
    $constant $W[konst_77_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_84_wire_constant] : $int<8> := _b00000001// 1
    // 	output := (rs1_data & rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 47
    // output
    $W[output_76] : $int<32>
    // 	$call accessreg (0  rd output ) (dummy1 ) 
    //  file prog.linked.opt.aa, line 48
    // dummy1
    $W[dummy1_81] : $int<32>
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 49
    // next_pc
    // 	output := (rs1_data & rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 47
    // (rs1_data & rs2_data)
    &[AND_u32_u32_75_inst] (rs1_data rs2_data) (output_76)   
    $buffering  $out AND_u32_u32_75_inst output_76 1
    $delay AND_u32_u32_75_inst 1
    // 	$call accessreg (0  rd output ) (dummy1 ) 
    //  file prog.linked.opt.aa, line 48
    $call [call_stmt_81_call] $module accessreg(konst_77_wire_constant rd output_76) (dummy1_81)  
    $delay call_stmt_81_call 6
    $buffering  $in call_stmt_81_call konst_77_wire_constant 1
    $buffering  $in call_stmt_81_call rd 1
    $buffering  $in call_stmt_81_call output_76 1
    $buffering  $out call_stmt_81_call dummy1_81 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 49
    // (pc + 1 )
    +[ADD_u8_u8_85_inst] (pc konst_84_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_85_inst next_pc 1
    $delay ADD_u8_u8_85_inst 1
  }
  // end data-path
  // 	output := (rs1_data & rs2_data)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 47
  // (rs1_data & rs2_data)
  // rs1_data
  // rs2_data
  AND_u32_u32_75_inst <=> (assign_stmt_76_to_assign_stmt_86/AND_u32_u32_75_Sample/rr assign_stmt_76_to_assign_stmt_86/AND_u32_u32_75_Update/cr) (assign_stmt_76_to_assign_stmt_86/AND_u32_u32_75_Sample/ra assign_stmt_76_to_assign_stmt_86/AND_u32_u32_75_Update/ca)
  // 	$call accessreg (0  rd output ) (dummy1 ) 
  //  file prog.linked.opt.aa, line 48
  // rd
  // output
  call_stmt_81_call <=> (assign_stmt_76_to_assign_stmt_86/call_stmt_81_Sample/crr assign_stmt_76_to_assign_stmt_86/call_stmt_81_Update/ccr) (assign_stmt_76_to_assign_stmt_86/call_stmt_81_Sample/cra assign_stmt_76_to_assign_stmt_86/call_stmt_81_Update/cca)
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 49
  // (pc + 1 )
  // pc
  ADD_u8_u8_85_inst <=> (assign_stmt_76_to_assign_stmt_86/ADD_u8_u8_85_Sample/rr assign_stmt_76_to_assign_stmt_86/ADD_u8_u8_85_Update/cr) (assign_stmt_76_to_assign_stmt_86/ADD_u8_u8_85_Sample/ra assign_stmt_76_to_assign_stmt_86/ADD_u8_u8_85_Update/ca)
}
$module [bn] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %bn
  //  file prog.linked.opt.aa, line 51
  // memory-space 1 is written into.
  // memory-space 1 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_98_to_assign_stmt_112] 
    {
      // start:  	bnn := (rs1_data >> 31 )// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 56
      // Source expression
      // (rs1_data >> 31 )
      $T[LSHR_u32_u32_97_sample_start_] 
      $T[LSHR_u32_u32_97_sample_completed_] 
      $T[LSHR_u32_u32_97_update_start_] 
      $T[LSHR_u32_u32_97_update_completed_] 
      // rs1_data
      // start: Forward dependencies from rs1_data to transition LSHR_u32_u32_97_sample_start_
      // done: Forward dependencies from rs1_data to transition LSHR_u32_u32_97_sample_start_
      ;;[LSHR_u32_u32_97_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[LSHR_u32_u32_97_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      LSHR_u32_u32_97_sample_start_ &-> (LSHR_u32_u32_97_Sample)
      LSHR_u32_u32_97_sample_completed_ <-& (LSHR_u32_u32_97_Sample)
      LSHR_u32_u32_97_sample_completed_ &-> ($null)
      LSHR_u32_u32_97_update_start_ &-> (LSHR_u32_u32_97_Update)
      LSHR_u32_u32_97_update_completed_ <-& (LSHR_u32_u32_97_Update)
      // Target expression
      // (as target) bnn
      // start: WAR dependencies for bnn
      // done: WAR dependencies for bnn
      // end:  	bnn := (rs1_data >> 31 )// bits of buffering = 32. 
      // start:  	$guard (~bnn) next_pc1 := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 57
      // Guard expression 
      // bnn
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_103_sample_start_] 
      $T[ADD_u8_u8_103_sample_completed_] 
      $T[ADD_u8_u8_103_update_start_] 
      $T[ADD_u8_u8_103_update_completed_] 
      // Guard dependency for expression ADD_u8_u8_103 with guard R_bnn_99
      ADD_u8_u8_103_sample_start_ <-& (LSHR_u32_u32_97_update_completed_)
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_103_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_103_sample_start_
      ;;[ADD_u8_u8_103_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_103_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_103_sample_start_ &-> (ADD_u8_u8_103_Sample)
      ADD_u8_u8_103_sample_completed_ <-& (ADD_u8_u8_103_Sample)
      ADD_u8_u8_103_sample_completed_ &-> ($null)
      ADD_u8_u8_103_update_start_ &-> (ADD_u8_u8_103_Update)
      ADD_u8_u8_103_update_completed_ <-& (ADD_u8_u8_103_Update)
      // Target expression
      // (as target) next_pc1
      $T[STORE_next_pc1_100_sample_start_] 
      $T[STORE_next_pc1_100_sample_completed_] 
      $T[STORE_next_pc1_100_update_start_] 
      $T[STORE_next_pc1_100_update_completed_] 
      // Guard dependency for expression STORE_next_pc1_100 with guard R_bnn_99
      STORE_next_pc1_100_sample_start_ <-& (LSHR_u32_u32_97_update_completed_)
      // next_pc1
      $T[STORE_next_pc1_100_word_address_calculated] 
      $T[STORE_next_pc1_100_root_address_calculated] 
      STORE_next_pc1_100_word_address_calculated <-& (STORE_next_pc1_100_root_address_calculated)
      ;;[STORE_next_pc1_100_Sample] 
      {
        ;;[STORE_next_pc1_100_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_next_pc1_100_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_next_pc1_100_sample_start_ <-& (STORE_next_pc1_100_word_address_calculated)
      STORE_next_pc1_100_sample_start_ &-> (STORE_next_pc1_100_Sample)
      STORE_next_pc1_100_sample_completed_ <-& (STORE_next_pc1_100_Sample)
      STORE_next_pc1_100_sample_completed_ &-> ($null)
      STORE_next_pc1_100_update_start_ &-> (STORE_next_pc1_100_Update)
      STORE_next_pc1_100_update_completed_ <-& (STORE_next_pc1_100_Update)
      // start: Forward dependencies from (pc + 1 ) to transition STORE_next_pc1_100_sample_start_
      STORE_next_pc1_100_sample_start_ <-& (ADD_u8_u8_103_update_completed_)
      // done: Forward dependencies from (pc + 1 ) to transition STORE_next_pc1_100_sample_start_
      // end:  	$guard (~bnn) next_pc1 := (pc + 1 )// bits of buffering = 8. 
      // start:  	$guard (bnn) next_pc1 := ( $slice rs2_data 7 0 ) // bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 58
      // Guard expression 
      // bnn
      // Source expression
      // ( $slice rs2_data 7 0 ) 
      $T[slice_108_sample_start_] 
      $T[slice_108_sample_completed_] 
      $T[slice_108_update_start_] 
      $T[slice_108_update_completed_] 
      // Guard dependency for expression slice_108 with guard R_bnn_105
      slice_108_sample_start_ <-& (LSHR_u32_u32_97_update_completed_)
      // rs2_data
      // start: Forward dependencies from rs2_data to transition slice_108_sample_start_
      // done: Forward dependencies from rs2_data to transition slice_108_sample_start_
      ;;[slice_108_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_108_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_108_sample_start_ &-> (slice_108_Sample)
      slice_108_sample_completed_ <-& (slice_108_Sample)
      slice_108_sample_completed_ &-> ($null)
      slice_108_update_start_ &-> (slice_108_Update)
      slice_108_update_completed_ <-& (slice_108_Update)
      // Target expression
      // (as target) next_pc1
      $T[STORE_next_pc1_106_sample_start_] 
      $T[STORE_next_pc1_106_sample_completed_] 
      $T[STORE_next_pc1_106_update_start_] 
      $T[STORE_next_pc1_106_update_completed_] 
      // Guard dependency for expression STORE_next_pc1_106 with guard R_bnn_105
      STORE_next_pc1_106_sample_start_ <-& (LSHR_u32_u32_97_update_completed_)
      // next_pc1
      $T[STORE_next_pc1_106_word_address_calculated] 
      $T[STORE_next_pc1_106_root_address_calculated] 
      STORE_next_pc1_106_word_address_calculated <-& (STORE_next_pc1_106_root_address_calculated)
      ;;[STORE_next_pc1_106_Sample] 
      {
        ;;[STORE_next_pc1_106_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_next_pc1_106_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_next_pc1_106_sample_start_ <-& (STORE_next_pc1_106_word_address_calculated)
      STORE_next_pc1_106_sample_start_ &-> (STORE_next_pc1_106_Sample)
      STORE_next_pc1_106_sample_completed_ <-& (STORE_next_pc1_106_Sample)
      STORE_next_pc1_106_sample_completed_ &-> ($null)
      STORE_next_pc1_106_update_start_ &-> (STORE_next_pc1_106_Update)
      STORE_next_pc1_106_update_completed_ <-& (STORE_next_pc1_106_Update)
      // start: Forward dependencies from ( $slice rs2_data 7 0 )  to transition STORE_next_pc1_106_sample_start_
      STORE_next_pc1_106_sample_start_ <-& (slice_108_update_completed_)
      // done: Forward dependencies from ( $slice rs2_data 7 0 )  to transition STORE_next_pc1_106_sample_start_
      // end:  	$guard (bnn) next_pc1 := ( $slice rs2_data 7 0 ) // bits of buffering = 8. 
      // start:  	next_pc := next_pc1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 59
      // Source expression
      // next_pc1
      $T[LOAD_next_pc1_111_sample_start_] 
      $T[LOAD_next_pc1_111_sample_completed_] 
      $T[LOAD_next_pc1_111_update_start_] 
      $T[LOAD_next_pc1_111_update_completed_] 
      $T[LOAD_next_pc1_111_word_address_calculated] 
      $T[LOAD_next_pc1_111_root_address_calculated] 
      LOAD_next_pc1_111_word_address_calculated <-& (LOAD_next_pc1_111_root_address_calculated)
      ;;[LOAD_next_pc1_111_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[LOAD_next_pc1_111_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[LOAD_next_pc1_111_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      LOAD_next_pc1_111_sample_start_ <-& (LOAD_next_pc1_111_word_address_calculated)
      LOAD_next_pc1_111_sample_start_ &-> (LOAD_next_pc1_111_Sample)
      LOAD_next_pc1_111_sample_completed_ <-& (LOAD_next_pc1_111_Sample)
      LOAD_next_pc1_111_sample_completed_ &-> ($null)
      LOAD_next_pc1_111_update_start_ &-> (LOAD_next_pc1_111_Update)
      LOAD_next_pc1_111_update_completed_ <-& (LOAD_next_pc1_111_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := next_pc1// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_1
      //  STORE_next_pc1_100 store
      //  STORE_next_pc1_106 store
      $T [STORE_next_pc1_100_STORE_next_pc1_106_delay] $delay
      // STORE_next_pc1_100(store) -> STORE_next_pc1_106(store)
      STORE_next_pc1_106_sample_start_ <-& (STORE_next_pc1_100_STORE_next_pc1_106_delay)
      STORE_next_pc1_100_STORE_next_pc1_106_delay <-& (STORE_next_pc1_100_sample_completed_)
      //  LOAD_next_pc1_111 load
      $T [STORE_next_pc1_106_LOAD_next_pc1_111_delay] $delay
      // STORE_next_pc1_106(store) -> LOAD_next_pc1_111(load)
      LOAD_next_pc1_111_sample_start_ <-& (STORE_next_pc1_106_LOAD_next_pc1_111_delay)
      STORE_next_pc1_106_LOAD_next_pc1_111_delay <-& (STORE_next_pc1_106_sample_completed_)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %bn
    //  file prog.linked.opt.aa, line 51
    // 31 
    $constant $W[konst_96_wire_constant] : $int<32> := _b00000000000000000000000000011111// 31
    // 1 
    $constant $W[konst_102_wire_constant] : $int<8> := _b00000001// 1
    // next_pc1
    $constant $W[STORE_next_pc1_100_word_address_0] : $pointer<memory_space_1> := _b0
    // next_pc1
    $constant $W[STORE_next_pc1_106_word_address_0] : $pointer<memory_space_1> := _b0
    // next_pc1
    $constant $W[LOAD_next_pc1_111_word_address_0] : $pointer<memory_space_1> := _b0
    // 	bnn := (rs1_data >> 31 )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 56
    // bnn
    $W[bnn_98] : $int<32>
    // 	$guard (~bnn) next_pc1 := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 57
    // (pc + 1 )
    $intermediate $W[ADD_u8_u8_103_wire] : $int<8>
    // next_pc1
    $constant $W[STORE_next_pc1_100_word_address_0] : $pointer<memory_space_1> := _b0
    $W[STORE_next_pc1_100_data_0] : $int<8>
    // 	$guard (bnn) next_pc1 := ( $slice rs2_data 7 0 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 58
    // ( $slice rs2_data 7 0 ) 
    $intermediate $W[slice_108_wire] : $int<8>
    // next_pc1
    $constant $W[STORE_next_pc1_106_word_address_0] : $pointer<memory_space_1> := _b0
    $W[STORE_next_pc1_106_data_0] : $int<8>
    // 	next_pc := next_pc1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 59
    // next_pc1
    $W[LOAD_next_pc1_111_data_0] : $int<8>
    // next_pc
    // 	bnn := (rs1_data >> 31 )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 56
    // (rs1_data >> 31 )
    >>[LSHR_u32_u32_97_inst] (rs1_data konst_96_wire_constant) (bnn_98)   
    $buffering  $out LSHR_u32_u32_97_inst bnn_98 1
    $delay LSHR_u32_u32_97_inst 1
    // 	$guard (~bnn) next_pc1 := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 57
    // (pc + 1 )
    +[ADD_u8_u8_103_inst] (pc konst_102_wire_constant) (ADD_u8_u8_103_wire) $guard ( ~ bnn_98 )   
    $buffering  $out ADD_u8_u8_103_inst ADD_u8_u8_103_wire 1
    $delay ADD_u8_u8_103_inst 1
    // next_pc1
    $store [STORE_next_pc1_100_store_0] $to memory_space_1 (STORE_next_pc1_100_word_address_0 STORE_next_pc1_100_data_0) $guard ( ~ bnn_98 ) 
    $delay STORE_next_pc1_100_store_0 5
    &/ [STORE_next_pc1_100_gather_scatter] (ADD_u8_u8_103_wire) (STORE_next_pc1_100_data_0) $guard ( ~ bnn_98 ) 
    $flowthrough 
    // 	$guard (bnn) next_pc1 := ( $slice rs2_data 7 0 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 58
    // ( $slice rs2_data 7 0 ) 
    [:] [slice_108_inst] (rs2_data 7 0) (slice_108_wire) $guard ( bnn_98 ) 
    $buffering  $out slice_108_inst slice_108_wire 1
    $delay slice_108_inst 1
    // next_pc1
    $store [STORE_next_pc1_106_store_0] $to memory_space_1 (STORE_next_pc1_106_word_address_0 STORE_next_pc1_106_data_0) $guard ( bnn_98 ) 
    $delay STORE_next_pc1_106_store_0 5
    &/ [STORE_next_pc1_106_gather_scatter] (slice_108_wire) (STORE_next_pc1_106_data_0) $guard ( bnn_98 ) 
    $flowthrough 
    // 	next_pc := next_pc1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 59
    // next_pc1
    $load [LOAD_next_pc1_111_load_0] $from memory_space_1 (LOAD_next_pc1_111_word_address_0) (LOAD_next_pc1_111_data_0) 
    $delay LOAD_next_pc1_111_load_0 5
    &/ [LOAD_next_pc1_111_gather_scatter] (LOAD_next_pc1_111_data_0) (next_pc) 
    $flowthrough 
  }
  // end data-path
  // 	bnn := (rs1_data >> 31 )// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 56
  // (rs1_data >> 31 )
  // rs1_data
  LSHR_u32_u32_97_inst <=> (assign_stmt_98_to_assign_stmt_112/LSHR_u32_u32_97_Sample/rr assign_stmt_98_to_assign_stmt_112/LSHR_u32_u32_97_Update/cr) (assign_stmt_98_to_assign_stmt_112/LSHR_u32_u32_97_Sample/ra assign_stmt_98_to_assign_stmt_112/LSHR_u32_u32_97_Update/ca)
  // 	$guard (~bnn) next_pc1 := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 57
  // (pc + 1 )
  // pc
  ADD_u8_u8_103_inst <=> (assign_stmt_98_to_assign_stmt_112/ADD_u8_u8_103_Sample/rr assign_stmt_98_to_assign_stmt_112/ADD_u8_u8_103_Update/cr) (assign_stmt_98_to_assign_stmt_112/ADD_u8_u8_103_Sample/ra assign_stmt_98_to_assign_stmt_112/ADD_u8_u8_103_Update/ca)
  // next_pc1
  STORE_next_pc1_100_gather_scatter <=> (assign_stmt_98_to_assign_stmt_112/STORE_next_pc1_100_Sample/STORE_next_pc1_100_Split/split_req) (assign_stmt_98_to_assign_stmt_112/STORE_next_pc1_100_Sample/STORE_next_pc1_100_Split/split_ack)
  STORE_next_pc1_100_store_0 <=> (assign_stmt_98_to_assign_stmt_112/STORE_next_pc1_100_Sample/word_access_start/word_0/rr assign_stmt_98_to_assign_stmt_112/STORE_next_pc1_100_Update/word_access_complete/word_0/cr) (assign_stmt_98_to_assign_stmt_112/STORE_next_pc1_100_Sample/word_access_start/word_0/ra assign_stmt_98_to_assign_stmt_112/STORE_next_pc1_100_Update/word_access_complete/word_0/ca)
  // 	$guard (bnn) next_pc1 := ( $slice rs2_data 7 0 ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 58
  // rs2_data
  // ( $slice rs2_data 7 0 ) 
  slice_108_inst <=> (assign_stmt_98_to_assign_stmt_112/slice_108_Sample/rr assign_stmt_98_to_assign_stmt_112/slice_108_Update/cr) (assign_stmt_98_to_assign_stmt_112/slice_108_Sample/ra assign_stmt_98_to_assign_stmt_112/slice_108_Update/ca)
  // next_pc1
  STORE_next_pc1_106_gather_scatter <=> (assign_stmt_98_to_assign_stmt_112/STORE_next_pc1_106_Sample/STORE_next_pc1_106_Split/split_req) (assign_stmt_98_to_assign_stmt_112/STORE_next_pc1_106_Sample/STORE_next_pc1_106_Split/split_ack)
  STORE_next_pc1_106_store_0 <=> (assign_stmt_98_to_assign_stmt_112/STORE_next_pc1_106_Sample/word_access_start/word_0/rr assign_stmt_98_to_assign_stmt_112/STORE_next_pc1_106_Update/word_access_complete/word_0/cr) (assign_stmt_98_to_assign_stmt_112/STORE_next_pc1_106_Sample/word_access_start/word_0/ra assign_stmt_98_to_assign_stmt_112/STORE_next_pc1_106_Update/word_access_complete/word_0/ca)
  // 	next_pc := next_pc1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 59
  // next_pc1
  LOAD_next_pc1_111_gather_scatter <=> (assign_stmt_98_to_assign_stmt_112/LOAD_next_pc1_111_Update/LOAD_next_pc1_111_Merge/merge_req) (assign_stmt_98_to_assign_stmt_112/LOAD_next_pc1_111_Update/LOAD_next_pc1_111_Merge/merge_ack)
  LOAD_next_pc1_111_load_0 <=> (assign_stmt_98_to_assign_stmt_112/LOAD_next_pc1_111_Sample/word_access_start/word_0/rr assign_stmt_98_to_assign_stmt_112/LOAD_next_pc1_111_Update/word_access_complete/word_0/cr) (assign_stmt_98_to_assign_stmt_112/LOAD_next_pc1_111_Sample/word_access_start/word_0/ra assign_stmt_98_to_assign_stmt_112/LOAD_next_pc1_111_Update/word_access_complete/word_0/ca)
}
$module [bz] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %bz
  //  file prog.linked.opt.aa, line 61
  // memory-space 1 is written into.
  // memory-space 1 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_122_to_assign_stmt_136] 
    {
      // start:  	bzz := rs1_data// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 66
      $T[assign_stmt_122_sample_start_] 
      $T[assign_stmt_122_sample_completed_] 
      $T[assign_stmt_122_update_start_] 
      $T[assign_stmt_122_update_completed_] 
      // Source expression
      // rs1_data
      // Target expression
      // (as target) bzz
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_122_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_122_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_122_sample_start_ &-> (assign_stmt_122_Sample)
      assign_stmt_122_sample_completed_ <-& (assign_stmt_122_Sample)
      assign_stmt_122_sample_completed_ &-> ($null)
      assign_stmt_122_update_start_ &-> (assign_stmt_122_Update)
      assign_stmt_122_update_completed_ <-& (assign_stmt_122_Update)
      // start: Forward dependencies from rs1_data to transition assign_stmt_122_sample_start_
      // done: Forward dependencies from rs1_data to transition assign_stmt_122_sample_start_
      // start: WAR dependencies for bzz
      // done: WAR dependencies for bzz
      // end:  	bzz := rs1_data// bits of buffering = 32. 
      // start:  	$guard (bzz) next_pc1 := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 67
      // Guard expression 
      // bzz
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_127_sample_start_] 
      $T[ADD_u8_u8_127_sample_completed_] 
      $T[ADD_u8_u8_127_update_start_] 
      $T[ADD_u8_u8_127_update_completed_] 
      // Guard dependency for expression ADD_u8_u8_127 with guard R_bzz_123
      ADD_u8_u8_127_sample_start_ <-& (assign_stmt_122_update_completed_)
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_127_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_127_sample_start_
      ;;[ADD_u8_u8_127_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_127_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_127_sample_start_ &-> (ADD_u8_u8_127_Sample)
      ADD_u8_u8_127_sample_completed_ <-& (ADD_u8_u8_127_Sample)
      ADD_u8_u8_127_sample_completed_ &-> ($null)
      ADD_u8_u8_127_update_start_ &-> (ADD_u8_u8_127_Update)
      ADD_u8_u8_127_update_completed_ <-& (ADD_u8_u8_127_Update)
      // Target expression
      // (as target) next_pc1
      $T[STORE_next_pc1_124_sample_start_] 
      $T[STORE_next_pc1_124_sample_completed_] 
      $T[STORE_next_pc1_124_update_start_] 
      $T[STORE_next_pc1_124_update_completed_] 
      // Guard dependency for expression STORE_next_pc1_124 with guard R_bzz_123
      STORE_next_pc1_124_sample_start_ <-& (assign_stmt_122_update_completed_)
      // next_pc1
      $T[STORE_next_pc1_124_word_address_calculated] 
      $T[STORE_next_pc1_124_root_address_calculated] 
      STORE_next_pc1_124_word_address_calculated <-& (STORE_next_pc1_124_root_address_calculated)
      ;;[STORE_next_pc1_124_Sample] 
      {
        ;;[STORE_next_pc1_124_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_next_pc1_124_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_next_pc1_124_sample_start_ <-& (STORE_next_pc1_124_word_address_calculated)
      STORE_next_pc1_124_sample_start_ &-> (STORE_next_pc1_124_Sample)
      STORE_next_pc1_124_sample_completed_ <-& (STORE_next_pc1_124_Sample)
      STORE_next_pc1_124_sample_completed_ &-> ($null)
      STORE_next_pc1_124_update_start_ &-> (STORE_next_pc1_124_Update)
      STORE_next_pc1_124_update_completed_ <-& (STORE_next_pc1_124_Update)
      // start: Forward dependencies from (pc + 1 ) to transition STORE_next_pc1_124_sample_start_
      STORE_next_pc1_124_sample_start_ <-& (ADD_u8_u8_127_update_completed_)
      // done: Forward dependencies from (pc + 1 ) to transition STORE_next_pc1_124_sample_start_
      // end:  	$guard (bzz) next_pc1 := (pc + 1 )// bits of buffering = 8. 
      // start:  	$guard (~bzz) next_pc1 := ( $slice rs2_data 7 0 ) // bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 68
      // Guard expression 
      // bzz
      // Source expression
      // ( $slice rs2_data 7 0 ) 
      $T[slice_132_sample_start_] 
      $T[slice_132_sample_completed_] 
      $T[slice_132_update_start_] 
      $T[slice_132_update_completed_] 
      // Guard dependency for expression slice_132 with guard R_bzz_129
      slice_132_sample_start_ <-& (assign_stmt_122_update_completed_)
      // rs2_data
      // start: Forward dependencies from rs2_data to transition slice_132_sample_start_
      // done: Forward dependencies from rs2_data to transition slice_132_sample_start_
      ;;[slice_132_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_132_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_132_sample_start_ &-> (slice_132_Sample)
      slice_132_sample_completed_ <-& (slice_132_Sample)
      slice_132_sample_completed_ &-> ($null)
      slice_132_update_start_ &-> (slice_132_Update)
      slice_132_update_completed_ <-& (slice_132_Update)
      // Target expression
      // (as target) next_pc1
      $T[STORE_next_pc1_130_sample_start_] 
      $T[STORE_next_pc1_130_sample_completed_] 
      $T[STORE_next_pc1_130_update_start_] 
      $T[STORE_next_pc1_130_update_completed_] 
      // Guard dependency for expression STORE_next_pc1_130 with guard R_bzz_129
      STORE_next_pc1_130_sample_start_ <-& (assign_stmt_122_update_completed_)
      // next_pc1
      $T[STORE_next_pc1_130_word_address_calculated] 
      $T[STORE_next_pc1_130_root_address_calculated] 
      STORE_next_pc1_130_word_address_calculated <-& (STORE_next_pc1_130_root_address_calculated)
      ;;[STORE_next_pc1_130_Sample] 
      {
        ;;[STORE_next_pc1_130_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_next_pc1_130_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_next_pc1_130_sample_start_ <-& (STORE_next_pc1_130_word_address_calculated)
      STORE_next_pc1_130_sample_start_ &-> (STORE_next_pc1_130_Sample)
      STORE_next_pc1_130_sample_completed_ <-& (STORE_next_pc1_130_Sample)
      STORE_next_pc1_130_sample_completed_ &-> ($null)
      STORE_next_pc1_130_update_start_ &-> (STORE_next_pc1_130_Update)
      STORE_next_pc1_130_update_completed_ <-& (STORE_next_pc1_130_Update)
      // start: Forward dependencies from ( $slice rs2_data 7 0 )  to transition STORE_next_pc1_130_sample_start_
      STORE_next_pc1_130_sample_start_ <-& (slice_132_update_completed_)
      // done: Forward dependencies from ( $slice rs2_data 7 0 )  to transition STORE_next_pc1_130_sample_start_
      // end:  	$guard (~bzz) next_pc1 := ( $slice rs2_data 7 0 ) // bits of buffering = 8. 
      // start:  	next_pc := next_pc1// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 69
      // Source expression
      // next_pc1
      $T[LOAD_next_pc1_135_sample_start_] 
      $T[LOAD_next_pc1_135_sample_completed_] 
      $T[LOAD_next_pc1_135_update_start_] 
      $T[LOAD_next_pc1_135_update_completed_] 
      $T[LOAD_next_pc1_135_word_address_calculated] 
      $T[LOAD_next_pc1_135_root_address_calculated] 
      LOAD_next_pc1_135_word_address_calculated <-& (LOAD_next_pc1_135_root_address_calculated)
      ;;[LOAD_next_pc1_135_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[LOAD_next_pc1_135_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[LOAD_next_pc1_135_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      LOAD_next_pc1_135_sample_start_ <-& (LOAD_next_pc1_135_word_address_calculated)
      LOAD_next_pc1_135_sample_start_ &-> (LOAD_next_pc1_135_Sample)
      LOAD_next_pc1_135_sample_completed_ <-& (LOAD_next_pc1_135_Sample)
      LOAD_next_pc1_135_sample_completed_ &-> ($null)
      LOAD_next_pc1_135_update_start_ &-> (LOAD_next_pc1_135_Update)
      LOAD_next_pc1_135_update_completed_ <-& (LOAD_next_pc1_135_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := next_pc1// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_1
      //  STORE_next_pc1_124 store
      //  STORE_next_pc1_130 store
      $T [STORE_next_pc1_124_STORE_next_pc1_130_delay] $delay
      // STORE_next_pc1_124(store) -> STORE_next_pc1_130(store)
      STORE_next_pc1_130_sample_start_ <-& (STORE_next_pc1_124_STORE_next_pc1_130_delay)
      STORE_next_pc1_124_STORE_next_pc1_130_delay <-& (STORE_next_pc1_124_sample_completed_)
      //  LOAD_next_pc1_135 load
      $T [STORE_next_pc1_130_LOAD_next_pc1_135_delay] $delay
      // STORE_next_pc1_130(store) -> LOAD_next_pc1_135(load)
      LOAD_next_pc1_135_sample_start_ <-& (STORE_next_pc1_130_LOAD_next_pc1_135_delay)
      STORE_next_pc1_130_LOAD_next_pc1_135_delay <-& (STORE_next_pc1_130_sample_completed_)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %bz
    //  file prog.linked.opt.aa, line 61
    // 1 
    $constant $W[konst_126_wire_constant] : $int<8> := _b00000001// 1
    // next_pc1
    $constant $W[STORE_next_pc1_124_word_address_0] : $pointer<memory_space_1> := _b0
    // next_pc1
    $constant $W[STORE_next_pc1_130_word_address_0] : $pointer<memory_space_1> := _b0
    // next_pc1
    $constant $W[LOAD_next_pc1_135_word_address_0] : $pointer<memory_space_1> := _b0
    // 	bzz := rs1_data// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 66
    // bzz
    $W[bzz_122] : $int<32>
    // 	$guard (bzz) next_pc1 := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 67
    // (pc + 1 )
    $intermediate $W[ADD_u8_u8_127_wire] : $int<8>
    // next_pc1
    $constant $W[STORE_next_pc1_124_word_address_0] : $pointer<memory_space_1> := _b0
    $W[STORE_next_pc1_124_data_0] : $int<8>
    // 	$guard (~bzz) next_pc1 := ( $slice rs2_data 7 0 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 68
    // ( $slice rs2_data 7 0 ) 
    $intermediate $W[slice_132_wire] : $int<8>
    // next_pc1
    $constant $W[STORE_next_pc1_130_word_address_0] : $pointer<memory_space_1> := _b0
    $W[STORE_next_pc1_130_data_0] : $int<8>
    // 	next_pc := next_pc1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 69
    // next_pc1
    $W[LOAD_next_pc1_135_data_0] : $int<8>
    // next_pc
    // 	bzz := rs1_data// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 66
    # := [W_bzz_120_inst] (rs1_data) (bzz_122)   
    // 	$guard (bzz) next_pc1 := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 67
    // (pc + 1 )
    +[ADD_u8_u8_127_inst] (pc konst_126_wire_constant) (ADD_u8_u8_127_wire) $guard ( bzz_122 )   
    $buffering  $out ADD_u8_u8_127_inst ADD_u8_u8_127_wire 1
    $delay ADD_u8_u8_127_inst 1
    // next_pc1
    $store [STORE_next_pc1_124_store_0] $to memory_space_1 (STORE_next_pc1_124_word_address_0 STORE_next_pc1_124_data_0) $guard ( bzz_122 ) 
    $delay STORE_next_pc1_124_store_0 5
    &/ [STORE_next_pc1_124_gather_scatter] (ADD_u8_u8_127_wire) (STORE_next_pc1_124_data_0) $guard ( bzz_122 ) 
    $flowthrough 
    // 	$guard (~bzz) next_pc1 := ( $slice rs2_data 7 0 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 68
    // ( $slice rs2_data 7 0 ) 
    [:] [slice_132_inst] (rs2_data 7 0) (slice_132_wire) $guard ( ~ bzz_122 ) 
    $buffering  $out slice_132_inst slice_132_wire 1
    $delay slice_132_inst 1
    // next_pc1
    $store [STORE_next_pc1_130_store_0] $to memory_space_1 (STORE_next_pc1_130_word_address_0 STORE_next_pc1_130_data_0) $guard ( ~ bzz_122 ) 
    $delay STORE_next_pc1_130_store_0 5
    &/ [STORE_next_pc1_130_gather_scatter] (slice_132_wire) (STORE_next_pc1_130_data_0) $guard ( ~ bzz_122 ) 
    $flowthrough 
    // 	next_pc := next_pc1// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 69
    // next_pc1
    $load [LOAD_next_pc1_135_load_0] $from memory_space_1 (LOAD_next_pc1_135_word_address_0) (LOAD_next_pc1_135_data_0) 
    $delay LOAD_next_pc1_135_load_0 5
    &/ [LOAD_next_pc1_135_gather_scatter] (LOAD_next_pc1_135_data_0) (next_pc) 
    $flowthrough 
  }
  // end data-path
  // 	bzz := rs1_data// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 66
  // rs1_data
  W_bzz_120_inst <=> (assign_stmt_122_to_assign_stmt_136/assign_stmt_122_Sample/req assign_stmt_122_to_assign_stmt_136/assign_stmt_122_Update/req) (assign_stmt_122_to_assign_stmt_136/assign_stmt_122_Sample/ack assign_stmt_122_to_assign_stmt_136/assign_stmt_122_Update/ack)
  // 	$guard (bzz) next_pc1 := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 67
  // (pc + 1 )
  // pc
  ADD_u8_u8_127_inst <=> (assign_stmt_122_to_assign_stmt_136/ADD_u8_u8_127_Sample/rr assign_stmt_122_to_assign_stmt_136/ADD_u8_u8_127_Update/cr) (assign_stmt_122_to_assign_stmt_136/ADD_u8_u8_127_Sample/ra assign_stmt_122_to_assign_stmt_136/ADD_u8_u8_127_Update/ca)
  // next_pc1
  STORE_next_pc1_124_gather_scatter <=> (assign_stmt_122_to_assign_stmt_136/STORE_next_pc1_124_Sample/STORE_next_pc1_124_Split/split_req) (assign_stmt_122_to_assign_stmt_136/STORE_next_pc1_124_Sample/STORE_next_pc1_124_Split/split_ack)
  STORE_next_pc1_124_store_0 <=> (assign_stmt_122_to_assign_stmt_136/STORE_next_pc1_124_Sample/word_access_start/word_0/rr assign_stmt_122_to_assign_stmt_136/STORE_next_pc1_124_Update/word_access_complete/word_0/cr) (assign_stmt_122_to_assign_stmt_136/STORE_next_pc1_124_Sample/word_access_start/word_0/ra assign_stmt_122_to_assign_stmt_136/STORE_next_pc1_124_Update/word_access_complete/word_0/ca)
  // 	$guard (~bzz) next_pc1 := ( $slice rs2_data 7 0 ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 68
  // rs2_data
  // ( $slice rs2_data 7 0 ) 
  slice_132_inst <=> (assign_stmt_122_to_assign_stmt_136/slice_132_Sample/rr assign_stmt_122_to_assign_stmt_136/slice_132_Update/cr) (assign_stmt_122_to_assign_stmt_136/slice_132_Sample/ra assign_stmt_122_to_assign_stmt_136/slice_132_Update/ca)
  // next_pc1
  STORE_next_pc1_130_gather_scatter <=> (assign_stmt_122_to_assign_stmt_136/STORE_next_pc1_130_Sample/STORE_next_pc1_130_Split/split_req) (assign_stmt_122_to_assign_stmt_136/STORE_next_pc1_130_Sample/STORE_next_pc1_130_Split/split_ack)
  STORE_next_pc1_130_store_0 <=> (assign_stmt_122_to_assign_stmt_136/STORE_next_pc1_130_Sample/word_access_start/word_0/rr assign_stmt_122_to_assign_stmt_136/STORE_next_pc1_130_Update/word_access_complete/word_0/cr) (assign_stmt_122_to_assign_stmt_136/STORE_next_pc1_130_Sample/word_access_start/word_0/ra assign_stmt_122_to_assign_stmt_136/STORE_next_pc1_130_Update/word_access_complete/word_0/ca)
  // 	next_pc := next_pc1// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 69
  // next_pc1
  LOAD_next_pc1_135_gather_scatter <=> (assign_stmt_122_to_assign_stmt_136/LOAD_next_pc1_135_Update/LOAD_next_pc1_135_Merge/merge_req) (assign_stmt_122_to_assign_stmt_136/LOAD_next_pc1_135_Update/LOAD_next_pc1_135_Merge/merge_ack)
  LOAD_next_pc1_135_load_0 <=> (assign_stmt_122_to_assign_stmt_136/LOAD_next_pc1_135_Sample/word_access_start/word_0/rr assign_stmt_122_to_assign_stmt_136/LOAD_next_pc1_135_Update/word_access_complete/word_0/cr) (assign_stmt_122_to_assign_stmt_136/LOAD_next_pc1_135_Sample/word_access_start/word_0/ra assign_stmt_122_to_assign_stmt_136/LOAD_next_pc1_135_Update/word_access_complete/word_0/ca)
}
$module [call] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %call
  //  file prog.linked.opt.aa, line 71
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_152_to_assign_stmt_161] 
    {
      // start:  	pc_32 := (zero24 && pc)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 77
      // Source expression
      // (zero24 && pc)
      $T[CONCAT_u24_u32_151_sample_start_] 
      $T[CONCAT_u24_u32_151_sample_completed_] 
      $T[CONCAT_u24_u32_151_update_start_] 
      $T[CONCAT_u24_u32_151_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition CONCAT_u24_u32_151_sample_start_
      // done: Forward dependencies from pc to transition CONCAT_u24_u32_151_sample_start_
      ;;[CONCAT_u24_u32_151_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[CONCAT_u24_u32_151_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      CONCAT_u24_u32_151_sample_start_ &-> (CONCAT_u24_u32_151_Sample)
      CONCAT_u24_u32_151_sample_completed_ <-& (CONCAT_u24_u32_151_Sample)
      CONCAT_u24_u32_151_sample_completed_ &-> ($null)
      CONCAT_u24_u32_151_update_start_ &-> (CONCAT_u24_u32_151_Update)
      CONCAT_u24_u32_151_update_completed_ <-& (CONCAT_u24_u32_151_Update)
      // Target expression
      // (as target) pc_32
      // start: WAR dependencies for pc_32
      // done: WAR dependencies for pc_32
      // end:  	pc_32 := (zero24 && pc)// bits of buffering = 32. 
      // start: 	$call accessreg (0  rd pc_32 ) (dummy ) 
      //  file prog.linked.opt.aa, line 78
      $T[call_stmt_157_sample_start_] 
      $T[call_stmt_157_sample_completed_] 
      $T[call_stmt_157_update_start_] 
      $T[call_stmt_157_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rd
      // Call input argument 2
      // pc_32
      // start: Forward dependencies from rd to transition call_stmt_157_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_157_sample_start_
      // start: Forward dependencies from pc_32 to transition call_stmt_157_sample_start_
      call_stmt_157_sample_start_ <-& (CONCAT_u24_u32_151_update_completed_)
      // done: Forward dependencies from pc_32 to transition call_stmt_157_sample_start_
      ;;[call_stmt_157_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_157_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_157_sample_start_ &-> (call_stmt_157_Sample)
      call_stmt_157_sample_completed_ <-& (call_stmt_157_Sample)
      call_stmt_157_sample_completed_ &-> ($null)
      call_stmt_157_update_start_ &-> (call_stmt_157_Update)
      call_stmt_157_update_completed_ <-& (call_stmt_157_Update)
      // Call output argument 0
      // (as target) dummy
      // start: WAR dependencies for dummy
      // done: WAR dependencies for dummy
      // end: 	$call accessreg (0  rd pc_32 ) (dummy ) 
      // start:  	next_pc := ( $slice rs1_data 7 0 ) // bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 79
      // Source expression
      // ( $slice rs1_data 7 0 ) 
      $T[slice_160_sample_start_] 
      $T[slice_160_sample_completed_] 
      $T[slice_160_update_start_] 
      $T[slice_160_update_completed_] 
      // rs1_data
      // start: Forward dependencies from rs1_data to transition slice_160_sample_start_
      // done: Forward dependencies from rs1_data to transition slice_160_sample_start_
      ;;[slice_160_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_160_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_160_sample_start_ &-> (slice_160_Sample)
      slice_160_sample_completed_ <-& (slice_160_Sample)
      slice_160_sample_completed_ &-> ($null)
      slice_160_update_start_ &-> (slice_160_Update)
      slice_160_update_completed_ <-& (slice_160_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := ( $slice rs1_data 7 0 ) // bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  call_stmt_157 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %call
    //  file prog.linked.opt.aa, line 71
    $constant $W[xxcallxxzero24] : $int<24> := _b000000000000000000000000// 0
    // zero24
    $constant $W[R_zero24_149_wire_constant] : $int<24> := _b000000000000000000000000// 0
    // 	$call accessreg (0  rd pc_32 ) (dummy ) 
    //  file prog.linked.opt.aa, line 78
    // 0 
    $constant $W[konst_153_wire_constant] : $int<1> := _b0// 0
    // 	pc_32 := (zero24 && pc)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 77
    // pc_32
    $W[pc_32_152] : $int<32>
    // 	$call accessreg (0  rd pc_32 ) (dummy ) 
    //  file prog.linked.opt.aa, line 78
    // dummy
    $W[dummy_157] : $int<32>
    // 	next_pc := ( $slice rs1_data 7 0 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 79
    // next_pc
    // 	pc_32 := (zero24 && pc)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 77
    // (zero24 && pc)
    &&[CONCAT_u24_u32_151_inst] (R_zero24_149_wire_constant pc) (pc_32_152)   
    $buffering  $out CONCAT_u24_u32_151_inst pc_32_152 1
    $delay CONCAT_u24_u32_151_inst 1
    // 	$call accessreg (0  rd pc_32 ) (dummy ) 
    //  file prog.linked.opt.aa, line 78
    $call [call_stmt_157_call] $module accessreg(konst_153_wire_constant rd pc_32_152) (dummy_157)  
    $delay call_stmt_157_call 6
    $buffering  $in call_stmt_157_call konst_153_wire_constant 1
    $buffering  $in call_stmt_157_call rd 1
    $buffering  $in call_stmt_157_call pc_32_152 1
    $buffering  $out call_stmt_157_call dummy_157 1
    // 	next_pc := ( $slice rs1_data 7 0 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 79
    // ( $slice rs1_data 7 0 ) 
    [:] [slice_160_inst] (rs1_data 7 0) (next_pc) 
    $buffering  $out slice_160_inst next_pc 1
    $delay slice_160_inst 1
  }
  // end data-path
  // 	pc_32 := (zero24 && pc)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 77
  // (zero24 && pc)
  // pc
  CONCAT_u24_u32_151_inst <=> (assign_stmt_152_to_assign_stmt_161/CONCAT_u24_u32_151_Sample/rr assign_stmt_152_to_assign_stmt_161/CONCAT_u24_u32_151_Update/cr) (assign_stmt_152_to_assign_stmt_161/CONCAT_u24_u32_151_Sample/ra assign_stmt_152_to_assign_stmt_161/CONCAT_u24_u32_151_Update/ca)
  // 	$call accessreg (0  rd pc_32 ) (dummy ) 
  //  file prog.linked.opt.aa, line 78
  // rd
  // pc_32
  call_stmt_157_call <=> (assign_stmt_152_to_assign_stmt_161/call_stmt_157_Sample/crr assign_stmt_152_to_assign_stmt_161/call_stmt_157_Update/ccr) (assign_stmt_152_to_assign_stmt_161/call_stmt_157_Sample/cra assign_stmt_152_to_assign_stmt_161/call_stmt_157_Update/cca)
  // 	next_pc := ( $slice rs1_data 7 0 ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 79
  // rs1_data
  // ( $slice rs1_data 7 0 ) 
  slice_160_inst <=> (assign_stmt_152_to_assign_stmt_161/slice_160_Sample/rr assign_stmt_152_to_assign_stmt_161/slice_160_Update/cr) (assign_stmt_152_to_assign_stmt_161/slice_160_Sample/ra assign_stmt_152_to_assign_stmt_161/slice_160_Update/ca)
}
$module [cmp] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %cmp
  //  file prog.linked.opt.aa, line 81
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_190_to_assign_stmt_200] 
    {
      // start:  	output := ((( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) ) | ( $mux (rs1_data > rs2_data) 1   _b0  ) )// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 86
      // Source expression
      // ((( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) ) | ( $mux (rs1_data > rs2_data) 1   _b0  ) )
      $T[OR_u32_u32_189_sample_start_] 
      $T[OR_u32_u32_189_sample_completed_] 
      $T[OR_u32_u32_189_update_start_] 
      $T[OR_u32_u32_189_update_completed_] 
      // (( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) )
      // ( $mux (rs1_data == rs2_data) 0   _b0  ) 
      // (rs1_data == rs2_data)
      // rs1_data
      // rs2_data
      // ( $mux (rs1_data < rs2_data) -1   _b0  ) 
      // (rs1_data < rs2_data)
      // rs1_data
      // rs2_data
      // ( $mux (rs1_data > rs2_data) 1   _b0  ) 
      // (rs1_data > rs2_data)
      // rs1_data
      // rs2_data
      // start: Forward dependencies from (( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) ) to transition OR_u32_u32_189_sample_start_
      // done: Forward dependencies from (( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) ) to transition OR_u32_u32_189_sample_start_
      // start: Forward dependencies from ( $mux (rs1_data > rs2_data) 1   _b0  )  to transition OR_u32_u32_189_sample_start_
      // done: Forward dependencies from ( $mux (rs1_data > rs2_data) 1   _b0  )  to transition OR_u32_u32_189_sample_start_
      ;;[OR_u32_u32_189_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[OR_u32_u32_189_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      OR_u32_u32_189_sample_start_ &-> (OR_u32_u32_189_Sample)
      OR_u32_u32_189_sample_completed_ <-& (OR_u32_u32_189_Sample)
      OR_u32_u32_189_sample_completed_ &-> ($null)
      OR_u32_u32_189_update_start_ &-> (OR_u32_u32_189_Update)
      OR_u32_u32_189_update_completed_ <-& (OR_u32_u32_189_Update)
      // Target expression
      // (as target) output
      // start: WAR dependencies for output
      // done: WAR dependencies for output
      // end:  	output := ((( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) ) | ( $mux (rs1_data > rs2_data) 1   _b0  ) )// bits of buffering = 32. 
      // start: 	$call accessreg (0  rd output ) (dummy ) 
      //  file prog.linked.opt.aa, line 87
      $T[call_stmt_195_sample_start_] 
      $T[call_stmt_195_sample_completed_] 
      $T[call_stmt_195_update_start_] 
      $T[call_stmt_195_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rd
      // Call input argument 2
      // output
      // start: Forward dependencies from rd to transition call_stmt_195_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_195_sample_start_
      // start: Forward dependencies from output to transition call_stmt_195_sample_start_
      call_stmt_195_sample_start_ <-& (OR_u32_u32_189_update_completed_)
      // done: Forward dependencies from output to transition call_stmt_195_sample_start_
      ;;[call_stmt_195_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_195_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_195_sample_start_ &-> (call_stmt_195_Sample)
      call_stmt_195_sample_completed_ <-& (call_stmt_195_Sample)
      call_stmt_195_sample_completed_ &-> ($null)
      call_stmt_195_update_start_ &-> (call_stmt_195_Update)
      call_stmt_195_update_completed_ <-& (call_stmt_195_Update)
      // Call output argument 0
      // (as target) dummy
      // start: WAR dependencies for dummy
      // done: WAR dependencies for dummy
      // end: 	$call accessreg (0  rd output ) (dummy ) 
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 88
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_199_sample_start_] 
      $T[ADD_u8_u8_199_sample_completed_] 
      $T[ADD_u8_u8_199_update_start_] 
      $T[ADD_u8_u8_199_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_199_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_199_sample_start_
      ;;[ADD_u8_u8_199_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_199_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_199_sample_start_ &-> (ADD_u8_u8_199_Sample)
      ADD_u8_u8_199_sample_completed_ <-& (ADD_u8_u8_199_Sample)
      ADD_u8_u8_199_sample_completed_ &-> ($null)
      ADD_u8_u8_199_update_start_ &-> (ADD_u8_u8_199_Update)
      ADD_u8_u8_199_update_completed_ <-& (ADD_u8_u8_199_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  call_stmt_195 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %cmp
    //  file prog.linked.opt.aa, line 81
    // ( $mux (rs1_data == rs2_data) 0   _b0  ) 
    // 0 
    $constant $W[konst_173_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // _b0 
    $constant $W[konst_174_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (rs1_data < rs2_data) -1   _b0  ) 
    // -1 
    $constant $W[konst_179_wire_constant] : $int<32> := _b11111111111111111111111111111111// -1
    // _b0 
    $constant $W[konst_180_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (rs1_data > rs2_data) 1   _b0  ) 
    // 1 
    $constant $W[konst_186_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // _b0 
    $constant $W[konst_187_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 87
    // 0 
    $constant $W[konst_191_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_198_wire_constant] : $int<8> := _b00000001// 1
    // 	output := ((( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) ) | ( $mux (rs1_data > rs2_data) 1   _b0  ) )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 86
    // (rs1_data == rs2_data)
    $intermediate $W[EQ_u32_u1_172_wire] : $int<1>
    // ( $mux (rs1_data == rs2_data) 0   _b0  ) 
    $intermediate $W[MUX_175_wire] : $int<32>
    // (rs1_data < rs2_data)
    $intermediate $W[ULT_u32_u1_178_wire] : $int<1>
    // ( $mux (rs1_data < rs2_data) -1   _b0  ) 
    $intermediate $W[MUX_181_wire] : $int<32>
    // (( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) )
    $intermediate $W[OR_u32_u32_182_wire] : $int<32>
    // (rs1_data > rs2_data)
    $intermediate $W[UGT_u32_u1_185_wire] : $int<1>
    // ( $mux (rs1_data > rs2_data) 1   _b0  ) 
    $intermediate $W[MUX_188_wire] : $int<32>
    // output
    $W[output_190] : $int<32>
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 87
    // dummy
    $W[dummy_195] : $int<32>
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 88
    // next_pc
    // 	output := ((( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) ) | ( $mux (rs1_data > rs2_data) 1   _b0  ) )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 86
    // (rs1_data == rs2_data)
    ==[EQ_u32_u1_172_inst] (rs1_data rs2_data) (EQ_u32_u1_172_wire)   $flowthrough 
    $delay EQ_u32_u1_172_inst 0
    // ( $mux (rs1_data == rs2_data) 0   _b0  ) 
    ? [MUX_175_inst] (EQ_u32_u1_172_wire konst_173_wire_constant konst_174_wire_constant) (MUX_175_wire)  $flowthrough
    // (rs1_data < rs2_data)
    <[ULT_u32_u1_178_inst] (rs1_data rs2_data) (ULT_u32_u1_178_wire)   $flowthrough 
    $delay ULT_u32_u1_178_inst 0
    // ( $mux (rs1_data < rs2_data) -1   _b0  ) 
    ? [MUX_181_inst] (ULT_u32_u1_178_wire konst_179_wire_constant konst_180_wire_constant) (MUX_181_wire)  $flowthrough
    // (( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) )
    |[OR_u32_u32_182_inst] (MUX_175_wire MUX_181_wire) (OR_u32_u32_182_wire)   $flowthrough 
    $delay OR_u32_u32_182_inst 0
    // (rs1_data > rs2_data)
    >[UGT_u32_u1_185_inst] (rs1_data rs2_data) (UGT_u32_u1_185_wire)   $flowthrough 
    $delay UGT_u32_u1_185_inst 0
    // ( $mux (rs1_data > rs2_data) 1   _b0  ) 
    ? [MUX_188_inst] (UGT_u32_u1_185_wire konst_186_wire_constant konst_187_wire_constant) (MUX_188_wire)  $flowthrough
    // ((( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) ) | ( $mux (rs1_data > rs2_data) 1   _b0  ) )
    |[OR_u32_u32_189_inst] (OR_u32_u32_182_wire MUX_188_wire) (output_190)   
    $buffering  $out OR_u32_u32_189_inst output_190 1
    $delay OR_u32_u32_189_inst 1
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 87
    $call [call_stmt_195_call] $module accessreg(konst_191_wire_constant rd output_190) (dummy_195)  
    $delay call_stmt_195_call 6
    $buffering  $in call_stmt_195_call konst_191_wire_constant 1
    $buffering  $in call_stmt_195_call rd 1
    $buffering  $in call_stmt_195_call output_190 1
    $buffering  $out call_stmt_195_call dummy_195 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 88
    // (pc + 1 )
    +[ADD_u8_u8_199_inst] (pc konst_198_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_199_inst next_pc 1
    $delay ADD_u8_u8_199_inst 1
  }
  // end data-path
  // 	output := ((( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) ) | ( $mux (rs1_data > rs2_data) 1   _b0  ) )// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 86
  // ((( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) ) | ( $mux (rs1_data > rs2_data) 1   _b0  ) )
  // (( $mux (rs1_data == rs2_data) 0   _b0  )  | ( $mux (rs1_data < rs2_data) -1   _b0  ) )
  // (rs1_data == rs2_data)
  // rs1_data
  // rs2_data
  // ( $mux (rs1_data == rs2_data) 0   _b0  ) 
  // (rs1_data < rs2_data)
  // rs1_data
  // rs2_data
  // ( $mux (rs1_data < rs2_data) -1   _b0  ) 
  // (rs1_data > rs2_data)
  // rs1_data
  // rs2_data
  // ( $mux (rs1_data > rs2_data) 1   _b0  ) 
  OR_u32_u32_189_inst <=> (assign_stmt_190_to_assign_stmt_200/OR_u32_u32_189_Sample/rr assign_stmt_190_to_assign_stmt_200/OR_u32_u32_189_Update/cr) (assign_stmt_190_to_assign_stmt_200/OR_u32_u32_189_Sample/ra assign_stmt_190_to_assign_stmt_200/OR_u32_u32_189_Update/ca)
  // 	$call accessreg (0  rd output ) (dummy ) 
  //  file prog.linked.opt.aa, line 87
  // rd
  // output
  call_stmt_195_call <=> (assign_stmt_190_to_assign_stmt_200/call_stmt_195_Sample/crr assign_stmt_190_to_assign_stmt_200/call_stmt_195_Update/ccr) (assign_stmt_190_to_assign_stmt_200/call_stmt_195_Sample/cra assign_stmt_190_to_assign_stmt_200/call_stmt_195_Update/cca)
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 88
  // (pc + 1 )
  // pc
  ADD_u8_u8_199_inst <=> (assign_stmt_190_to_assign_stmt_200/ADD_u8_u8_199_Sample/rr assign_stmt_190_to_assign_stmt_200/ADD_u8_u8_199_Update/cr) (assign_stmt_190_to_assign_stmt_200/ADD_u8_u8_199_Sample/ra assign_stmt_190_to_assign_stmt_200/ADD_u8_u8_199_Update/ca)
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file prog.linked.opt.aa, line 90
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file prog.linked.opt.aa, line 90
  }
  // end data-path
}
$module [halt] 
{
  $in pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %halt
  //  file prog.linked.opt.aa, line 97
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_212] 
    {
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 102
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_211_sample_start_] 
      $T[ADD_u8_u8_211_sample_completed_] 
      $T[ADD_u8_u8_211_update_start_] 
      $T[ADD_u8_u8_211_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_211_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_211_sample_start_
      ;;[ADD_u8_u8_211_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_211_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_211_sample_start_ &-> (ADD_u8_u8_211_Sample)
      ADD_u8_u8_211_sample_completed_ <-& (ADD_u8_u8_211_Sample)
      ADD_u8_u8_211_sample_completed_ &-> ($null)
      ADD_u8_u8_211_update_start_ &-> (ADD_u8_u8_211_Update)
      ADD_u8_u8_211_update_completed_ <-& (ADD_u8_u8_211_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %halt
    //  file prog.linked.opt.aa, line 97
    // 1 
    $constant $W[konst_210_wire_constant] : $int<8> := _b00000001// 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 102
    // next_pc
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 102
    // (pc + 1 )
    +[ADD_u8_u8_211_inst] (pc konst_210_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_211_inst next_pc 1
    $delay ADD_u8_u8_211_inst 1
  }
  // end data-path
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 102
  // (pc + 1 )
  // pc
  ADD_u8_u8_211_inst <=> (assign_stmt_212/ADD_u8_u8_211_Sample/rr assign_stmt_212/ADD_u8_u8_211_Update/cr) (assign_stmt_212/ADD_u8_u8_211_Sample/ra assign_stmt_212/ADD_u8_u8_211_Update/ca)
}
$module [init_mem] 
{
  // pipe-declarations for block %init_mem
  //  file prog.linked.opt.aa, line 104
  // pipe-declarations for block %init_mem%loop
  //  file prog.linked.opt.aa, line 109
  // pipe-declarations for block %init_mem%loop%
  //  file prog.linked.opt.aa, line 111
  // memory-space 0 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_215] // Branch Block  file prog.linked.opt.aa, line 109
    {
      $P [branch_block_stmt_215__entry__]
      branch_block_stmt_215__entry__ <-| ($entry)
      $P [branch_block_stmt_215__exit__]
      branch_block_stmt_215__exit__ |-> ($exit)
      $P [merge_stmt_216__entry__] 
      $P [merge_stmt_216__exit__] 
      $P [assign_stmt_226_to_assign_stmt_235__entry__] 
      $P [assign_stmt_226_to_assign_stmt_235__exit__] 
      $P [if_stmt_236__entry__] 
      $P [if_stmt_236__exit__] 
      ::[assign_stmt_226_to_assign_stmt_235] 
      {
        // start:  		NII := ($cast ($uint<32>) I )// bits of buffering = 32. 
        //  file prog.linked.opt.aa, line 115
        // Source expression
        // ($cast ($uint<32>) I )
        $T[type_cast_225_sample_start_] 
        $T[type_cast_225_sample_completed_] 
        $T[type_cast_225_update_start_] 
        $T[type_cast_225_update_completed_] 
        // I
        // start: Forward dependencies from I to transition type_cast_225_sample_start_
        // done: Forward dependencies from I to transition type_cast_225_sample_start_
        ;;[type_cast_225_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_225_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_225_sample_start_ &-> (type_cast_225_Sample)
        type_cast_225_sample_completed_ <-& (type_cast_225_Sample)
        type_cast_225_sample_completed_ &-> ($null)
        type_cast_225_update_start_ &-> (type_cast_225_Update)
        type_cast_225_update_completed_ <-& (type_cast_225_Update)
        // Target expression
        // (as target) NII
        // start: WAR dependencies for NII
        // done: WAR dependencies for NII
        // end:  		NII := ($cast ($uint<32>) I )// bits of buffering = 32. 
        // start:  		mem[I] := NII// bits of buffering = 32. 
        //  file prog.linked.opt.aa, line 116
        // Source expression
        // NII
        // Target expression
        // mem[I]
        $T[array_obj_ref_228_sample_start_] 
        $T[array_obj_ref_228_sample_completed_] 
        $T[array_obj_ref_228_update_start_] 
        $T[array_obj_ref_228_update_completed_] 
        $T[array_obj_ref_228_word_address_calculated] 
        $T[array_obj_ref_228_root_address_calculated] 
        $T[array_obj_ref_228_offset_calculated] 
        $T[array_obj_ref_228_index_resized_0] 
        $T[array_obj_ref_228_index_scaled_0] 
        $T[array_obj_ref_228_index_computed_0] 
        // I
        // start: Forward dependencies from I to transition array_obj_ref_228_index_computed_0
        // done: Forward dependencies from I to transition array_obj_ref_228_index_computed_0
        ;;[array_obj_ref_228_index_resize_0] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_228_index_computed_0 &-> (array_obj_ref_228_index_resize_0)
        array_obj_ref_228_index_resized_0 <-& (array_obj_ref_228_index_resize_0)
        ;;[array_obj_ref_228_index_scale_0] 
        {
          $T [scale_rename_req] $T [scale_rename_ack] // rename 
        }
        array_obj_ref_228_index_resized_0 &-> (array_obj_ref_228_index_scale_0)
        array_obj_ref_228_index_scaled_0 <-& (array_obj_ref_228_index_scale_0)
        ;;[array_obj_ref_228_final_index_sum_regn] 
        {
          $T [req] $T [ack] // rename
        }
        array_obj_ref_228_index_scaled_0 &-> (array_obj_ref_228_final_index_sum_regn)
        array_obj_ref_228_offset_calculated <-& (array_obj_ref_228_final_index_sum_regn)
        ;;[array_obj_ref_228_base_plus_offset] 
        {
          $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
        }
        array_obj_ref_228_offset_calculated &-> (array_obj_ref_228_base_plus_offset)
        array_obj_ref_228_root_address_calculated <-& (array_obj_ref_228_base_plus_offset)
        ;;[array_obj_ref_228_word_addrgen] 
        {
          $T [root_register_req] $T [root_register_ack]
        }
        array_obj_ref_228_root_address_calculated &-> (array_obj_ref_228_word_addrgen)
        array_obj_ref_228_word_address_calculated <-& (array_obj_ref_228_word_addrgen)
        ;;[array_obj_ref_228_Sample] 
        {
          ;;[array_obj_ref_228_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_228_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_228_sample_start_ <-& (array_obj_ref_228_word_address_calculated)
        array_obj_ref_228_sample_start_ &-> (array_obj_ref_228_Sample)
        array_obj_ref_228_sample_completed_ <-& (array_obj_ref_228_Sample)
        array_obj_ref_228_sample_completed_ &-> ($null)
        array_obj_ref_228_update_start_ &-> (array_obj_ref_228_Update)
        array_obj_ref_228_update_completed_ <-& (array_obj_ref_228_Update)
        // start: Forward dependencies from NII to transition array_obj_ref_228_sample_start_
        array_obj_ref_228_sample_start_ <-& (type_cast_225_update_completed_)
        // done: Forward dependencies from NII to transition array_obj_ref_228_sample_start_
        // end:  		mem[I] := NII// bits of buffering = 32. 
        // start:  		NI := (I + 1 )// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 117
        // Source expression
        // (I + 1 )
        $T[ADD_u8_u8_234_sample_start_] 
        $T[ADD_u8_u8_234_sample_completed_] 
        $T[ADD_u8_u8_234_update_start_] 
        $T[ADD_u8_u8_234_update_completed_] 
        // I
        // start: Forward dependencies from I to transition ADD_u8_u8_234_sample_start_
        // done: Forward dependencies from I to transition ADD_u8_u8_234_sample_start_
        ;;[ADD_u8_u8_234_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u8_u8_234_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u8_u8_234_sample_start_ &-> (ADD_u8_u8_234_Sample)
        ADD_u8_u8_234_sample_completed_ <-& (ADD_u8_u8_234_Sample)
        ADD_u8_u8_234_sample_completed_ &-> ($null)
        ADD_u8_u8_234_update_start_ &-> (ADD_u8_u8_234_Update)
        ADD_u8_u8_234_update_completed_ <-& (ADD_u8_u8_234_Update)
        // Target expression
        // (as target) NI
        // start: WAR dependencies for NI
        // done: WAR dependencies for NI
        // end:  		NI := (I + 1 )// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_0
        //  array_obj_ref_228 store
      }
      assign_stmt_226_to_assign_stmt_235__entry__ |-> (assign_stmt_226_to_assign_stmt_235)
      assign_stmt_226_to_assign_stmt_235__exit__ <-| (assign_stmt_226_to_assign_stmt_235)
      // if-statement  
      //  file prog.linked.opt.aa, line 0
      ;;[if_stmt_236_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_236__entry__ |-> (if_stmt_236_dead_link)
      if_stmt_236__exit__ <-| (if_stmt_236_dead_link)
      ;;[if_stmt_236_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (I < 10 )
        ;;[ULT_u8_u1_239] 
        {
          // binary expression 
          ||[ULT_u8_u1_239_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_236__entry__ |-> (if_stmt_236_eval_test)
      $P [ULT_u8_u1_239_place]
      ULT_u8_u1_239_place <-| (if_stmt_236_eval_test)
      ;;[if_stmt_236_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_236_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_239_place |-> (if_stmt_236_if_link if_stmt_236_else_link)
      $P [loopback]
      loopback <-| (if_stmt_236_if_link)
      if_stmt_236__exit__ <-| (if_stmt_236_else_link)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 111
      ;;[merge_stmt_216_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_216__entry__ |-> (merge_stmt_216_dead_link)
      merge_stmt_216__exit__ <-| (merge_stmt_216_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 111  --------------------------
      ||[merge_stmt_216__entry___PhiReq] 
      {
        ;;[phi_stmt_217] 
        {
          ||[phi_stmt_217_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NI $on   loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_220_konst_delay_trans] $delay
          }
          $T [phi_stmt_217_req] 
        }
      }
      merge_stmt_216__entry__ |-> (merge_stmt_216__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_217] 
        {
          ||[phi_stmt_217_sources] 
          {
            // sources for 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NI $on   loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_217_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_216_PhiReqMerge] 
      merge_stmt_216_PhiReqMerge <-| ( merge_stmt_216__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_216_PhiAck] 
      {
        $T [phi_stmt_217_ack] 
      }
      merge_stmt_216_PhiReqMerge |-> (merge_stmt_216_PhiAck)
      merge_stmt_216__exit__  <-| (merge_stmt_216_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 111  --------------------------
      merge_stmt_216__entry__ <-| (branch_block_stmt_215__entry__)
      assign_stmt_226_to_assign_stmt_235__entry__ <-| (merge_stmt_216__exit__)
      if_stmt_236__entry__ <-| (assign_stmt_226_to_assign_stmt_235__exit__)
      if_stmt_236__exit__ |-> (branch_block_stmt_215__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %init_mem%loop%
    //  file prog.linked.opt.aa, line 111
    // constant-object-declarations for block %init_mem%loop
    //  file prog.linked.opt.aa, line 109
    // constant-object-declarations for block %init_mem
    //  file prog.linked.opt.aa, line 104
    // constant-declarations for block %init_mem%loop
    //  file prog.linked.opt.aa, line 109
    // constant-declarations for block %init_mem%loop%
    //  file prog.linked.opt.aa, line 111
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NI $on   loopback 
    // type of target is $uint<8>
    //  file prog.linked.opt.aa, line 112
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_220_wire_constant] : $int<8> := _b00000000// 0
    // mem[I]
    $constant $W[array_obj_ref_228_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_228_offset_scale_factor_0] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_228_word_offset_0] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_233_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file prog.linked.opt.aa, line 0
    // 10 
    $constant $W[konst_238_wire_constant] : $int<8> := _b00001010// 10
    // block %init_mem%loop
    //  file prog.linked.opt.aa, line 109
    // merge-statement  
    //  file prog.linked.opt.aa, line 111
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NI $on   loopback 
    // type of target is $uint<8>
    //  file prog.linked.opt.aa, line 112
    $W[NI_235_221_buffered] : $int<8>
    // I
    $W[I_217] : $int<8>
    // 		NII := ($cast ($uint<32>) I )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 115
    // NII
    $W[NII_226] : $int<32>
    // 		mem[I] := NII// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 116
    // mem[I]
    $intermediate $W[R_I_227_resized] : $int<8>
    $intermediate $W[R_I_227_scaled] : $int<8>
    $intermediate $W[array_obj_ref_228_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_228_root_address] : $int<8>
    $W[array_obj_ref_228_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_228_data_0] : $int<32>
    // 		NI := (I + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 117
    // NI
    $W[NI_235] : $int<8>
    // if statement  
    //  file prog.linked.opt.aa, line 0
    // (I < 10 )
    $intermediate $W[ULT_u8_u1_239_wire] : $int<1>
    // datapath-instances for block %init_mem%loop
    //  file prog.linked.opt.aa, line 109
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 111
    // 			$phi I := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NI $on   loopback 
    // type of target is $uint<8>
    //  file prog.linked.opt.aa, line 112
    # := [NI_235_221_buf] (NI_235) (NI_235_221_buffered)   
    $phi [phi_stmt_217] (type_cast_220_wire_constant NI_235_221_buffered) ( I_217 ) 
    // 		NII := ($cast ($uint<32>) I )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 115
    // ($cast ($uint<32>) I )
    # := [type_cast_225_inst] (I_217) (NII_226)   
    $buffering  $out type_cast_225_inst NII_226 1
    $delay type_cast_225_inst 1
    // 		mem[I] := NII// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 116
    // mem[I]
    &/ [array_obj_ref_228_index_0_resize] (I_217) (R_I_227_resized) 
    $flowthrough 
    &/ [array_obj_ref_228_index_0_rename] (R_I_227_resized) (R_I_227_scaled) 
    $flowthrough 
    &/ [array_obj_ref_228_index_offset] (R_I_227_scaled) (array_obj_ref_228_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_228_root_address_inst] (array_obj_ref_228_final_offset) (array_obj_ref_228_root_address) 
    $flowthrough 
    &/ [array_obj_ref_228_addr_0] (array_obj_ref_228_root_address) (array_obj_ref_228_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_228_store_0] $to memory_space_0 (array_obj_ref_228_word_address_0 array_obj_ref_228_data_0) 
    $delay array_obj_ref_228_store_0 5
    &/ [array_obj_ref_228_gather_scatter] (NII_226) (array_obj_ref_228_data_0) 
    $flowthrough 
    // 		NI := (I + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 117
    // (I + 1 )
    +[ADD_u8_u8_234_inst] (I_217 konst_233_wire_constant) (NI_235)   
    $buffering  $out ADD_u8_u8_234_inst NI_235 1
    $delay ADD_u8_u8_234_inst 1
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 0
    // (I < 10 )
    <[ULT_u8_u1_239_inst] (I_217 konst_238_wire_constant) (ULT_u8_u1_239_wire)   $flowthrough 
    $delay ULT_u8_u1_239_inst 0
    ==0? [if_stmt_236_branch] (ULT_u8_u1_239_wire)
  }
  // end data-path
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 111
  NI_235_221_buf <=> (branch_block_stmt_215/loopback_PhiReq/phi_stmt_217/phi_stmt_217_sources/Interlock/Sample/req branch_block_stmt_215/loopback_PhiReq/phi_stmt_217/phi_stmt_217_sources/Interlock/Update/req) (branch_block_stmt_215/loopback_PhiReq/phi_stmt_217/phi_stmt_217_sources/Interlock/Sample/ack branch_block_stmt_215/loopback_PhiReq/phi_stmt_217/phi_stmt_217_sources/Interlock/Update/ack)
  phi_stmt_217 <=> (branch_block_stmt_215/merge_stmt_216__entry___PhiReq/phi_stmt_217/phi_stmt_217_req branch_block_stmt_215/loopback_PhiReq/phi_stmt_217/phi_stmt_217_req) (branch_block_stmt_215/merge_stmt_216_PhiAck/phi_stmt_217_ack)
  // 		NII := ($cast ($uint<32>) I )// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 115
  // I
  // ($cast ($uint<32>) I )
  type_cast_225_inst <=> (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/type_cast_225_Sample/rr branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/type_cast_225_Update/cr) (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/type_cast_225_Sample/ra branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/type_cast_225_Update/ca)
  // 		mem[I] := NII// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 116
  // NII
  // I
  array_obj_ref_228_index_0_resize <=> (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_index_resize_0/index_resize_req) (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_index_resize_0/index_resize_ack)
  array_obj_ref_228_index_0_rename <=> (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_index_scale_0/scale_rename_req) (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_index_scale_0/scale_rename_ack)
  array_obj_ref_228_index_offset <=> (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_final_index_sum_regn/req) (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_final_index_sum_regn/ack)
  array_obj_ref_228_root_address_inst <=> (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_base_plus_offset/sum_rename_req) (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_base_plus_offset/sum_rename_ack)
  array_obj_ref_228_addr_0 <=> (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_word_addrgen/root_register_req) (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_word_addrgen/root_register_ack)
  array_obj_ref_228_gather_scatter <=> (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_Sample/array_obj_ref_228_Split/split_req) (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_Sample/array_obj_ref_228_Split/split_ack)
  array_obj_ref_228_store_0 <=> (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_Sample/word_access_start/word_0/rr branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_Update/word_access_complete/word_0/cr) (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_Sample/word_access_start/word_0/ra branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/array_obj_ref_228_Update/word_access_complete/word_0/ca)
  // 		NI := (I + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 117
  // (I + 1 )
  // I
  ADD_u8_u8_234_inst <=> (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/ADD_u8_u8_234_Sample/rr branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/ADD_u8_u8_234_Update/cr) (branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/ADD_u8_u8_234_Sample/ra branch_block_stmt_215/assign_stmt_226_to_assign_stmt_235/ADD_u8_u8_234_Update/ca)
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 0
  // (I < 10 )
  if_stmt_236_branch <=> (branch_block_stmt_215/if_stmt_236_eval_test/branch_req) (branch_block_stmt_215/if_stmt_236_else_link/else_choice_transition branch_block_stmt_215/if_stmt_236_if_link/if_choice_transition)
}
$module [init_reg] 
{
  // pipe-declarations for block %init_reg
  //  file prog.linked.opt.aa, line 123
  // pipe-declarations for block %init_reg%loop
  //  file prog.linked.opt.aa, line 128
  // pipe-declarations for block %init_reg%loop%
  //  file prog.linked.opt.aa, line 130
  // memory-space 2 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_245] // Branch Block  file prog.linked.opt.aa, line 128
    {
      $P [branch_block_stmt_245__entry__]
      branch_block_stmt_245__entry__ <-| ($entry)
      $P [branch_block_stmt_245__exit__]
      branch_block_stmt_245__exit__ |-> ($exit)
      $P [merge_stmt_246__entry__] 
      $P [merge_stmt_246__exit__] 
      $P [assign_stmt_256_to_assign_stmt_265__entry__] 
      $P [assign_stmt_256_to_assign_stmt_265__exit__] 
      $P [if_stmt_266__entry__] 
      $P [if_stmt_266__exit__] 
      ::[assign_stmt_256_to_assign_stmt_265] 
      {
        // start:  		NJJ := ($cast ($uint<32>) J )// bits of buffering = 32. 
        //  file prog.linked.opt.aa, line 134
        // Source expression
        // ($cast ($uint<32>) J )
        $T[type_cast_255_sample_start_] 
        $T[type_cast_255_sample_completed_] 
        $T[type_cast_255_update_start_] 
        $T[type_cast_255_update_completed_] 
        // J
        // start: Forward dependencies from J to transition type_cast_255_sample_start_
        // done: Forward dependencies from J to transition type_cast_255_sample_start_
        ;;[type_cast_255_Sample] 
        {
          // unary expression 
          $T [rr] $T [ra] // (split) unary operation
        }
        ;;[type_cast_255_Update] 
        {
          // unary expression 
          $T [cr] $T [ca] //(split) unary operation
        }
        type_cast_255_sample_start_ &-> (type_cast_255_Sample)
        type_cast_255_sample_completed_ <-& (type_cast_255_Sample)
        type_cast_255_sample_completed_ &-> ($null)
        type_cast_255_update_start_ &-> (type_cast_255_Update)
        type_cast_255_update_completed_ <-& (type_cast_255_Update)
        // Target expression
        // (as target) NJJ
        // start: WAR dependencies for NJJ
        // done: WAR dependencies for NJJ
        // end:  		NJJ := ($cast ($uint<32>) J )// bits of buffering = 32. 
        // start:  		reg[J] := NJJ// bits of buffering = 32. 
        //  file prog.linked.opt.aa, line 135
        // Source expression
        // NJJ
        // Target expression
        // reg[J]
        $T[array_obj_ref_258_sample_start_] 
        $T[array_obj_ref_258_sample_completed_] 
        $T[array_obj_ref_258_update_start_] 
        $T[array_obj_ref_258_update_completed_] 
        $T[array_obj_ref_258_word_address_calculated] 
        $T[array_obj_ref_258_root_address_calculated] 
        $T[array_obj_ref_258_offset_calculated] 
        $T[array_obj_ref_258_index_resized_0] 
        $T[array_obj_ref_258_index_scaled_0] 
        $T[array_obj_ref_258_index_computed_0] 
        // J
        // start: Forward dependencies from J to transition array_obj_ref_258_index_computed_0
        // done: Forward dependencies from J to transition array_obj_ref_258_index_computed_0
        ;;[array_obj_ref_258_index_resize_0] 
        {
          $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
        }
        array_obj_ref_258_index_computed_0 &-> (array_obj_ref_258_index_resize_0)
        array_obj_ref_258_index_resized_0 <-& (array_obj_ref_258_index_resize_0)
        ;;[array_obj_ref_258_index_scale_0] 
        {
          $T [scale_rename_req] $T [scale_rename_ack] // rename 
        }
        array_obj_ref_258_index_resized_0 &-> (array_obj_ref_258_index_scale_0)
        array_obj_ref_258_index_scaled_0 <-& (array_obj_ref_258_index_scale_0)
        ;;[array_obj_ref_258_final_index_sum_regn] 
        {
          $T [req] $T [ack] // rename
        }
        array_obj_ref_258_index_scaled_0 &-> (array_obj_ref_258_final_index_sum_regn)
        array_obj_ref_258_offset_calculated <-& (array_obj_ref_258_final_index_sum_regn)
        ;;[array_obj_ref_258_base_plus_offset] 
        {
          $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
        }
        array_obj_ref_258_offset_calculated &-> (array_obj_ref_258_base_plus_offset)
        array_obj_ref_258_root_address_calculated <-& (array_obj_ref_258_base_plus_offset)
        ;;[array_obj_ref_258_word_addrgen] 
        {
          $T [root_register_req] $T [root_register_ack]
        }
        array_obj_ref_258_root_address_calculated &-> (array_obj_ref_258_word_addrgen)
        array_obj_ref_258_word_address_calculated <-& (array_obj_ref_258_word_addrgen)
        ;;[array_obj_ref_258_Sample] 
        {
          ;;[array_obj_ref_258_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[array_obj_ref_258_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        array_obj_ref_258_sample_start_ <-& (array_obj_ref_258_word_address_calculated)
        array_obj_ref_258_sample_start_ &-> (array_obj_ref_258_Sample)
        array_obj_ref_258_sample_completed_ <-& (array_obj_ref_258_Sample)
        array_obj_ref_258_sample_completed_ &-> ($null)
        array_obj_ref_258_update_start_ &-> (array_obj_ref_258_Update)
        array_obj_ref_258_update_completed_ <-& (array_obj_ref_258_Update)
        // start: Forward dependencies from NJJ to transition array_obj_ref_258_sample_start_
        array_obj_ref_258_sample_start_ <-& (type_cast_255_update_completed_)
        // done: Forward dependencies from NJJ to transition array_obj_ref_258_sample_start_
        // end:  		reg[J] := NJJ// bits of buffering = 32. 
        // start:  		NJ := (J + 1 )// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 136
        // Source expression
        // (J + 1 )
        $T[ADD_u8_u8_264_sample_start_] 
        $T[ADD_u8_u8_264_sample_completed_] 
        $T[ADD_u8_u8_264_update_start_] 
        $T[ADD_u8_u8_264_update_completed_] 
        // J
        // start: Forward dependencies from J to transition ADD_u8_u8_264_sample_start_
        // done: Forward dependencies from J to transition ADD_u8_u8_264_sample_start_
        ;;[ADD_u8_u8_264_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u8_u8_264_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u8_u8_264_sample_start_ &-> (ADD_u8_u8_264_Sample)
        ADD_u8_u8_264_sample_completed_ <-& (ADD_u8_u8_264_Sample)
        ADD_u8_u8_264_sample_completed_ &-> ($null)
        ADD_u8_u8_264_update_start_ &-> (ADD_u8_u8_264_Update)
        ADD_u8_u8_264_update_completed_ <-& (ADD_u8_u8_264_Update)
        // Target expression
        // (as target) NJ
        // start: WAR dependencies for NJ
        // done: WAR dependencies for NJ
        // end:  		NJ := (J + 1 )// bits of buffering = 8. 
        // load-store dependencies..
        // memory-space  memory_space_2
        //  array_obj_ref_258 store
      }
      assign_stmt_256_to_assign_stmt_265__entry__ |-> (assign_stmt_256_to_assign_stmt_265)
      assign_stmt_256_to_assign_stmt_265__exit__ <-| (assign_stmt_256_to_assign_stmt_265)
      // if-statement  
      //  file prog.linked.opt.aa, line 0
      ;;[if_stmt_266_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_266__entry__ |-> (if_stmt_266_dead_link)
      if_stmt_266__exit__ <-| (if_stmt_266_dead_link)
      ;;[if_stmt_266_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (J < 64 )
        ;;[ULT_u8_u1_269] 
        {
          // binary expression 
          ||[ULT_u8_u1_269_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_266__entry__ |-> (if_stmt_266_eval_test)
      $P [ULT_u8_u1_269_place]
      ULT_u8_u1_269_place <-| (if_stmt_266_eval_test)
      ;;[if_stmt_266_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_266_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u8_u1_269_place |-> (if_stmt_266_if_link if_stmt_266_else_link)
      $P [loopback]
      loopback <-| (if_stmt_266_if_link)
      if_stmt_266__exit__ <-| (if_stmt_266_else_link)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 130
      ;;[merge_stmt_246_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_246__entry__ |-> (merge_stmt_246_dead_link)
      merge_stmt_246__exit__ <-| (merge_stmt_246_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 130  --------------------------
      ||[merge_stmt_246__entry___PhiReq] 
      {
        ;;[phi_stmt_247] 
        {
          ||[phi_stmt_247_sources] 
          {
            // sources for 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NJ $on   loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_250_konst_delay_trans] $delay
          }
          $T [phi_stmt_247_req] 
        }
      }
      merge_stmt_246__entry__ |-> (merge_stmt_246__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_247] 
        {
          ||[phi_stmt_247_sources] 
          {
            // sources for 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NJ $on   loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_247_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_246_PhiReqMerge] 
      merge_stmt_246_PhiReqMerge <-| ( merge_stmt_246__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_246_PhiAck] 
      {
        $T [phi_stmt_247_ack] 
      }
      merge_stmt_246_PhiReqMerge |-> (merge_stmt_246_PhiAck)
      merge_stmt_246__exit__  <-| (merge_stmt_246_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 130  --------------------------
      merge_stmt_246__entry__ <-| (branch_block_stmt_245__entry__)
      assign_stmt_256_to_assign_stmt_265__entry__ <-| (merge_stmt_246__exit__)
      if_stmt_266__entry__ <-| (assign_stmt_256_to_assign_stmt_265__exit__)
      if_stmt_266__exit__ |-> (branch_block_stmt_245__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %init_reg%loop%
    //  file prog.linked.opt.aa, line 130
    // constant-object-declarations for block %init_reg%loop
    //  file prog.linked.opt.aa, line 128
    // constant-object-declarations for block %init_reg
    //  file prog.linked.opt.aa, line 123
    // constant-declarations for block %init_reg%loop
    //  file prog.linked.opt.aa, line 128
    // constant-declarations for block %init_reg%loop%
    //  file prog.linked.opt.aa, line 130
    // constant-declarations for phi:  			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NJ $on   loopback 
    // type of target is $uint<8>
    //  file prog.linked.opt.aa, line 131
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_250_wire_constant] : $int<8> := _b00000000// 0
    // reg[J]
    $constant $W[array_obj_ref_258_resized_base_address] : $int<8> := _b00000000// 0
    $constant $W[array_obj_ref_258_offset_scale_factor_0] : $int<8> := _b00000001// 1
    $constant $W[array_obj_ref_258_word_offset_0] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_263_wire_constant] : $int<8> := _b00000001// 1
    // if-statement  
    //  file prog.linked.opt.aa, line 0
    // 64 
    $constant $W[konst_268_wire_constant] : $int<8> := _b01000000// 64
    // block %init_reg%loop
    //  file prog.linked.opt.aa, line 128
    // merge-statement  
    //  file prog.linked.opt.aa, line 130
    // 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NJ $on   loopback 
    // type of target is $uint<8>
    //  file prog.linked.opt.aa, line 131
    $W[NJ_265_251_buffered] : $int<8>
    // J
    $W[J_247] : $int<8>
    // 		NJJ := ($cast ($uint<32>) J )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 134
    // NJJ
    $W[NJJ_256] : $int<32>
    // 		reg[J] := NJJ// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 135
    // reg[J]
    $intermediate $W[R_J_257_resized] : $int<8>
    $intermediate $W[R_J_257_scaled] : $int<8>
    $intermediate $W[array_obj_ref_258_final_offset] : $int<8>
    $intermediate $W[array_obj_ref_258_root_address] : $int<8>
    $W[array_obj_ref_258_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_258_data_0] : $int<32>
    // 		NJ := (J + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 136
    // NJ
    $W[NJ_265] : $int<8>
    // if statement  
    //  file prog.linked.opt.aa, line 0
    // (J < 64 )
    $intermediate $W[ULT_u8_u1_269_wire] : $int<1>
    // datapath-instances for block %init_reg%loop
    //  file prog.linked.opt.aa, line 128
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 130
    // 			$phi J := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  NJ $on   loopback 
    // type of target is $uint<8>
    //  file prog.linked.opt.aa, line 131
    # := [NJ_265_251_buf] (NJ_265) (NJ_265_251_buffered)   
    $phi [phi_stmt_247] (type_cast_250_wire_constant NJ_265_251_buffered) ( J_247 ) 
    // 		NJJ := ($cast ($uint<32>) J )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 134
    // ($cast ($uint<32>) J )
    # := [type_cast_255_inst] (J_247) (NJJ_256)   
    $buffering  $out type_cast_255_inst NJJ_256 1
    $delay type_cast_255_inst 1
    // 		reg[J] := NJJ// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 135
    // reg[J]
    &/ [array_obj_ref_258_index_0_resize] (J_247) (R_J_257_resized) 
    $flowthrough 
    &/ [array_obj_ref_258_index_0_rename] (R_J_257_resized) (R_J_257_scaled) 
    $flowthrough 
    &/ [array_obj_ref_258_index_offset] (R_J_257_scaled) (array_obj_ref_258_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_258_root_address_inst] (array_obj_ref_258_final_offset) (array_obj_ref_258_root_address) 
    $flowthrough 
    &/ [array_obj_ref_258_addr_0] (array_obj_ref_258_root_address) (array_obj_ref_258_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_258_store_0] $to memory_space_2 (array_obj_ref_258_word_address_0 array_obj_ref_258_data_0) 
    $delay array_obj_ref_258_store_0 5
    &/ [array_obj_ref_258_gather_scatter] (NJJ_256) (array_obj_ref_258_data_0) 
    $flowthrough 
    // 		NJ := (J + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 136
    // (J + 1 )
    +[ADD_u8_u8_264_inst] (J_247 konst_263_wire_constant) (NJ_265)   
    $buffering  $out ADD_u8_u8_264_inst NJ_265 1
    $delay ADD_u8_u8_264_inst 1
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 0
    // (J < 64 )
    <[ULT_u8_u1_269_inst] (J_247 konst_268_wire_constant) (ULT_u8_u1_269_wire)   $flowthrough 
    $delay ULT_u8_u1_269_inst 0
    ==0? [if_stmt_266_branch] (ULT_u8_u1_269_wire)
  }
  // end data-path
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 130
  NJ_265_251_buf <=> (branch_block_stmt_245/loopback_PhiReq/phi_stmt_247/phi_stmt_247_sources/Interlock/Sample/req branch_block_stmt_245/loopback_PhiReq/phi_stmt_247/phi_stmt_247_sources/Interlock/Update/req) (branch_block_stmt_245/loopback_PhiReq/phi_stmt_247/phi_stmt_247_sources/Interlock/Sample/ack branch_block_stmt_245/loopback_PhiReq/phi_stmt_247/phi_stmt_247_sources/Interlock/Update/ack)
  phi_stmt_247 <=> (branch_block_stmt_245/merge_stmt_246__entry___PhiReq/phi_stmt_247/phi_stmt_247_req branch_block_stmt_245/loopback_PhiReq/phi_stmt_247/phi_stmt_247_req) (branch_block_stmt_245/merge_stmt_246_PhiAck/phi_stmt_247_ack)
  // 		NJJ := ($cast ($uint<32>) J )// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 134
  // J
  // ($cast ($uint<32>) J )
  type_cast_255_inst <=> (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/type_cast_255_Sample/rr branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/type_cast_255_Update/cr) (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/type_cast_255_Sample/ra branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/type_cast_255_Update/ca)
  // 		reg[J] := NJJ// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 135
  // NJJ
  // J
  array_obj_ref_258_index_0_resize <=> (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_index_resize_0/index_resize_req) (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_index_resize_0/index_resize_ack)
  array_obj_ref_258_index_0_rename <=> (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_index_scale_0/scale_rename_req) (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_index_scale_0/scale_rename_ack)
  array_obj_ref_258_index_offset <=> (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_final_index_sum_regn/req) (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_final_index_sum_regn/ack)
  array_obj_ref_258_root_address_inst <=> (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_base_plus_offset/sum_rename_req) (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_base_plus_offset/sum_rename_ack)
  array_obj_ref_258_addr_0 <=> (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_word_addrgen/root_register_req) (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_word_addrgen/root_register_ack)
  array_obj_ref_258_gather_scatter <=> (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_Sample/array_obj_ref_258_Split/split_req) (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_Sample/array_obj_ref_258_Split/split_ack)
  array_obj_ref_258_store_0 <=> (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_Sample/word_access_start/word_0/rr branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_Update/word_access_complete/word_0/cr) (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_Sample/word_access_start/word_0/ra branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/array_obj_ref_258_Update/word_access_complete/word_0/ca)
  // 		NJ := (J + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 136
  // (J + 1 )
  // J
  ADD_u8_u8_264_inst <=> (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/ADD_u8_u8_264_Sample/rr branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/ADD_u8_u8_264_Update/cr) (branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/ADD_u8_u8_264_Sample/ra branch_block_stmt_245/assign_stmt_256_to_assign_stmt_265/ADD_u8_u8_264_Update/ca)
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 0
  // (J < 64 )
  if_stmt_266_branch <=> (branch_block_stmt_245/if_stmt_266_eval_test/branch_req) (branch_block_stmt_245/if_stmt_266_else_link/else_choice_transition branch_block_stmt_245/if_stmt_266_if_link/if_choice_transition)
}
$module [jmp] 
{
  $in rs1_data:$int<32>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %jmp
  //  file prog.linked.opt.aa, line 142
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_281] 
    {
      // start:  	next_pc := ( $slice rs1_data 7 0 ) // bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 147
      // Source expression
      // ( $slice rs1_data 7 0 ) 
      $T[slice_280_sample_start_] 
      $T[slice_280_sample_completed_] 
      $T[slice_280_update_start_] 
      $T[slice_280_update_completed_] 
      // rs1_data
      // start: Forward dependencies from rs1_data to transition slice_280_sample_start_
      // done: Forward dependencies from rs1_data to transition slice_280_sample_start_
      ;;[slice_280_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_280_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_280_sample_start_ &-> (slice_280_Sample)
      slice_280_sample_completed_ <-& (slice_280_Sample)
      slice_280_sample_completed_ &-> ($null)
      slice_280_update_start_ &-> (slice_280_Update)
      slice_280_update_completed_ <-& (slice_280_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := ( $slice rs1_data 7 0 ) // bits of buffering = 8. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %jmp
    //  file prog.linked.opt.aa, line 142
    // 	next_pc := ( $slice rs1_data 7 0 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 147
    // next_pc
    // 	next_pc := ( $slice rs1_data 7 0 ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 147
    // ( $slice rs1_data 7 0 ) 
    [:] [slice_280_inst] (rs1_data 7 0) (next_pc) 
    $buffering  $out slice_280_inst next_pc 1
    $delay slice_280_inst 1
  }
  // end data-path
  // 	next_pc := ( $slice rs1_data 7 0 ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 147
  // rs1_data
  // ( $slice rs1_data 7 0 ) 
  slice_280_inst <=> (assign_stmt_281/slice_280_Sample/rr assign_stmt_281/slice_280_Update/cr) (assign_stmt_281/slice_280_Sample/ra assign_stmt_281/slice_280_Update/ca)
}
$module [load] 
{
  $in rs1_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %load
  //  file prog.linked.opt.aa, line 149
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_291_to_assign_stmt_306] 
    {
      // start: WAR dependencies for addr
      // ignored out-of-scope w_root  rs1_data : $uint<32> 
      // done: WAR dependencies for addr
      // start:  	$volatile addr := ( $slice rs1_data 7 0 ) 
      //  file prog.linked.opt.aa, line 154
      // volatile! 
      // Source expression
      // ( $slice rs1_data 7 0 ) 
      // rs1_data
      // Target expression
      // (as target) addr
      // start: WAR dependencies for addr
      // ignored out-of-scope w_root  rs1_data : $uint<32> 
      // done: WAR dependencies for addr
      // end:  	$volatile addr := ( $slice rs1_data 7 0 ) 
      // start: 	$call accessMem (1  addr 0  ) (output ) 
      //  file prog.linked.opt.aa, line 155
      $T[call_stmt_296_sample_start_] 
      $T[call_stmt_296_sample_completed_] 
      $T[call_stmt_296_update_start_] 
      $T[call_stmt_296_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // addr
      // Call input argument 2
      // start: Forward dependencies from addr to transition call_stmt_296_sample_start_
      // done: Forward dependencies from addr to transition call_stmt_296_sample_start_
      ;;[call_stmt_296_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_296_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_296_sample_start_ &-> (call_stmt_296_Sample)
      call_stmt_296_sample_completed_ <-& (call_stmt_296_Sample)
      call_stmt_296_sample_completed_ &-> ($null)
      call_stmt_296_update_start_ &-> (call_stmt_296_Update)
      call_stmt_296_update_completed_ <-& (call_stmt_296_Update)
      // Call output argument 0
      // (as target) output
      // start: WAR dependencies for output
      // done: WAR dependencies for output
      // end: 	$call accessMem (1  addr 0  ) (output ) 
      // start: 	$call accessreg (0  rd output ) (dummy1 ) 
      //  file prog.linked.opt.aa, line 156
      $T[call_stmt_301_sample_start_] 
      $T[call_stmt_301_sample_completed_] 
      $T[call_stmt_301_update_start_] 
      $T[call_stmt_301_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rd
      // Call input argument 2
      // output
      // start: Forward dependencies from rd to transition call_stmt_301_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_301_sample_start_
      // start: Forward dependencies from output to transition call_stmt_301_sample_start_
      call_stmt_301_sample_start_ <-& (call_stmt_296_update_completed_)
      // done: Forward dependencies from output to transition call_stmt_301_sample_start_
      ;;[call_stmt_301_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_301_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_301_sample_start_ &-> (call_stmt_301_Sample)
      call_stmt_301_sample_completed_ <-& (call_stmt_301_Sample)
      call_stmt_301_sample_completed_ &-> ($null)
      call_stmt_301_update_start_ &-> (call_stmt_301_Update)
      call_stmt_301_update_completed_ <-& (call_stmt_301_Update)
      // Call output argument 0
      // (as target) dummy1
      // start: WAR dependencies for dummy1
      // done: WAR dependencies for dummy1
      // end: 	$call accessreg (0  rd output ) (dummy1 ) 
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 157
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_305_sample_start_] 
      $T[ADD_u8_u8_305_sample_completed_] 
      $T[ADD_u8_u8_305_update_start_] 
      $T[ADD_u8_u8_305_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_305_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_305_sample_start_
      ;;[ADD_u8_u8_305_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_305_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_305_sample_start_ &-> (ADD_u8_u8_305_Sample)
      ADD_u8_u8_305_sample_completed_ <-& (ADD_u8_u8_305_Sample)
      ADD_u8_u8_305_sample_completed_ &-> ($null)
      ADD_u8_u8_305_update_start_ &-> (ADD_u8_u8_305_Update)
      ADD_u8_u8_305_update_completed_ <-& (ADD_u8_u8_305_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_0
      //  call_stmt_296 store
      // memory-space  memory_space_2
      //  call_stmt_301 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %load
    //  file prog.linked.opt.aa, line 149
    // 	$call accessMem (1  addr 0  ) (output ) 
    //  file prog.linked.opt.aa, line 155
    // 1 
    $constant $W[konst_292_wire_constant] : $int<1> := _b1// 1
    // 0 
    $constant $W[konst_294_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 	$call accessreg (0  rd output ) (dummy1 ) 
    //  file prog.linked.opt.aa, line 156
    // 0 
    $constant $W[konst_297_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_304_wire_constant] : $int<8> := _b00000001// 1
    // 	$volatile addr := ( $slice rs1_data 7 0 ) 
    //  file prog.linked.opt.aa, line 154
    // addr
    $W[addr_291] : $int<8>
    // 	$call accessMem (1  addr 0  ) (output ) 
    //  file prog.linked.opt.aa, line 155
    // output
    $W[output_296] : $int<32>
    // 	$call accessreg (0  rd output ) (dummy1 ) 
    //  file prog.linked.opt.aa, line 156
    // dummy1
    $W[dummy1_301] : $int<32>
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 157
    // next_pc
    // 	$volatile addr := ( $slice rs1_data 7 0 ) 
    //  file prog.linked.opt.aa, line 154
    // ( $slice rs1_data 7 0 ) 
    [:] [slice_290_inst] (rs1_data 7 0) (addr_291)  $flowthrough
    $delay slice_290_inst 0
    // 	$call accessMem (1  addr 0  ) (output ) 
    //  file prog.linked.opt.aa, line 155
    $call [call_stmt_296_call] $module accessMem(konst_292_wire_constant addr_291 konst_294_wire_constant) (output_296)  
    $delay call_stmt_296_call 6
    $buffering  $in call_stmt_296_call konst_292_wire_constant 1
    $buffering  $in call_stmt_296_call addr_291 1
    $buffering  $in call_stmt_296_call konst_294_wire_constant 1
    $buffering  $out call_stmt_296_call output_296 1
    // 	$call accessreg (0  rd output ) (dummy1 ) 
    //  file prog.linked.opt.aa, line 156
    $call [call_stmt_301_call] $module accessreg(konst_297_wire_constant rd output_296) (dummy1_301)  
    $delay call_stmt_301_call 6
    $buffering  $in call_stmt_301_call konst_297_wire_constant 1
    $buffering  $in call_stmt_301_call rd 1
    $buffering  $in call_stmt_301_call output_296 1
    $buffering  $out call_stmt_301_call dummy1_301 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 157
    // (pc + 1 )
    +[ADD_u8_u8_305_inst] (pc konst_304_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_305_inst next_pc 1
    $delay ADD_u8_u8_305_inst 1
  }
  // end data-path
  // 	$volatile addr := ( $slice rs1_data 7 0 ) 
  //  file prog.linked.opt.aa, line 154
  // rs1_data
  // 	$call accessMem (1  addr 0  ) (output ) 
  //  file prog.linked.opt.aa, line 155
  // addr
  call_stmt_296_call <=> (assign_stmt_291_to_assign_stmt_306/call_stmt_296_Sample/crr assign_stmt_291_to_assign_stmt_306/call_stmt_296_Update/ccr) (assign_stmt_291_to_assign_stmt_306/call_stmt_296_Sample/cra assign_stmt_291_to_assign_stmt_306/call_stmt_296_Update/cca)
  // 	$call accessreg (0  rd output ) (dummy1 ) 
  //  file prog.linked.opt.aa, line 156
  // rd
  // output
  call_stmt_301_call <=> (assign_stmt_291_to_assign_stmt_306/call_stmt_301_Sample/crr assign_stmt_291_to_assign_stmt_306/call_stmt_301_Update/ccr) (assign_stmt_291_to_assign_stmt_306/call_stmt_301_Sample/cra assign_stmt_291_to_assign_stmt_306/call_stmt_301_Update/cca)
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 157
  // (pc + 1 )
  // pc
  ADD_u8_u8_305_inst <=> (assign_stmt_291_to_assign_stmt_306/ADD_u8_u8_305_Sample/rr assign_stmt_291_to_assign_stmt_306/ADD_u8_u8_305_Update/cr) (assign_stmt_291_to_assign_stmt_306/ADD_u8_u8_305_Sample/ra assign_stmt_291_to_assign_stmt_306/ADD_u8_u8_305_Update/ca)
}
$module [or_i] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %or_i
  //  file prog.linked.opt.aa, line 159
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_318_to_assign_stmt_328] 
    {
      // start:  	output := (rs1_data | rs2_data)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 164
      // Source expression
      // (rs1_data | rs2_data)
      $T[OR_u32_u32_317_sample_start_] 
      $T[OR_u32_u32_317_sample_completed_] 
      $T[OR_u32_u32_317_update_start_] 
      $T[OR_u32_u32_317_update_completed_] 
      // rs1_data
      // rs2_data
      // start: Forward dependencies from rs1_data to transition OR_u32_u32_317_sample_start_
      // done: Forward dependencies from rs1_data to transition OR_u32_u32_317_sample_start_
      // start: Forward dependencies from rs2_data to transition OR_u32_u32_317_sample_start_
      // done: Forward dependencies from rs2_data to transition OR_u32_u32_317_sample_start_
      ;;[OR_u32_u32_317_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[OR_u32_u32_317_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      OR_u32_u32_317_sample_start_ &-> (OR_u32_u32_317_Sample)
      OR_u32_u32_317_sample_completed_ <-& (OR_u32_u32_317_Sample)
      OR_u32_u32_317_sample_completed_ &-> ($null)
      OR_u32_u32_317_update_start_ &-> (OR_u32_u32_317_Update)
      OR_u32_u32_317_update_completed_ <-& (OR_u32_u32_317_Update)
      // Target expression
      // (as target) output
      // start: WAR dependencies for output
      // done: WAR dependencies for output
      // end:  	output := (rs1_data | rs2_data)// bits of buffering = 32. 
      // start: 	$call accessreg (0  rd output ) (dummy ) 
      //  file prog.linked.opt.aa, line 165
      $T[call_stmt_323_sample_start_] 
      $T[call_stmt_323_sample_completed_] 
      $T[call_stmt_323_update_start_] 
      $T[call_stmt_323_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rd
      // Call input argument 2
      // output
      // start: Forward dependencies from rd to transition call_stmt_323_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_323_sample_start_
      // start: Forward dependencies from output to transition call_stmt_323_sample_start_
      call_stmt_323_sample_start_ <-& (OR_u32_u32_317_update_completed_)
      // done: Forward dependencies from output to transition call_stmt_323_sample_start_
      ;;[call_stmt_323_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_323_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_323_sample_start_ &-> (call_stmt_323_Sample)
      call_stmt_323_sample_completed_ <-& (call_stmt_323_Sample)
      call_stmt_323_sample_completed_ &-> ($null)
      call_stmt_323_update_start_ &-> (call_stmt_323_Update)
      call_stmt_323_update_completed_ <-& (call_stmt_323_Update)
      // Call output argument 0
      // (as target) dummy
      // start: WAR dependencies for dummy
      // done: WAR dependencies for dummy
      // end: 	$call accessreg (0  rd output ) (dummy ) 
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 166
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_327_sample_start_] 
      $T[ADD_u8_u8_327_sample_completed_] 
      $T[ADD_u8_u8_327_update_start_] 
      $T[ADD_u8_u8_327_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_327_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_327_sample_start_
      ;;[ADD_u8_u8_327_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_327_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_327_sample_start_ &-> (ADD_u8_u8_327_Sample)
      ADD_u8_u8_327_sample_completed_ <-& (ADD_u8_u8_327_Sample)
      ADD_u8_u8_327_sample_completed_ &-> ($null)
      ADD_u8_u8_327_update_start_ &-> (ADD_u8_u8_327_Update)
      ADD_u8_u8_327_update_completed_ <-& (ADD_u8_u8_327_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  call_stmt_323 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %or_i
    //  file prog.linked.opt.aa, line 159
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 165
    // 0 
    $constant $W[konst_319_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_326_wire_constant] : $int<8> := _b00000001// 1
    // 	output := (rs1_data | rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 164
    // output
    $W[output_318] : $int<32>
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 165
    // dummy
    $W[dummy_323] : $int<32>
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 166
    // next_pc
    // 	output := (rs1_data | rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 164
    // (rs1_data | rs2_data)
    |[OR_u32_u32_317_inst] (rs1_data rs2_data) (output_318)   
    $buffering  $out OR_u32_u32_317_inst output_318 1
    $delay OR_u32_u32_317_inst 1
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 165
    $call [call_stmt_323_call] $module accessreg(konst_319_wire_constant rd output_318) (dummy_323)  
    $delay call_stmt_323_call 6
    $buffering  $in call_stmt_323_call konst_319_wire_constant 1
    $buffering  $in call_stmt_323_call rd 1
    $buffering  $in call_stmt_323_call output_318 1
    $buffering  $out call_stmt_323_call dummy_323 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 166
    // (pc + 1 )
    +[ADD_u8_u8_327_inst] (pc konst_326_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_327_inst next_pc 1
    $delay ADD_u8_u8_327_inst 1
  }
  // end data-path
  // 	output := (rs1_data | rs2_data)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 164
  // (rs1_data | rs2_data)
  // rs1_data
  // rs2_data
  OR_u32_u32_317_inst <=> (assign_stmt_318_to_assign_stmt_328/OR_u32_u32_317_Sample/rr assign_stmt_318_to_assign_stmt_328/OR_u32_u32_317_Update/cr) (assign_stmt_318_to_assign_stmt_328/OR_u32_u32_317_Sample/ra assign_stmt_318_to_assign_stmt_328/OR_u32_u32_317_Update/ca)
  // 	$call accessreg (0  rd output ) (dummy ) 
  //  file prog.linked.opt.aa, line 165
  // rd
  // output
  call_stmt_323_call <=> (assign_stmt_318_to_assign_stmt_328/call_stmt_323_Sample/crr assign_stmt_318_to_assign_stmt_328/call_stmt_323_Update/ccr) (assign_stmt_318_to_assign_stmt_328/call_stmt_323_Sample/cra assign_stmt_318_to_assign_stmt_328/call_stmt_323_Update/cca)
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 166
  // (pc + 1 )
  // pc
  ADD_u8_u8_327_inst <=> (assign_stmt_318_to_assign_stmt_328/ADD_u8_u8_327_Sample/rr assign_stmt_318_to_assign_stmt_328/ADD_u8_u8_327_Update/cr) (assign_stmt_318_to_assign_stmt_328/ADD_u8_u8_327_Sample/ra assign_stmt_318_to_assign_stmt_328/ADD_u8_u8_327_Update/ca)
}
$module [sbir] 
{
  $in imm:$int<8>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %sbir
  //  file prog.linked.opt.aa, line 168
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_342_to_assign_stmt_352] 
    {
      // start:  	output := (zero24 && imm)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 174
      // Source expression
      // (zero24 && imm)
      $T[CONCAT_u24_u32_341_sample_start_] 
      $T[CONCAT_u24_u32_341_sample_completed_] 
      $T[CONCAT_u24_u32_341_update_start_] 
      $T[CONCAT_u24_u32_341_update_completed_] 
      // imm
      // start: Forward dependencies from imm to transition CONCAT_u24_u32_341_sample_start_
      // done: Forward dependencies from imm to transition CONCAT_u24_u32_341_sample_start_
      ;;[CONCAT_u24_u32_341_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[CONCAT_u24_u32_341_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      CONCAT_u24_u32_341_sample_start_ &-> (CONCAT_u24_u32_341_Sample)
      CONCAT_u24_u32_341_sample_completed_ <-& (CONCAT_u24_u32_341_Sample)
      CONCAT_u24_u32_341_sample_completed_ &-> ($null)
      CONCAT_u24_u32_341_update_start_ &-> (CONCAT_u24_u32_341_Update)
      CONCAT_u24_u32_341_update_completed_ <-& (CONCAT_u24_u32_341_Update)
      // Target expression
      // (as target) output
      // start: WAR dependencies for output
      // done: WAR dependencies for output
      // end:  	output := (zero24 && imm)// bits of buffering = 32. 
      // start: 	$call accessreg (0  rd output ) (dummy1 ) 
      //  file prog.linked.opt.aa, line 175
      $T[call_stmt_347_sample_start_] 
      $T[call_stmt_347_sample_completed_] 
      $T[call_stmt_347_update_start_] 
      $T[call_stmt_347_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rd
      // Call input argument 2
      // output
      // start: Forward dependencies from rd to transition call_stmt_347_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_347_sample_start_
      // start: Forward dependencies from output to transition call_stmt_347_sample_start_
      call_stmt_347_sample_start_ <-& (CONCAT_u24_u32_341_update_completed_)
      // done: Forward dependencies from output to transition call_stmt_347_sample_start_
      ;;[call_stmt_347_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_347_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_347_sample_start_ &-> (call_stmt_347_Sample)
      call_stmt_347_sample_completed_ <-& (call_stmt_347_Sample)
      call_stmt_347_sample_completed_ &-> ($null)
      call_stmt_347_update_start_ &-> (call_stmt_347_Update)
      call_stmt_347_update_completed_ <-& (call_stmt_347_Update)
      // Call output argument 0
      // (as target) dummy1
      // start: WAR dependencies for dummy1
      // done: WAR dependencies for dummy1
      // end: 	$call accessreg (0  rd output ) (dummy1 ) 
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 176
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_351_sample_start_] 
      $T[ADD_u8_u8_351_sample_completed_] 
      $T[ADD_u8_u8_351_update_start_] 
      $T[ADD_u8_u8_351_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_351_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_351_sample_start_
      ;;[ADD_u8_u8_351_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_351_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_351_sample_start_ &-> (ADD_u8_u8_351_Sample)
      ADD_u8_u8_351_sample_completed_ <-& (ADD_u8_u8_351_Sample)
      ADD_u8_u8_351_sample_completed_ &-> ($null)
      ADD_u8_u8_351_update_start_ &-> (ADD_u8_u8_351_Update)
      ADD_u8_u8_351_update_completed_ <-& (ADD_u8_u8_351_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  call_stmt_347 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sbir
    //  file prog.linked.opt.aa, line 168
    $constant $W[xxsbirxxzero24] : $int<24> := _b000000000000000000000000// 0
    // zero24
    $constant $W[R_zero24_339_wire_constant] : $int<24> := _b000000000000000000000000// 0
    // 	$call accessreg (0  rd output ) (dummy1 ) 
    //  file prog.linked.opt.aa, line 175
    // 0 
    $constant $W[konst_343_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_350_wire_constant] : $int<8> := _b00000001// 1
    // 	output := (zero24 && imm)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 174
    // output
    $W[output_342] : $int<32>
    // 	$call accessreg (0  rd output ) (dummy1 ) 
    //  file prog.linked.opt.aa, line 175
    // dummy1
    $W[dummy1_347] : $int<32>
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 176
    // next_pc
    // 	output := (zero24 && imm)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 174
    // (zero24 && imm)
    &&[CONCAT_u24_u32_341_inst] (R_zero24_339_wire_constant imm) (output_342)   
    $buffering  $out CONCAT_u24_u32_341_inst output_342 1
    $delay CONCAT_u24_u32_341_inst 1
    // 	$call accessreg (0  rd output ) (dummy1 ) 
    //  file prog.linked.opt.aa, line 175
    $call [call_stmt_347_call] $module accessreg(konst_343_wire_constant rd output_342) (dummy1_347)  
    $delay call_stmt_347_call 6
    $buffering  $in call_stmt_347_call konst_343_wire_constant 1
    $buffering  $in call_stmt_347_call rd 1
    $buffering  $in call_stmt_347_call output_342 1
    $buffering  $out call_stmt_347_call dummy1_347 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 176
    // (pc + 1 )
    +[ADD_u8_u8_351_inst] (pc konst_350_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_351_inst next_pc 1
    $delay ADD_u8_u8_351_inst 1
  }
  // end data-path
  // 	output := (zero24 && imm)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 174
  // (zero24 && imm)
  // imm
  CONCAT_u24_u32_341_inst <=> (assign_stmt_342_to_assign_stmt_352/CONCAT_u24_u32_341_Sample/rr assign_stmt_342_to_assign_stmt_352/CONCAT_u24_u32_341_Update/cr) (assign_stmt_342_to_assign_stmt_352/CONCAT_u24_u32_341_Sample/ra assign_stmt_342_to_assign_stmt_352/CONCAT_u24_u32_341_Update/ca)
  // 	$call accessreg (0  rd output ) (dummy1 ) 
  //  file prog.linked.opt.aa, line 175
  // rd
  // output
  call_stmt_347_call <=> (assign_stmt_342_to_assign_stmt_352/call_stmt_347_Sample/crr assign_stmt_342_to_assign_stmt_352/call_stmt_347_Update/ccr) (assign_stmt_342_to_assign_stmt_352/call_stmt_347_Sample/cra assign_stmt_342_to_assign_stmt_352/call_stmt_347_Update/cca)
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 176
  // (pc + 1 )
  // pc
  ADD_u8_u8_351_inst <=> (assign_stmt_342_to_assign_stmt_352/ADD_u8_u8_351_Sample/rr assign_stmt_342_to_assign_stmt_352/ADD_u8_u8_351_Update/cr) (assign_stmt_342_to_assign_stmt_352/ADD_u8_u8_351_Sample/ra assign_stmt_342_to_assign_stmt_352/ADD_u8_u8_351_Update/ca)
}
$module [sll_i] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %sll_i
  //  file prog.linked.opt.aa, line 178
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_364_to_assign_stmt_374] 
    {
      // start:  	output := (rs1_data << rs2_data)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 183
      // Source expression
      // (rs1_data << rs2_data)
      $T[SHL_u32_u32_363_sample_start_] 
      $T[SHL_u32_u32_363_sample_completed_] 
      $T[SHL_u32_u32_363_update_start_] 
      $T[SHL_u32_u32_363_update_completed_] 
      // rs1_data
      // rs2_data
      // start: Forward dependencies from rs1_data to transition SHL_u32_u32_363_sample_start_
      // done: Forward dependencies from rs1_data to transition SHL_u32_u32_363_sample_start_
      // start: Forward dependencies from rs2_data to transition SHL_u32_u32_363_sample_start_
      // done: Forward dependencies from rs2_data to transition SHL_u32_u32_363_sample_start_
      ;;[SHL_u32_u32_363_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[SHL_u32_u32_363_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      SHL_u32_u32_363_sample_start_ &-> (SHL_u32_u32_363_Sample)
      SHL_u32_u32_363_sample_completed_ <-& (SHL_u32_u32_363_Sample)
      SHL_u32_u32_363_sample_completed_ &-> ($null)
      SHL_u32_u32_363_update_start_ &-> (SHL_u32_u32_363_Update)
      SHL_u32_u32_363_update_completed_ <-& (SHL_u32_u32_363_Update)
      // Target expression
      // (as target) output
      // start: WAR dependencies for output
      // done: WAR dependencies for output
      // end:  	output := (rs1_data << rs2_data)// bits of buffering = 32. 
      // start: 	$call accessreg (0  rd output ) (dummy ) 
      //  file prog.linked.opt.aa, line 184
      $T[call_stmt_369_sample_start_] 
      $T[call_stmt_369_sample_completed_] 
      $T[call_stmt_369_update_start_] 
      $T[call_stmt_369_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rd
      // Call input argument 2
      // output
      // start: Forward dependencies from rd to transition call_stmt_369_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_369_sample_start_
      // start: Forward dependencies from output to transition call_stmt_369_sample_start_
      call_stmt_369_sample_start_ <-& (SHL_u32_u32_363_update_completed_)
      // done: Forward dependencies from output to transition call_stmt_369_sample_start_
      ;;[call_stmt_369_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_369_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_369_sample_start_ &-> (call_stmt_369_Sample)
      call_stmt_369_sample_completed_ <-& (call_stmt_369_Sample)
      call_stmt_369_sample_completed_ &-> ($null)
      call_stmt_369_update_start_ &-> (call_stmt_369_Update)
      call_stmt_369_update_completed_ <-& (call_stmt_369_Update)
      // Call output argument 0
      // (as target) dummy
      // start: WAR dependencies for dummy
      // done: WAR dependencies for dummy
      // end: 	$call accessreg (0  rd output ) (dummy ) 
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 185
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_373_sample_start_] 
      $T[ADD_u8_u8_373_sample_completed_] 
      $T[ADD_u8_u8_373_update_start_] 
      $T[ADD_u8_u8_373_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_373_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_373_sample_start_
      ;;[ADD_u8_u8_373_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_373_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_373_sample_start_ &-> (ADD_u8_u8_373_Sample)
      ADD_u8_u8_373_sample_completed_ <-& (ADD_u8_u8_373_Sample)
      ADD_u8_u8_373_sample_completed_ &-> ($null)
      ADD_u8_u8_373_update_start_ &-> (ADD_u8_u8_373_Update)
      ADD_u8_u8_373_update_completed_ <-& (ADD_u8_u8_373_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  call_stmt_369 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sll_i
    //  file prog.linked.opt.aa, line 178
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 184
    // 0 
    $constant $W[konst_365_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_372_wire_constant] : $int<8> := _b00000001// 1
    // 	output := (rs1_data << rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 183
    // output
    $W[output_364] : $int<32>
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 184
    // dummy
    $W[dummy_369] : $int<32>
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 185
    // next_pc
    // 	output := (rs1_data << rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 183
    // (rs1_data << rs2_data)
    <<[SHL_u32_u32_363_inst] (rs1_data rs2_data) (output_364)   
    $buffering  $out SHL_u32_u32_363_inst output_364 1
    $delay SHL_u32_u32_363_inst 1
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 184
    $call [call_stmt_369_call] $module accessreg(konst_365_wire_constant rd output_364) (dummy_369)  
    $delay call_stmt_369_call 6
    $buffering  $in call_stmt_369_call konst_365_wire_constant 1
    $buffering  $in call_stmt_369_call rd 1
    $buffering  $in call_stmt_369_call output_364 1
    $buffering  $out call_stmt_369_call dummy_369 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 185
    // (pc + 1 )
    +[ADD_u8_u8_373_inst] (pc konst_372_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_373_inst next_pc 1
    $delay ADD_u8_u8_373_inst 1
  }
  // end data-path
  // 	output := (rs1_data << rs2_data)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 183
  // (rs1_data << rs2_data)
  // rs1_data
  // rs2_data
  SHL_u32_u32_363_inst <=> (assign_stmt_364_to_assign_stmt_374/SHL_u32_u32_363_Sample/rr assign_stmt_364_to_assign_stmt_374/SHL_u32_u32_363_Update/cr) (assign_stmt_364_to_assign_stmt_374/SHL_u32_u32_363_Sample/ra assign_stmt_364_to_assign_stmt_374/SHL_u32_u32_363_Update/ca)
  // 	$call accessreg (0  rd output ) (dummy ) 
  //  file prog.linked.opt.aa, line 184
  // rd
  // output
  call_stmt_369_call <=> (assign_stmt_364_to_assign_stmt_374/call_stmt_369_Sample/crr assign_stmt_364_to_assign_stmt_374/call_stmt_369_Update/ccr) (assign_stmt_364_to_assign_stmt_374/call_stmt_369_Sample/cra assign_stmt_364_to_assign_stmt_374/call_stmt_369_Update/cca)
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 185
  // (pc + 1 )
  // pc
  ADD_u8_u8_373_inst <=> (assign_stmt_364_to_assign_stmt_374/ADD_u8_u8_373_Sample/rr assign_stmt_364_to_assign_stmt_374/ADD_u8_u8_373_Update/cr) (assign_stmt_364_to_assign_stmt_374/ADD_u8_u8_373_Sample/ra assign_stmt_364_to_assign_stmt_374/ADD_u8_u8_373_Update/ca)
}
$module [sra_i] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %sra_i
  //  file prog.linked.opt.aa, line 187
  // memory-space 3 is written into.
  // memory-space 3 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_386_to_assign_stmt_443] 
    {
      // start:  	right_shift := (rs1_data >> rs2_data)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 192
      // Source expression
      // (rs1_data >> rs2_data)
      $T[LSHR_u32_u32_385_sample_start_] 
      $T[LSHR_u32_u32_385_sample_completed_] 
      $T[LSHR_u32_u32_385_update_start_] 
      $T[LSHR_u32_u32_385_update_completed_] 
      // rs1_data
      // rs2_data
      // start: Forward dependencies from rs1_data to transition LSHR_u32_u32_385_sample_start_
      // done: Forward dependencies from rs1_data to transition LSHR_u32_u32_385_sample_start_
      // start: Forward dependencies from rs2_data to transition LSHR_u32_u32_385_sample_start_
      // done: Forward dependencies from rs2_data to transition LSHR_u32_u32_385_sample_start_
      ;;[LSHR_u32_u32_385_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[LSHR_u32_u32_385_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      LSHR_u32_u32_385_sample_start_ &-> (LSHR_u32_u32_385_Sample)
      LSHR_u32_u32_385_sample_completed_ <-& (LSHR_u32_u32_385_Sample)
      LSHR_u32_u32_385_sample_completed_ &-> ($null)
      LSHR_u32_u32_385_update_start_ &-> (LSHR_u32_u32_385_Update)
      LSHR_u32_u32_385_update_completed_ <-& (LSHR_u32_u32_385_Update)
      // Target expression
      // (as target) right_shift
      $T[STORE_right_shift_382_sample_start_] 
      $T[STORE_right_shift_382_sample_completed_] 
      $T[STORE_right_shift_382_update_start_] 
      $T[STORE_right_shift_382_update_completed_] 
      // right_shift
      $T[STORE_right_shift_382_word_address_calculated] 
      $T[STORE_right_shift_382_root_address_calculated] 
      STORE_right_shift_382_word_address_calculated <-& (STORE_right_shift_382_root_address_calculated)
      ;;[STORE_right_shift_382_Sample] 
      {
        ;;[STORE_right_shift_382_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_right_shift_382_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_right_shift_382_sample_start_ <-& (STORE_right_shift_382_word_address_calculated)
      STORE_right_shift_382_sample_start_ &-> (STORE_right_shift_382_Sample)
      STORE_right_shift_382_sample_completed_ <-& (STORE_right_shift_382_Sample)
      STORE_right_shift_382_sample_completed_ &-> ($null)
      STORE_right_shift_382_update_start_ &-> (STORE_right_shift_382_Update)
      STORE_right_shift_382_update_completed_ <-& (STORE_right_shift_382_Update)
      // start: Forward dependencies from (rs1_data >> rs2_data) to transition STORE_right_shift_382_sample_start_
      STORE_right_shift_382_sample_start_ <-& (LSHR_u32_u32_385_update_completed_)
      // done: Forward dependencies from (rs1_data >> rs2_data) to transition STORE_right_shift_382_sample_start_
      // end:  	right_shift := (rs1_data >> rs2_data)// bits of buffering = 32. 
      // start:  	no_of_shifts := (( $mux (rs2_data < 33 ) 1   _b0  )  | ( $mux (rs2_data > 32 ) 0   _b0  ) )// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 193
      // Source expression
      // (( $mux (rs2_data < 33 ) 1   _b0  )  | ( $mux (rs2_data > 32 ) 0   _b0  ) )
      $T[OR_u32_u32_400_sample_start_] 
      $T[OR_u32_u32_400_sample_completed_] 
      $T[OR_u32_u32_400_update_start_] 
      $T[OR_u32_u32_400_update_completed_] 
      // ( $mux (rs2_data < 33 ) 1   _b0  ) 
      // (rs2_data < 33 )
      // rs2_data
      // ( $mux (rs2_data > 32 ) 0   _b0  ) 
      // (rs2_data > 32 )
      // rs2_data
      // start: Forward dependencies from ( $mux (rs2_data < 33 ) 1   _b0  )  to transition OR_u32_u32_400_sample_start_
      // done: Forward dependencies from ( $mux (rs2_data < 33 ) 1   _b0  )  to transition OR_u32_u32_400_sample_start_
      // start: Forward dependencies from ( $mux (rs2_data > 32 ) 0   _b0  )  to transition OR_u32_u32_400_sample_start_
      // done: Forward dependencies from ( $mux (rs2_data > 32 ) 0   _b0  )  to transition OR_u32_u32_400_sample_start_
      ;;[OR_u32_u32_400_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[OR_u32_u32_400_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      OR_u32_u32_400_sample_start_ &-> (OR_u32_u32_400_Sample)
      OR_u32_u32_400_sample_completed_ <-& (OR_u32_u32_400_Sample)
      OR_u32_u32_400_sample_completed_ &-> ($null)
      OR_u32_u32_400_update_start_ &-> (OR_u32_u32_400_Update)
      OR_u32_u32_400_update_completed_ <-& (OR_u32_u32_400_Update)
      // Target expression
      // (as target) no_of_shifts
      // start: WAR dependencies for no_of_shifts
      // done: WAR dependencies for no_of_shifts
      // end:  	no_of_shifts := (( $mux (rs2_data < 33 ) 1   _b0  )  | ( $mux (rs2_data > 32 ) 0   _b0  ) )// bits of buffering = 32. 
      // start:  	sraa := (right_shift & no_of_shifts)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 194
      // Source expression
      // (right_shift & no_of_shifts)
      $T[AND_u32_u32_405_sample_start_] 
      $T[AND_u32_u32_405_sample_completed_] 
      $T[AND_u32_u32_405_update_start_] 
      $T[AND_u32_u32_405_update_completed_] 
      // right_shift
      $T[LOAD_right_shift_403_sample_start_] 
      $T[LOAD_right_shift_403_sample_completed_] 
      $T[LOAD_right_shift_403_update_start_] 
      $T[LOAD_right_shift_403_update_completed_] 
      $T[LOAD_right_shift_403_word_address_calculated] 
      $T[LOAD_right_shift_403_root_address_calculated] 
      LOAD_right_shift_403_word_address_calculated <-& (LOAD_right_shift_403_root_address_calculated)
      ;;[LOAD_right_shift_403_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[LOAD_right_shift_403_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[LOAD_right_shift_403_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      LOAD_right_shift_403_sample_start_ <-& (LOAD_right_shift_403_word_address_calculated)
      LOAD_right_shift_403_sample_start_ &-> (LOAD_right_shift_403_Sample)
      LOAD_right_shift_403_sample_completed_ <-& (LOAD_right_shift_403_Sample)
      LOAD_right_shift_403_sample_completed_ &-> ($null)
      LOAD_right_shift_403_update_start_ &-> (LOAD_right_shift_403_Update)
      LOAD_right_shift_403_update_completed_ <-& (LOAD_right_shift_403_Update)
      // no_of_shifts
      // start: Forward dependencies from right_shift to transition AND_u32_u32_405_sample_start_
      AND_u32_u32_405_sample_start_ <-& (LOAD_right_shift_403_update_completed_)
      // done: Forward dependencies from right_shift to transition AND_u32_u32_405_sample_start_
      // start: Forward dependencies from no_of_shifts to transition AND_u32_u32_405_sample_start_
      AND_u32_u32_405_sample_start_ <-& (OR_u32_u32_400_update_completed_)
      // done: Forward dependencies from no_of_shifts to transition AND_u32_u32_405_sample_start_
      ;;[AND_u32_u32_405_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[AND_u32_u32_405_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      AND_u32_u32_405_sample_start_ &-> (AND_u32_u32_405_Sample)
      AND_u32_u32_405_sample_completed_ <-& (AND_u32_u32_405_Sample)
      AND_u32_u32_405_sample_completed_ &-> ($null)
      AND_u32_u32_405_update_start_ &-> (AND_u32_u32_405_Update)
      AND_u32_u32_405_update_completed_ <-& (AND_u32_u32_405_Update)
      // Target expression
      // (as target) sraa
      // start: WAR dependencies for sraa
      // done: WAR dependencies for sraa
      // end:  	sraa := (right_shift & no_of_shifts)// bits of buffering = 32. 
      // start:  	sraaa := (right_shift & ( ~ no_of_shifts ))// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 195
      // Source expression
      // (right_shift & ( ~ no_of_shifts ))
      $T[AND_u32_u32_411_sample_start_] 
      $T[AND_u32_u32_411_sample_completed_] 
      $T[AND_u32_u32_411_update_start_] 
      $T[AND_u32_u32_411_update_completed_] 
      // right_shift
      $T[LOAD_right_shift_408_sample_start_] 
      $T[LOAD_right_shift_408_sample_completed_] 
      $T[LOAD_right_shift_408_update_start_] 
      $T[LOAD_right_shift_408_update_completed_] 
      $T[LOAD_right_shift_408_word_address_calculated] 
      $T[LOAD_right_shift_408_root_address_calculated] 
      LOAD_right_shift_408_word_address_calculated <-& (LOAD_right_shift_408_root_address_calculated)
      ;;[LOAD_right_shift_408_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[LOAD_right_shift_408_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[LOAD_right_shift_408_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      LOAD_right_shift_408_sample_start_ <-& (LOAD_right_shift_408_word_address_calculated)
      LOAD_right_shift_408_sample_start_ &-> (LOAD_right_shift_408_Sample)
      LOAD_right_shift_408_sample_completed_ <-& (LOAD_right_shift_408_Sample)
      LOAD_right_shift_408_sample_completed_ &-> ($null)
      LOAD_right_shift_408_update_start_ &-> (LOAD_right_shift_408_Update)
      LOAD_right_shift_408_update_completed_ <-& (LOAD_right_shift_408_Update)
      // ( ~ no_of_shifts )
      // no_of_shifts
      // start: Forward dependencies from right_shift to transition AND_u32_u32_411_sample_start_
      AND_u32_u32_411_sample_start_ <-& (LOAD_right_shift_408_update_completed_)
      // done: Forward dependencies from right_shift to transition AND_u32_u32_411_sample_start_
      // start: Forward dependencies from ( ~ no_of_shifts ) to transition AND_u32_u32_411_sample_start_
      AND_u32_u32_411_sample_start_ <-& (OR_u32_u32_400_update_completed_)
      // done: Forward dependencies from ( ~ no_of_shifts ) to transition AND_u32_u32_411_sample_start_
      ;;[AND_u32_u32_411_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[AND_u32_u32_411_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      AND_u32_u32_411_sample_start_ &-> (AND_u32_u32_411_Sample)
      AND_u32_u32_411_sample_completed_ <-& (AND_u32_u32_411_Sample)
      AND_u32_u32_411_sample_completed_ &-> ($null)
      AND_u32_u32_411_update_start_ &-> (AND_u32_u32_411_Update)
      AND_u32_u32_411_update_completed_ <-& (AND_u32_u32_411_Update)
      // Target expression
      // (as target) sraaa
      // start: WAR dependencies for sraaa
      // done: WAR dependencies for sraaa
      // end:  	sraaa := (right_shift & ( ~ no_of_shifts ))// bits of buffering = 32. 
      // start:  	$guard (sraa) new := (_hffffffff  << (32  - rs1_data))// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 196
      // Guard expression 
      // sraa
      // Source expression
      // (_hffffffff  << (32  - rs1_data))
      $T[SHL_u32_u32_419_sample_start_] 
      $T[SHL_u32_u32_419_sample_completed_] 
      $T[SHL_u32_u32_419_update_start_] 
      $T[SHL_u32_u32_419_update_completed_] 
      // Guard dependency for expression SHL_u32_u32_419 with guard R_sraa_413
      SHL_u32_u32_419_sample_start_ <-& (AND_u32_u32_405_update_completed_)
      // (32  - rs1_data)
      // rs1_data
      // start: Forward dependencies from (32  - rs1_data) to transition SHL_u32_u32_419_sample_start_
      // done: Forward dependencies from (32  - rs1_data) to transition SHL_u32_u32_419_sample_start_
      ;;[SHL_u32_u32_419_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[SHL_u32_u32_419_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      SHL_u32_u32_419_sample_start_ &-> (SHL_u32_u32_419_Sample)
      SHL_u32_u32_419_sample_completed_ <-& (SHL_u32_u32_419_Sample)
      SHL_u32_u32_419_sample_completed_ &-> ($null)
      SHL_u32_u32_419_update_start_ &-> (SHL_u32_u32_419_Update)
      SHL_u32_u32_419_update_completed_ <-& (SHL_u32_u32_419_Update)
      // Target expression
      // (as target) new
      // start: WAR dependencies for new
      // done: WAR dependencies for new
      // end:  	$guard (sraa) new := (_hffffffff  << (32  - rs1_data))// bits of buffering = 32. 
      // start:  	$guard (sraa) right_shift := (right_shift | new)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 197
      // Guard expression 
      // sraa
      // Source expression
      // (right_shift | new)
      $T[OR_u32_u32_425_sample_start_] 
      $T[OR_u32_u32_425_sample_completed_] 
      $T[OR_u32_u32_425_update_start_] 
      $T[OR_u32_u32_425_update_completed_] 
      // Guard dependency for expression OR_u32_u32_425 with guard R_sraa_421
      OR_u32_u32_425_sample_start_ <-& (AND_u32_u32_405_update_completed_)
      // right_shift
      $T[LOAD_right_shift_423_sample_start_] 
      $T[LOAD_right_shift_423_sample_completed_] 
      $T[LOAD_right_shift_423_update_start_] 
      $T[LOAD_right_shift_423_update_completed_] 
      // Guard dependency for expression LOAD_right_shift_423 with guard R_sraa_421
      LOAD_right_shift_423_sample_start_ <-& (AND_u32_u32_405_update_completed_)
      $T[LOAD_right_shift_423_word_address_calculated] 
      $T[LOAD_right_shift_423_root_address_calculated] 
      LOAD_right_shift_423_word_address_calculated <-& (LOAD_right_shift_423_root_address_calculated)
      ;;[LOAD_right_shift_423_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[LOAD_right_shift_423_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[LOAD_right_shift_423_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      LOAD_right_shift_423_sample_start_ <-& (LOAD_right_shift_423_word_address_calculated)
      LOAD_right_shift_423_sample_start_ &-> (LOAD_right_shift_423_Sample)
      LOAD_right_shift_423_sample_completed_ <-& (LOAD_right_shift_423_Sample)
      LOAD_right_shift_423_sample_completed_ &-> ($null)
      LOAD_right_shift_423_update_start_ &-> (LOAD_right_shift_423_Update)
      LOAD_right_shift_423_update_completed_ <-& (LOAD_right_shift_423_Update)
      // new
      // start: Forward dependencies from right_shift to transition OR_u32_u32_425_sample_start_
      OR_u32_u32_425_sample_start_ <-& (LOAD_right_shift_423_update_completed_)
      // done: Forward dependencies from right_shift to transition OR_u32_u32_425_sample_start_
      // start: Forward dependencies from new to transition OR_u32_u32_425_sample_start_
      OR_u32_u32_425_sample_start_ <-& (SHL_u32_u32_419_update_completed_)
      // done: Forward dependencies from new to transition OR_u32_u32_425_sample_start_
      ;;[OR_u32_u32_425_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[OR_u32_u32_425_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      OR_u32_u32_425_sample_start_ &-> (OR_u32_u32_425_Sample)
      OR_u32_u32_425_sample_completed_ <-& (OR_u32_u32_425_Sample)
      OR_u32_u32_425_sample_completed_ &-> ($null)
      OR_u32_u32_425_update_start_ &-> (OR_u32_u32_425_Update)
      OR_u32_u32_425_update_completed_ <-& (OR_u32_u32_425_Update)
      // Target expression
      // (as target) right_shift
      $T[STORE_right_shift_422_sample_start_] 
      $T[STORE_right_shift_422_sample_completed_] 
      $T[STORE_right_shift_422_update_start_] 
      $T[STORE_right_shift_422_update_completed_] 
      // Guard dependency for expression STORE_right_shift_422 with guard R_sraa_421
      STORE_right_shift_422_sample_start_ <-& (AND_u32_u32_405_update_completed_)
      // right_shift
      $T[STORE_right_shift_422_word_address_calculated] 
      $T[STORE_right_shift_422_root_address_calculated] 
      STORE_right_shift_422_word_address_calculated <-& (STORE_right_shift_422_root_address_calculated)
      ;;[STORE_right_shift_422_Sample] 
      {
        ;;[STORE_right_shift_422_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_right_shift_422_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_right_shift_422_sample_start_ <-& (STORE_right_shift_422_word_address_calculated)
      STORE_right_shift_422_sample_start_ &-> (STORE_right_shift_422_Sample)
      STORE_right_shift_422_sample_completed_ <-& (STORE_right_shift_422_Sample)
      STORE_right_shift_422_sample_completed_ &-> ($null)
      STORE_right_shift_422_update_start_ &-> (STORE_right_shift_422_Update)
      STORE_right_shift_422_update_completed_ <-& (STORE_right_shift_422_Update)
      // start: Forward dependencies from (right_shift | new) to transition STORE_right_shift_422_sample_start_
      STORE_right_shift_422_sample_start_ <-& (OR_u32_u32_425_update_completed_)
      // done: Forward dependencies from (right_shift | new) to transition STORE_right_shift_422_sample_start_
      // end:  	$guard (sraa) right_shift := (right_shift | new)// bits of buffering = 32. 
      // start:  	$guard (sraaa) right_shift := _hffffffff // bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 198
      // Guard expression 
      // sraaa
      // Target expression
      // (as target) right_shift
      $T[STORE_right_shift_428_sample_start_] 
      $T[STORE_right_shift_428_sample_completed_] 
      $T[STORE_right_shift_428_update_start_] 
      $T[STORE_right_shift_428_update_completed_] 
      // Guard dependency for expression STORE_right_shift_428 with guard R_sraaa_427
      STORE_right_shift_428_sample_start_ <-& (AND_u32_u32_411_update_completed_)
      // right_shift
      $T[STORE_right_shift_428_word_address_calculated] 
      $T[STORE_right_shift_428_root_address_calculated] 
      STORE_right_shift_428_word_address_calculated <-& (STORE_right_shift_428_root_address_calculated)
      ;;[STORE_right_shift_428_Sample] 
      {
        ;;[STORE_right_shift_428_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_right_shift_428_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_right_shift_428_sample_start_ <-& (STORE_right_shift_428_word_address_calculated)
      STORE_right_shift_428_sample_start_ &-> (STORE_right_shift_428_Sample)
      STORE_right_shift_428_sample_completed_ <-& (STORE_right_shift_428_Sample)
      STORE_right_shift_428_sample_completed_ &-> ($null)
      STORE_right_shift_428_update_start_ &-> (STORE_right_shift_428_Update)
      STORE_right_shift_428_update_completed_ <-& (STORE_right_shift_428_Update)
      // end:  	$guard (sraaa) right_shift := _hffffffff // bits of buffering = 32. 
      // start:  	output := right_shift// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 199
      // Source expression
      // right_shift
      $T[LOAD_right_shift_432_sample_start_] 
      $T[LOAD_right_shift_432_sample_completed_] 
      $T[LOAD_right_shift_432_update_start_] 
      $T[LOAD_right_shift_432_update_completed_] 
      $T[LOAD_right_shift_432_word_address_calculated] 
      $T[LOAD_right_shift_432_root_address_calculated] 
      LOAD_right_shift_432_word_address_calculated <-& (LOAD_right_shift_432_root_address_calculated)
      ;;[LOAD_right_shift_432_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[LOAD_right_shift_432_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[LOAD_right_shift_432_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      LOAD_right_shift_432_sample_start_ <-& (LOAD_right_shift_432_word_address_calculated)
      LOAD_right_shift_432_sample_start_ &-> (LOAD_right_shift_432_Sample)
      LOAD_right_shift_432_sample_completed_ <-& (LOAD_right_shift_432_Sample)
      LOAD_right_shift_432_sample_completed_ &-> ($null)
      LOAD_right_shift_432_update_start_ &-> (LOAD_right_shift_432_Update)
      LOAD_right_shift_432_update_completed_ <-& (LOAD_right_shift_432_Update)
      // Target expression
      // (as target) output
      // start: WAR dependencies for output
      // done: WAR dependencies for output
      // end:  	output := right_shift// bits of buffering = 32. 
      // start: 	$call accessreg (0  rd output ) (dummy ) 
      //  file prog.linked.opt.aa, line 200
      $T[call_stmt_438_sample_start_] 
      $T[call_stmt_438_sample_completed_] 
      $T[call_stmt_438_update_start_] 
      $T[call_stmt_438_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rd
      // Call input argument 2
      // output
      // start: Forward dependencies from rd to transition call_stmt_438_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_438_sample_start_
      // start: Forward dependencies from output to transition call_stmt_438_sample_start_
      call_stmt_438_sample_start_ <-& (LOAD_right_shift_432_update_completed_)
      // done: Forward dependencies from output to transition call_stmt_438_sample_start_
      ;;[call_stmt_438_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_438_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_438_sample_start_ &-> (call_stmt_438_Sample)
      call_stmt_438_sample_completed_ <-& (call_stmt_438_Sample)
      call_stmt_438_sample_completed_ &-> ($null)
      call_stmt_438_update_start_ &-> (call_stmt_438_Update)
      call_stmt_438_update_completed_ <-& (call_stmt_438_Update)
      // Call output argument 0
      // (as target) dummy
      // start: WAR dependencies for dummy
      // done: WAR dependencies for dummy
      // end: 	$call accessreg (0  rd output ) (dummy ) 
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 201
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_442_sample_start_] 
      $T[ADD_u8_u8_442_sample_completed_] 
      $T[ADD_u8_u8_442_update_start_] 
      $T[ADD_u8_u8_442_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_442_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_442_sample_start_
      ;;[ADD_u8_u8_442_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_442_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_442_sample_start_ &-> (ADD_u8_u8_442_Sample)
      ADD_u8_u8_442_sample_completed_ <-& (ADD_u8_u8_442_Sample)
      ADD_u8_u8_442_sample_completed_ &-> ($null)
      ADD_u8_u8_442_update_start_ &-> (ADD_u8_u8_442_Update)
      ADD_u8_u8_442_update_completed_ <-& (ADD_u8_u8_442_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_3
      //  STORE_right_shift_382 store
      //  LOAD_right_shift_403 load
      $T [STORE_right_shift_382_LOAD_right_shift_403_delay] $delay
      // STORE_right_shift_382(store) -> LOAD_right_shift_403(load)
      LOAD_right_shift_403_sample_start_ <-& (STORE_right_shift_382_LOAD_right_shift_403_delay)
      STORE_right_shift_382_LOAD_right_shift_403_delay <-& (STORE_right_shift_382_sample_completed_)
      //  LOAD_right_shift_408 load
      $T [STORE_right_shift_382_LOAD_right_shift_408_delay] $delay
      // STORE_right_shift_382(store) -> LOAD_right_shift_408(load)
      LOAD_right_shift_408_sample_start_ <-& (STORE_right_shift_382_LOAD_right_shift_408_delay)
      STORE_right_shift_382_LOAD_right_shift_408_delay <-& (STORE_right_shift_382_sample_completed_)
      //  LOAD_right_shift_423 load
      $T [STORE_right_shift_382_LOAD_right_shift_423_delay] $delay
      // STORE_right_shift_382(store) -> LOAD_right_shift_423(load)
      LOAD_right_shift_423_sample_start_ <-& (STORE_right_shift_382_LOAD_right_shift_423_delay)
      STORE_right_shift_382_LOAD_right_shift_423_delay <-& (STORE_right_shift_382_sample_completed_)
      //  STORE_right_shift_422 store
      $T [LOAD_right_shift_403_STORE_right_shift_422_delay] $delay
      // LOAD_right_shift_403(load) -> STORE_right_shift_422(store)
      STORE_right_shift_422_sample_start_ <-& (LOAD_right_shift_403_STORE_right_shift_422_delay)
      LOAD_right_shift_403_STORE_right_shift_422_delay <-& (LOAD_right_shift_403_sample_completed_)
      $T [LOAD_right_shift_408_STORE_right_shift_422_delay] $delay
      // LOAD_right_shift_408(load) -> STORE_right_shift_422(store)
      STORE_right_shift_422_sample_start_ <-& (LOAD_right_shift_408_STORE_right_shift_422_delay)
      LOAD_right_shift_408_STORE_right_shift_422_delay <-& (LOAD_right_shift_408_sample_completed_)
      $T [LOAD_right_shift_423_STORE_right_shift_422_delay] $delay
      // LOAD_right_shift_423(load) -> STORE_right_shift_422(store)
      STORE_right_shift_422_sample_start_ <-& (LOAD_right_shift_423_STORE_right_shift_422_delay)
      LOAD_right_shift_423_STORE_right_shift_422_delay <-& (LOAD_right_shift_423_sample_completed_)
      //  STORE_right_shift_428 store
      $T [STORE_right_shift_422_STORE_right_shift_428_delay] $delay
      // STORE_right_shift_422(store) -> STORE_right_shift_428(store)
      STORE_right_shift_428_sample_start_ <-& (STORE_right_shift_422_STORE_right_shift_428_delay)
      STORE_right_shift_422_STORE_right_shift_428_delay <-& (STORE_right_shift_422_sample_completed_)
      //  LOAD_right_shift_432 load
      $T [STORE_right_shift_428_LOAD_right_shift_432_delay] $delay
      // STORE_right_shift_428(store) -> LOAD_right_shift_432(load)
      LOAD_right_shift_432_sample_start_ <-& (STORE_right_shift_428_LOAD_right_shift_432_delay)
      STORE_right_shift_428_LOAD_right_shift_432_delay <-& (STORE_right_shift_428_sample_completed_)
      // memory-space  memory_space_2
      //  call_stmt_438 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sra_i
    //  file prog.linked.opt.aa, line 187
    // right_shift
    $constant $W[STORE_right_shift_382_word_address_0] : $pointer<memory_space_3> := _b0
    // ( $mux (rs2_data < 33 ) 1   _b0  ) 
    // 33 
    $constant $W[konst_389_wire_constant] : $int<32> := _b00000000000000000000000000100001// 33
    // 1 
    $constant $W[konst_391_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // _b0 
    $constant $W[konst_392_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ( $mux (rs2_data > 32 ) 0   _b0  ) 
    // 32 
    $constant $W[konst_395_wire_constant] : $int<32> := _b00000000000000000000000000100000// 32
    // 0 
    $constant $W[konst_397_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // _b0 
    $constant $W[konst_398_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // right_shift
    $constant $W[LOAD_right_shift_403_word_address_0] : $pointer<memory_space_3> := _b0
    // right_shift
    $constant $W[LOAD_right_shift_408_word_address_0] : $pointer<memory_space_3> := _b0
    // _hffffffff 
    $constant $W[konst_415_wire_constant] : $int<32> := _b11111111111111111111111111111111// -1
    // 32 
    $constant $W[konst_416_wire_constant] : $int<32> := _b00000000000000000000000000100000// 32
    // right_shift
    $constant $W[LOAD_right_shift_423_word_address_0] : $pointer<memory_space_3> := _b0
    // right_shift
    $constant $W[STORE_right_shift_422_word_address_0] : $pointer<memory_space_3> := _b0
    // _hffffffff 
    $constant $W[konst_429_wire_constant] : $int<32> := _b11111111111111111111111111111111// -1
    // right_shift
    $constant $W[STORE_right_shift_428_word_address_0] : $pointer<memory_space_3> := _b0
    // right_shift
    $constant $W[LOAD_right_shift_432_word_address_0] : $pointer<memory_space_3> := _b0
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 200
    // 0 
    $constant $W[konst_434_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_441_wire_constant] : $int<8> := _b00000001// 1
    // 	right_shift := (rs1_data >> rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 192
    // (rs1_data >> rs2_data)
    $intermediate $W[LSHR_u32_u32_385_wire] : $int<32>
    // right_shift
    $constant $W[STORE_right_shift_382_word_address_0] : $pointer<memory_space_3> := _b0
    $W[STORE_right_shift_382_data_0] : $int<32>
    // 	no_of_shifts := (( $mux (rs2_data < 33 ) 1   _b0  )  | ( $mux (rs2_data > 32 ) 0   _b0  ) )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 193
    // (rs2_data < 33 )
    $intermediate $W[ULT_u32_u1_390_wire] : $int<1>
    // ( $mux (rs2_data < 33 ) 1   _b0  ) 
    $intermediate $W[MUX_393_wire] : $int<32>
    // (rs2_data > 32 )
    $intermediate $W[UGT_u32_u1_396_wire] : $int<1>
    // ( $mux (rs2_data > 32 ) 0   _b0  ) 
    $intermediate $W[MUX_399_wire] : $int<32>
    // no_of_shifts
    $W[no_of_shifts_401] : $int<32>
    // 	sraa := (right_shift & no_of_shifts)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 194
    // right_shift
    $W[LOAD_right_shift_403_wire] : $int<32>
    // right_shift
    $W[LOAD_right_shift_403_data_0] : $int<32>
    // sraa
    $W[sraa_406] : $int<32>
    // 	sraaa := (right_shift & ( ~ no_of_shifts ))// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 195
    // right_shift
    $W[LOAD_right_shift_408_wire] : $int<32>
    // right_shift
    $W[LOAD_right_shift_408_data_0] : $int<32>
    // ( ~ no_of_shifts )
    $intermediate $W[NOT_u32_u32_410_wire] : $int<32>
    // sraaa
    $W[sraaa_412] : $int<32>
    // 	$guard (sraa) new := (_hffffffff  << (32  - rs1_data))// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 196
    // (32  - rs1_data)
    $intermediate $W[SUB_u32_u32_418_wire] : $int<32>
    // new
    $W[new_420] : $int<32>
    // 	$guard (sraa) right_shift := (right_shift | new)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 197
    // right_shift
    $W[LOAD_right_shift_423_wire] : $int<32>
    // right_shift
    $W[LOAD_right_shift_423_data_0] : $int<32>
    // (right_shift | new)
    $intermediate $W[OR_u32_u32_425_wire] : $int<32>
    // right_shift
    $constant $W[STORE_right_shift_422_word_address_0] : $pointer<memory_space_3> := _b0
    $W[STORE_right_shift_422_data_0] : $int<32>
    // 	$guard (sraaa) right_shift := _hffffffff // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 198
    // right_shift
    $constant $W[STORE_right_shift_428_word_address_0] : $pointer<memory_space_3> := _b0
    $W[STORE_right_shift_428_data_0] : $int<32>
    // 	output := right_shift// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 199
    // right_shift
    $W[LOAD_right_shift_432_data_0] : $int<32>
    // output
    $W[output_433] : $int<32>
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 200
    // dummy
    $W[dummy_438] : $int<32>
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 201
    // next_pc
    // 	right_shift := (rs1_data >> rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 192
    // (rs1_data >> rs2_data)
    >>[LSHR_u32_u32_385_inst] (rs1_data rs2_data) (LSHR_u32_u32_385_wire)   
    $buffering  $out LSHR_u32_u32_385_inst LSHR_u32_u32_385_wire 1
    $delay LSHR_u32_u32_385_inst 1
    // right_shift
    $store [STORE_right_shift_382_store_0] $to memory_space_3 (STORE_right_shift_382_word_address_0 STORE_right_shift_382_data_0) 
    $delay STORE_right_shift_382_store_0 4
    &/ [STORE_right_shift_382_gather_scatter] (LSHR_u32_u32_385_wire) (STORE_right_shift_382_data_0) 
    $flowthrough 
    // 	no_of_shifts := (( $mux (rs2_data < 33 ) 1   _b0  )  | ( $mux (rs2_data > 32 ) 0   _b0  ) )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 193
    // (rs2_data < 33 )
    <[ULT_u32_u1_390_inst] (rs2_data konst_389_wire_constant) (ULT_u32_u1_390_wire)   $flowthrough 
    $delay ULT_u32_u1_390_inst 0
    // ( $mux (rs2_data < 33 ) 1   _b0  ) 
    ? [MUX_393_inst] (ULT_u32_u1_390_wire konst_391_wire_constant konst_392_wire_constant) (MUX_393_wire)  $flowthrough
    // (rs2_data > 32 )
    >[UGT_u32_u1_396_inst] (rs2_data konst_395_wire_constant) (UGT_u32_u1_396_wire)   $flowthrough 
    $delay UGT_u32_u1_396_inst 0
    // ( $mux (rs2_data > 32 ) 0   _b0  ) 
    ? [MUX_399_inst] (UGT_u32_u1_396_wire konst_397_wire_constant konst_398_wire_constant) (MUX_399_wire)  $flowthrough
    // (( $mux (rs2_data < 33 ) 1   _b0  )  | ( $mux (rs2_data > 32 ) 0   _b0  ) )
    |[OR_u32_u32_400_inst] (MUX_393_wire MUX_399_wire) (no_of_shifts_401)   
    $buffering  $out OR_u32_u32_400_inst no_of_shifts_401 1
    $delay OR_u32_u32_400_inst 1
    // 	sraa := (right_shift & no_of_shifts)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 194
    // right_shift
    $load [LOAD_right_shift_403_load_0] $from memory_space_3 (LOAD_right_shift_403_word_address_0) (LOAD_right_shift_403_data_0) 
    $delay LOAD_right_shift_403_load_0 4
    &/ [LOAD_right_shift_403_gather_scatter] (LOAD_right_shift_403_data_0) (LOAD_right_shift_403_wire) 
    $flowthrough 
    // (right_shift & no_of_shifts)
    &[AND_u32_u32_405_inst] (LOAD_right_shift_403_wire no_of_shifts_401) (sraa_406)   
    $buffering  $out AND_u32_u32_405_inst sraa_406 1
    $delay AND_u32_u32_405_inst 1
    // 	sraaa := (right_shift & ( ~ no_of_shifts ))// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 195
    // right_shift
    $load [LOAD_right_shift_408_load_0] $from memory_space_3 (LOAD_right_shift_408_word_address_0) (LOAD_right_shift_408_data_0) 
    $delay LOAD_right_shift_408_load_0 4
    &/ [LOAD_right_shift_408_gather_scatter] (LOAD_right_shift_408_data_0) (LOAD_right_shift_408_wire) 
    $flowthrough 
    // ( ~ no_of_shifts )
    ~ [NOT_u32_u32_410_inst] (no_of_shifts_401) (NOT_u32_u32_410_wire)   $flowthrough
    $delay NOT_u32_u32_410_inst 0
    // (right_shift & ( ~ no_of_shifts ))
    &[AND_u32_u32_411_inst] (LOAD_right_shift_408_wire NOT_u32_u32_410_wire) (sraaa_412)   
    $buffering  $out AND_u32_u32_411_inst sraaa_412 1
    $delay AND_u32_u32_411_inst 1
    // 	$guard (sraa) new := (_hffffffff  << (32  - rs1_data))// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 196
    // (32  - rs1_data)
    -[SUB_u32_u32_418_inst] (konst_416_wire_constant rs1_data) (SUB_u32_u32_418_wire) $guard ( sraa_406 )   $flowthrough 
    $delay SUB_u32_u32_418_inst 0
    // (_hffffffff  << (32  - rs1_data))
    <<[SHL_u32_u32_419_inst] (konst_415_wire_constant SUB_u32_u32_418_wire) (new_420) $guard ( sraa_406 )   
    $buffering  $out SHL_u32_u32_419_inst new_420 1
    $delay SHL_u32_u32_419_inst 1
    // 	$guard (sraa) right_shift := (right_shift | new)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 197
    // right_shift
    $load [LOAD_right_shift_423_load_0] $from memory_space_3 (LOAD_right_shift_423_word_address_0) (LOAD_right_shift_423_data_0) $guard ( sraa_406 ) 
    $delay LOAD_right_shift_423_load_0 4
    &/ [LOAD_right_shift_423_gather_scatter] (LOAD_right_shift_423_data_0) (LOAD_right_shift_423_wire) $guard ( sraa_406 ) 
    $flowthrough 
    // (right_shift | new)
    |[OR_u32_u32_425_inst] (LOAD_right_shift_423_wire new_420) (OR_u32_u32_425_wire) $guard ( sraa_406 )   
    $buffering  $out OR_u32_u32_425_inst OR_u32_u32_425_wire 1
    $delay OR_u32_u32_425_inst 1
    // right_shift
    $store [STORE_right_shift_422_store_0] $to memory_space_3 (STORE_right_shift_422_word_address_0 STORE_right_shift_422_data_0) $guard ( sraa_406 ) 
    $delay STORE_right_shift_422_store_0 4
    &/ [STORE_right_shift_422_gather_scatter] (OR_u32_u32_425_wire) (STORE_right_shift_422_data_0) $guard ( sraa_406 ) 
    $flowthrough 
    // 	$guard (sraaa) right_shift := _hffffffff // bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 198
    // right_shift
    $store [STORE_right_shift_428_store_0] $to memory_space_3 (STORE_right_shift_428_word_address_0 STORE_right_shift_428_data_0) $guard ( sraaa_412 ) 
    $delay STORE_right_shift_428_store_0 4
    &/ [STORE_right_shift_428_gather_scatter] (konst_429_wire_constant) (STORE_right_shift_428_data_0) $guard ( sraaa_412 ) 
    $flowthrough 
    // 	output := right_shift// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 199
    // right_shift
    $load [LOAD_right_shift_432_load_0] $from memory_space_3 (LOAD_right_shift_432_word_address_0) (LOAD_right_shift_432_data_0) 
    $delay LOAD_right_shift_432_load_0 4
    &/ [LOAD_right_shift_432_gather_scatter] (LOAD_right_shift_432_data_0) (output_433) 
    $flowthrough 
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 200
    $call [call_stmt_438_call] $module accessreg(konst_434_wire_constant rd output_433) (dummy_438)  
    $delay call_stmt_438_call 6
    $buffering  $in call_stmt_438_call konst_434_wire_constant 1
    $buffering  $in call_stmt_438_call rd 1
    $buffering  $in call_stmt_438_call output_433 1
    $buffering  $out call_stmt_438_call dummy_438 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 201
    // (pc + 1 )
    +[ADD_u8_u8_442_inst] (pc konst_441_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_442_inst next_pc 1
    $delay ADD_u8_u8_442_inst 1
  }
  // end data-path
  // 	right_shift := (rs1_data >> rs2_data)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 192
  // (rs1_data >> rs2_data)
  // rs1_data
  // rs2_data
  LSHR_u32_u32_385_inst <=> (assign_stmt_386_to_assign_stmt_443/LSHR_u32_u32_385_Sample/rr assign_stmt_386_to_assign_stmt_443/LSHR_u32_u32_385_Update/cr) (assign_stmt_386_to_assign_stmt_443/LSHR_u32_u32_385_Sample/ra assign_stmt_386_to_assign_stmt_443/LSHR_u32_u32_385_Update/ca)
  // right_shift
  STORE_right_shift_382_gather_scatter <=> (assign_stmt_386_to_assign_stmt_443/STORE_right_shift_382_Sample/STORE_right_shift_382_Split/split_req) (assign_stmt_386_to_assign_stmt_443/STORE_right_shift_382_Sample/STORE_right_shift_382_Split/split_ack)
  STORE_right_shift_382_store_0 <=> (assign_stmt_386_to_assign_stmt_443/STORE_right_shift_382_Sample/word_access_start/word_0/rr assign_stmt_386_to_assign_stmt_443/STORE_right_shift_382_Update/word_access_complete/word_0/cr) (assign_stmt_386_to_assign_stmt_443/STORE_right_shift_382_Sample/word_access_start/word_0/ra assign_stmt_386_to_assign_stmt_443/STORE_right_shift_382_Update/word_access_complete/word_0/ca)
  // 	no_of_shifts := (( $mux (rs2_data < 33 ) 1   _b0  )  | ( $mux (rs2_data > 32 ) 0   _b0  ) )// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 193
  // (( $mux (rs2_data < 33 ) 1   _b0  )  | ( $mux (rs2_data > 32 ) 0   _b0  ) )
  // (rs2_data < 33 )
  // rs2_data
  // ( $mux (rs2_data < 33 ) 1   _b0  ) 
  // (rs2_data > 32 )
  // rs2_data
  // ( $mux (rs2_data > 32 ) 0   _b0  ) 
  OR_u32_u32_400_inst <=> (assign_stmt_386_to_assign_stmt_443/OR_u32_u32_400_Sample/rr assign_stmt_386_to_assign_stmt_443/OR_u32_u32_400_Update/cr) (assign_stmt_386_to_assign_stmt_443/OR_u32_u32_400_Sample/ra assign_stmt_386_to_assign_stmt_443/OR_u32_u32_400_Update/ca)
  // 	sraa := (right_shift & no_of_shifts)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 194
  // (right_shift & no_of_shifts)
  // right_shift
  LOAD_right_shift_403_gather_scatter <=> (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_403_Update/LOAD_right_shift_403_Merge/merge_req) (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_403_Update/LOAD_right_shift_403_Merge/merge_ack)
  LOAD_right_shift_403_load_0 <=> (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_403_Sample/word_access_start/word_0/rr assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_403_Update/word_access_complete/word_0/cr) (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_403_Sample/word_access_start/word_0/ra assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_403_Update/word_access_complete/word_0/ca)
  // no_of_shifts
  AND_u32_u32_405_inst <=> (assign_stmt_386_to_assign_stmt_443/AND_u32_u32_405_Sample/rr assign_stmt_386_to_assign_stmt_443/AND_u32_u32_405_Update/cr) (assign_stmt_386_to_assign_stmt_443/AND_u32_u32_405_Sample/ra assign_stmt_386_to_assign_stmt_443/AND_u32_u32_405_Update/ca)
  // 	sraaa := (right_shift & ( ~ no_of_shifts ))// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 195
  // (right_shift & ( ~ no_of_shifts ))
  // right_shift
  LOAD_right_shift_408_gather_scatter <=> (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_408_Update/LOAD_right_shift_408_Merge/merge_req) (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_408_Update/LOAD_right_shift_408_Merge/merge_ack)
  LOAD_right_shift_408_load_0 <=> (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_408_Sample/word_access_start/word_0/rr assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_408_Update/word_access_complete/word_0/cr) (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_408_Sample/word_access_start/word_0/ra assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_408_Update/word_access_complete/word_0/ca)
  // no_of_shifts
  AND_u32_u32_411_inst <=> (assign_stmt_386_to_assign_stmt_443/AND_u32_u32_411_Sample/rr assign_stmt_386_to_assign_stmt_443/AND_u32_u32_411_Update/cr) (assign_stmt_386_to_assign_stmt_443/AND_u32_u32_411_Sample/ra assign_stmt_386_to_assign_stmt_443/AND_u32_u32_411_Update/ca)
  // 	$guard (sraa) new := (_hffffffff  << (32  - rs1_data))// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 196
  // (_hffffffff  << (32  - rs1_data))
  // (32  - rs1_data)
  // rs1_data
  SHL_u32_u32_419_inst <=> (assign_stmt_386_to_assign_stmt_443/SHL_u32_u32_419_Sample/rr assign_stmt_386_to_assign_stmt_443/SHL_u32_u32_419_Update/cr) (assign_stmt_386_to_assign_stmt_443/SHL_u32_u32_419_Sample/ra assign_stmt_386_to_assign_stmt_443/SHL_u32_u32_419_Update/ca)
  // 	$guard (sraa) right_shift := (right_shift | new)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 197
  // (right_shift | new)
  // right_shift
  LOAD_right_shift_423_gather_scatter <=> (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_423_Update/LOAD_right_shift_423_Merge/merge_req) (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_423_Update/LOAD_right_shift_423_Merge/merge_ack)
  LOAD_right_shift_423_load_0 <=> (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_423_Sample/word_access_start/word_0/rr assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_423_Update/word_access_complete/word_0/cr) (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_423_Sample/word_access_start/word_0/ra assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_423_Update/word_access_complete/word_0/ca)
  // new
  OR_u32_u32_425_inst <=> (assign_stmt_386_to_assign_stmt_443/OR_u32_u32_425_Sample/rr assign_stmt_386_to_assign_stmt_443/OR_u32_u32_425_Update/cr) (assign_stmt_386_to_assign_stmt_443/OR_u32_u32_425_Sample/ra assign_stmt_386_to_assign_stmt_443/OR_u32_u32_425_Update/ca)
  // right_shift
  STORE_right_shift_422_gather_scatter <=> (assign_stmt_386_to_assign_stmt_443/STORE_right_shift_422_Sample/STORE_right_shift_422_Split/split_req) (assign_stmt_386_to_assign_stmt_443/STORE_right_shift_422_Sample/STORE_right_shift_422_Split/split_ack)
  STORE_right_shift_422_store_0 <=> (assign_stmt_386_to_assign_stmt_443/STORE_right_shift_422_Sample/word_access_start/word_0/rr assign_stmt_386_to_assign_stmt_443/STORE_right_shift_422_Update/word_access_complete/word_0/cr) (assign_stmt_386_to_assign_stmt_443/STORE_right_shift_422_Sample/word_access_start/word_0/ra assign_stmt_386_to_assign_stmt_443/STORE_right_shift_422_Update/word_access_complete/word_0/ca)
  // 	$guard (sraaa) right_shift := _hffffffff // bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 198
  // right_shift
  STORE_right_shift_428_gather_scatter <=> (assign_stmt_386_to_assign_stmt_443/STORE_right_shift_428_Sample/STORE_right_shift_428_Split/split_req) (assign_stmt_386_to_assign_stmt_443/STORE_right_shift_428_Sample/STORE_right_shift_428_Split/split_ack)
  STORE_right_shift_428_store_0 <=> (assign_stmt_386_to_assign_stmt_443/STORE_right_shift_428_Sample/word_access_start/word_0/rr assign_stmt_386_to_assign_stmt_443/STORE_right_shift_428_Update/word_access_complete/word_0/cr) (assign_stmt_386_to_assign_stmt_443/STORE_right_shift_428_Sample/word_access_start/word_0/ra assign_stmt_386_to_assign_stmt_443/STORE_right_shift_428_Update/word_access_complete/word_0/ca)
  // 	output := right_shift// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 199
  // right_shift
  LOAD_right_shift_432_gather_scatter <=> (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_432_Update/LOAD_right_shift_432_Merge/merge_req) (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_432_Update/LOAD_right_shift_432_Merge/merge_ack)
  LOAD_right_shift_432_load_0 <=> (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_432_Sample/word_access_start/word_0/rr assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_432_Update/word_access_complete/word_0/cr) (assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_432_Sample/word_access_start/word_0/ra assign_stmt_386_to_assign_stmt_443/LOAD_right_shift_432_Update/word_access_complete/word_0/ca)
  // 	$call accessreg (0  rd output ) (dummy ) 
  //  file prog.linked.opt.aa, line 200
  // rd
  // output
  call_stmt_438_call <=> (assign_stmt_386_to_assign_stmt_443/call_stmt_438_Sample/crr assign_stmt_386_to_assign_stmt_443/call_stmt_438_Update/ccr) (assign_stmt_386_to_assign_stmt_443/call_stmt_438_Sample/cra assign_stmt_386_to_assign_stmt_443/call_stmt_438_Update/cca)
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 201
  // (pc + 1 )
  // pc
  ADD_u8_u8_442_inst <=> (assign_stmt_386_to_assign_stmt_443/ADD_u8_u8_442_Sample/rr assign_stmt_386_to_assign_stmt_443/ADD_u8_u8_442_Update/cr) (assign_stmt_386_to_assign_stmt_443/ADD_u8_u8_442_Sample/ra assign_stmt_386_to_assign_stmt_443/ADD_u8_u8_442_Update/ca)
}
$module [srl_i] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %srl_i
  //  file prog.linked.opt.aa, line 203
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_455_to_assign_stmt_465] 
    {
      // start:  	output := (rs1_data >> rs2_data)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 208
      // Source expression
      // (rs1_data >> rs2_data)
      $T[LSHR_u32_u32_454_sample_start_] 
      $T[LSHR_u32_u32_454_sample_completed_] 
      $T[LSHR_u32_u32_454_update_start_] 
      $T[LSHR_u32_u32_454_update_completed_] 
      // rs1_data
      // rs2_data
      // start: Forward dependencies from rs1_data to transition LSHR_u32_u32_454_sample_start_
      // done: Forward dependencies from rs1_data to transition LSHR_u32_u32_454_sample_start_
      // start: Forward dependencies from rs2_data to transition LSHR_u32_u32_454_sample_start_
      // done: Forward dependencies from rs2_data to transition LSHR_u32_u32_454_sample_start_
      ;;[LSHR_u32_u32_454_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[LSHR_u32_u32_454_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      LSHR_u32_u32_454_sample_start_ &-> (LSHR_u32_u32_454_Sample)
      LSHR_u32_u32_454_sample_completed_ <-& (LSHR_u32_u32_454_Sample)
      LSHR_u32_u32_454_sample_completed_ &-> ($null)
      LSHR_u32_u32_454_update_start_ &-> (LSHR_u32_u32_454_Update)
      LSHR_u32_u32_454_update_completed_ <-& (LSHR_u32_u32_454_Update)
      // Target expression
      // (as target) output
      // start: WAR dependencies for output
      // done: WAR dependencies for output
      // end:  	output := (rs1_data >> rs2_data)// bits of buffering = 32. 
      // start: 	$call accessreg (0  rd output ) (dummy ) 
      //  file prog.linked.opt.aa, line 209
      $T[call_stmt_460_sample_start_] 
      $T[call_stmt_460_sample_completed_] 
      $T[call_stmt_460_update_start_] 
      $T[call_stmt_460_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rd
      // Call input argument 2
      // output
      // start: Forward dependencies from rd to transition call_stmt_460_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_460_sample_start_
      // start: Forward dependencies from output to transition call_stmt_460_sample_start_
      call_stmt_460_sample_start_ <-& (LSHR_u32_u32_454_update_completed_)
      // done: Forward dependencies from output to transition call_stmt_460_sample_start_
      ;;[call_stmt_460_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_460_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_460_sample_start_ &-> (call_stmt_460_Sample)
      call_stmt_460_sample_completed_ <-& (call_stmt_460_Sample)
      call_stmt_460_sample_completed_ &-> ($null)
      call_stmt_460_update_start_ &-> (call_stmt_460_Update)
      call_stmt_460_update_completed_ <-& (call_stmt_460_Update)
      // Call output argument 0
      // (as target) dummy
      // start: WAR dependencies for dummy
      // done: WAR dependencies for dummy
      // end: 	$call accessreg (0  rd output ) (dummy ) 
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 210
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_464_sample_start_] 
      $T[ADD_u8_u8_464_sample_completed_] 
      $T[ADD_u8_u8_464_update_start_] 
      $T[ADD_u8_u8_464_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_464_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_464_sample_start_
      ;;[ADD_u8_u8_464_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_464_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_464_sample_start_ &-> (ADD_u8_u8_464_Sample)
      ADD_u8_u8_464_sample_completed_ <-& (ADD_u8_u8_464_Sample)
      ADD_u8_u8_464_sample_completed_ &-> ($null)
      ADD_u8_u8_464_update_start_ &-> (ADD_u8_u8_464_Update)
      ADD_u8_u8_464_update_completed_ <-& (ADD_u8_u8_464_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  call_stmt_460 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %srl_i
    //  file prog.linked.opt.aa, line 203
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 209
    // 0 
    $constant $W[konst_456_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_463_wire_constant] : $int<8> := _b00000001// 1
    // 	output := (rs1_data >> rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 208
    // output
    $W[output_455] : $int<32>
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 209
    // dummy
    $W[dummy_460] : $int<32>
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 210
    // next_pc
    // 	output := (rs1_data >> rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 208
    // (rs1_data >> rs2_data)
    >>[LSHR_u32_u32_454_inst] (rs1_data rs2_data) (output_455)   
    $buffering  $out LSHR_u32_u32_454_inst output_455 1
    $delay LSHR_u32_u32_454_inst 1
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 209
    $call [call_stmt_460_call] $module accessreg(konst_456_wire_constant rd output_455) (dummy_460)  
    $delay call_stmt_460_call 6
    $buffering  $in call_stmt_460_call konst_456_wire_constant 1
    $buffering  $in call_stmt_460_call rd 1
    $buffering  $in call_stmt_460_call output_455 1
    $buffering  $out call_stmt_460_call dummy_460 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 210
    // (pc + 1 )
    +[ADD_u8_u8_464_inst] (pc konst_463_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_464_inst next_pc 1
    $delay ADD_u8_u8_464_inst 1
  }
  // end data-path
  // 	output := (rs1_data >> rs2_data)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 208
  // (rs1_data >> rs2_data)
  // rs1_data
  // rs2_data
  LSHR_u32_u32_454_inst <=> (assign_stmt_455_to_assign_stmt_465/LSHR_u32_u32_454_Sample/rr assign_stmt_455_to_assign_stmt_465/LSHR_u32_u32_454_Update/cr) (assign_stmt_455_to_assign_stmt_465/LSHR_u32_u32_454_Sample/ra assign_stmt_455_to_assign_stmt_465/LSHR_u32_u32_454_Update/ca)
  // 	$call accessreg (0  rd output ) (dummy ) 
  //  file prog.linked.opt.aa, line 209
  // rd
  // output
  call_stmt_460_call <=> (assign_stmt_455_to_assign_stmt_465/call_stmt_460_Sample/crr assign_stmt_455_to_assign_stmt_465/call_stmt_460_Update/ccr) (assign_stmt_455_to_assign_stmt_465/call_stmt_460_Sample/cra assign_stmt_455_to_assign_stmt_465/call_stmt_460_Update/cca)
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 210
  // (pc + 1 )
  // pc
  ADD_u8_u8_464_inst <=> (assign_stmt_455_to_assign_stmt_465/ADD_u8_u8_464_Sample/rr assign_stmt_455_to_assign_stmt_465/ADD_u8_u8_464_Update/cr) (assign_stmt_455_to_assign_stmt_465/ADD_u8_u8_464_Sample/ra assign_stmt_455_to_assign_stmt_465/ADD_u8_u8_464_Update/ca)
}
$module [store] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %store
  //  file prog.linked.opt.aa, line 212
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_475_to_assign_stmt_485] 
    {
      // start: WAR dependencies for addr
      // ignored out-of-scope w_root  rs1_data : $uint<32> 
      // done: WAR dependencies for addr
      // start:  	$volatile addr := ( $slice rs1_data 7 0 ) 
      //  file prog.linked.opt.aa, line 217
      // volatile! 
      // Source expression
      // ( $slice rs1_data 7 0 ) 
      // rs1_data
      // Target expression
      // (as target) addr
      // start: WAR dependencies for addr
      // ignored out-of-scope w_root  rs1_data : $uint<32> 
      // done: WAR dependencies for addr
      // end:  	$volatile addr := ( $slice rs1_data 7 0 ) 
      // start: 	$call accessMem (0  addr rs2_data ) (dummy1 ) 
      //  file prog.linked.opt.aa, line 218
      $T[call_stmt_480_sample_start_] 
      $T[call_stmt_480_sample_completed_] 
      $T[call_stmt_480_update_start_] 
      $T[call_stmt_480_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // addr
      // Call input argument 2
      // rs2_data
      // start: Forward dependencies from addr to transition call_stmt_480_sample_start_
      // done: Forward dependencies from addr to transition call_stmt_480_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_480_sample_start_
      // done: Forward dependencies from rs2_data to transition call_stmt_480_sample_start_
      ;;[call_stmt_480_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_480_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_480_sample_start_ &-> (call_stmt_480_Sample)
      call_stmt_480_sample_completed_ <-& (call_stmt_480_Sample)
      call_stmt_480_sample_completed_ &-> ($null)
      call_stmt_480_update_start_ &-> (call_stmt_480_Update)
      call_stmt_480_update_completed_ <-& (call_stmt_480_Update)
      // Call output argument 0
      // (as target) dummy1
      // start: WAR dependencies for dummy1
      // done: WAR dependencies for dummy1
      // end: 	$call accessMem (0  addr rs2_data ) (dummy1 ) 
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 219
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_484_sample_start_] 
      $T[ADD_u8_u8_484_sample_completed_] 
      $T[ADD_u8_u8_484_update_start_] 
      $T[ADD_u8_u8_484_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_484_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_484_sample_start_
      ;;[ADD_u8_u8_484_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_484_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_484_sample_start_ &-> (ADD_u8_u8_484_Sample)
      ADD_u8_u8_484_sample_completed_ <-& (ADD_u8_u8_484_Sample)
      ADD_u8_u8_484_sample_completed_ &-> ($null)
      ADD_u8_u8_484_update_start_ &-> (ADD_u8_u8_484_Update)
      ADD_u8_u8_484_update_completed_ <-& (ADD_u8_u8_484_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_0
      //  call_stmt_480 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %store
    //  file prog.linked.opt.aa, line 212
    // 	$call accessMem (0  addr rs2_data ) (dummy1 ) 
    //  file prog.linked.opt.aa, line 218
    // 0 
    $constant $W[konst_476_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_483_wire_constant] : $int<8> := _b00000001// 1
    // 	$volatile addr := ( $slice rs1_data 7 0 ) 
    //  file prog.linked.opt.aa, line 217
    // addr
    $W[addr_475] : $int<8>
    // 	$call accessMem (0  addr rs2_data ) (dummy1 ) 
    //  file prog.linked.opt.aa, line 218
    // dummy1
    $W[dummy1_480] : $int<32>
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 219
    // next_pc
    // 	$volatile addr := ( $slice rs1_data 7 0 ) 
    //  file prog.linked.opt.aa, line 217
    // ( $slice rs1_data 7 0 ) 
    [:] [slice_474_inst] (rs1_data 7 0) (addr_475)  $flowthrough
    $delay slice_474_inst 0
    // 	$call accessMem (0  addr rs2_data ) (dummy1 ) 
    //  file prog.linked.opt.aa, line 218
    $call [call_stmt_480_call] $module accessMem(konst_476_wire_constant addr_475 rs2_data) (dummy1_480)  
    $delay call_stmt_480_call 6
    $buffering  $in call_stmt_480_call konst_476_wire_constant 1
    $buffering  $in call_stmt_480_call addr_475 1
    $buffering  $in call_stmt_480_call rs2_data 1
    $buffering  $out call_stmt_480_call dummy1_480 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 219
    // (pc + 1 )
    +[ADD_u8_u8_484_inst] (pc konst_483_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_484_inst next_pc 1
    $delay ADD_u8_u8_484_inst 1
  }
  // end data-path
  // 	$volatile addr := ( $slice rs1_data 7 0 ) 
  //  file prog.linked.opt.aa, line 217
  // rs1_data
  // 	$call accessMem (0  addr rs2_data ) (dummy1 ) 
  //  file prog.linked.opt.aa, line 218
  // addr
  // rs2_data
  call_stmt_480_call <=> (assign_stmt_475_to_assign_stmt_485/call_stmt_480_Sample/crr assign_stmt_475_to_assign_stmt_485/call_stmt_480_Update/ccr) (assign_stmt_475_to_assign_stmt_485/call_stmt_480_Sample/cra assign_stmt_475_to_assign_stmt_485/call_stmt_480_Update/cca)
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 219
  // (pc + 1 )
  // pc
  ADD_u8_u8_484_inst <=> (assign_stmt_475_to_assign_stmt_485/ADD_u8_u8_484_Sample/rr assign_stmt_475_to_assign_stmt_485/ADD_u8_u8_484_Update/cr) (assign_stmt_475_to_assign_stmt_485/ADD_u8_u8_484_Sample/ra assign_stmt_475_to_assign_stmt_485/ADD_u8_u8_484_Update/ca)
}
$module [sub] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %sub
  //  file prog.linked.opt.aa, line 221
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_497_to_assign_stmt_507] 
    {
      // start:  	output := (rs1_data - rs2_data)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 226
      // Source expression
      // (rs1_data - rs2_data)
      $T[SUB_u32_u32_496_sample_start_] 
      $T[SUB_u32_u32_496_sample_completed_] 
      $T[SUB_u32_u32_496_update_start_] 
      $T[SUB_u32_u32_496_update_completed_] 
      // rs1_data
      // rs2_data
      // start: Forward dependencies from rs1_data to transition SUB_u32_u32_496_sample_start_
      // done: Forward dependencies from rs1_data to transition SUB_u32_u32_496_sample_start_
      // start: Forward dependencies from rs2_data to transition SUB_u32_u32_496_sample_start_
      // done: Forward dependencies from rs2_data to transition SUB_u32_u32_496_sample_start_
      ;;[SUB_u32_u32_496_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[SUB_u32_u32_496_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      SUB_u32_u32_496_sample_start_ &-> (SUB_u32_u32_496_Sample)
      SUB_u32_u32_496_sample_completed_ <-& (SUB_u32_u32_496_Sample)
      SUB_u32_u32_496_sample_completed_ &-> ($null)
      SUB_u32_u32_496_update_start_ &-> (SUB_u32_u32_496_Update)
      SUB_u32_u32_496_update_completed_ <-& (SUB_u32_u32_496_Update)
      // Target expression
      // (as target) output
      // start: WAR dependencies for output
      // done: WAR dependencies for output
      // end:  	output := (rs1_data - rs2_data)// bits of buffering = 32. 
      // start: 	$call accessreg (0  rd output ) (dummy ) 
      //  file prog.linked.opt.aa, line 227
      $T[call_stmt_502_sample_start_] 
      $T[call_stmt_502_sample_completed_] 
      $T[call_stmt_502_update_start_] 
      $T[call_stmt_502_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rd
      // Call input argument 2
      // output
      // start: Forward dependencies from rd to transition call_stmt_502_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_502_sample_start_
      // start: Forward dependencies from output to transition call_stmt_502_sample_start_
      call_stmt_502_sample_start_ <-& (SUB_u32_u32_496_update_completed_)
      // done: Forward dependencies from output to transition call_stmt_502_sample_start_
      ;;[call_stmt_502_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_502_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_502_sample_start_ &-> (call_stmt_502_Sample)
      call_stmt_502_sample_completed_ <-& (call_stmt_502_Sample)
      call_stmt_502_sample_completed_ &-> ($null)
      call_stmt_502_update_start_ &-> (call_stmt_502_Update)
      call_stmt_502_update_completed_ <-& (call_stmt_502_Update)
      // Call output argument 0
      // (as target) dummy
      // start: WAR dependencies for dummy
      // done: WAR dependencies for dummy
      // end: 	$call accessreg (0  rd output ) (dummy ) 
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 228
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_506_sample_start_] 
      $T[ADD_u8_u8_506_sample_completed_] 
      $T[ADD_u8_u8_506_update_start_] 
      $T[ADD_u8_u8_506_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_506_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_506_sample_start_
      ;;[ADD_u8_u8_506_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_506_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_506_sample_start_ &-> (ADD_u8_u8_506_Sample)
      ADD_u8_u8_506_sample_completed_ <-& (ADD_u8_u8_506_Sample)
      ADD_u8_u8_506_sample_completed_ &-> ($null)
      ADD_u8_u8_506_update_start_ &-> (ADD_u8_u8_506_Update)
      ADD_u8_u8_506_update_completed_ <-& (ADD_u8_u8_506_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  call_stmt_502 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %sub
    //  file prog.linked.opt.aa, line 221
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 227
    // 0 
    $constant $W[konst_498_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_505_wire_constant] : $int<8> := _b00000001// 1
    // 	output := (rs1_data - rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 226
    // output
    $W[output_497] : $int<32>
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 227
    // dummy
    $W[dummy_502] : $int<32>
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 228
    // next_pc
    // 	output := (rs1_data - rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 226
    // (rs1_data - rs2_data)
    -[SUB_u32_u32_496_inst] (rs1_data rs2_data) (output_497)   
    $buffering  $out SUB_u32_u32_496_inst output_497 1
    $delay SUB_u32_u32_496_inst 1
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 227
    $call [call_stmt_502_call] $module accessreg(konst_498_wire_constant rd output_497) (dummy_502)  
    $delay call_stmt_502_call 6
    $buffering  $in call_stmt_502_call konst_498_wire_constant 1
    $buffering  $in call_stmt_502_call rd 1
    $buffering  $in call_stmt_502_call output_497 1
    $buffering  $out call_stmt_502_call dummy_502 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 228
    // (pc + 1 )
    +[ADD_u8_u8_506_inst] (pc konst_505_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_506_inst next_pc 1
    $delay ADD_u8_u8_506_inst 1
  }
  // end data-path
  // 	output := (rs1_data - rs2_data)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 226
  // (rs1_data - rs2_data)
  // rs1_data
  // rs2_data
  SUB_u32_u32_496_inst <=> (assign_stmt_497_to_assign_stmt_507/SUB_u32_u32_496_Sample/rr assign_stmt_497_to_assign_stmt_507/SUB_u32_u32_496_Update/cr) (assign_stmt_497_to_assign_stmt_507/SUB_u32_u32_496_Sample/ra assign_stmt_497_to_assign_stmt_507/SUB_u32_u32_496_Update/ca)
  // 	$call accessreg (0  rd output ) (dummy ) 
  //  file prog.linked.opt.aa, line 227
  // rd
  // output
  call_stmt_502_call <=> (assign_stmt_497_to_assign_stmt_507/call_stmt_502_Sample/crr assign_stmt_497_to_assign_stmt_507/call_stmt_502_Update/ccr) (assign_stmt_497_to_assign_stmt_507/call_stmt_502_Sample/cra assign_stmt_497_to_assign_stmt_507/call_stmt_502_Update/cca)
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 228
  // (pc + 1 )
  // pc
  ADD_u8_u8_506_inst <=> (assign_stmt_497_to_assign_stmt_507/ADD_u8_u8_506_Sample/rr assign_stmt_497_to_assign_stmt_507/ADD_u8_u8_506_Update/cr) (assign_stmt_497_to_assign_stmt_507/ADD_u8_u8_506_Sample/ra assign_stmt_497_to_assign_stmt_507/ADD_u8_u8_506_Update/ca)
}
$module [xnor_i] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %xnor_i
  //  file prog.linked.opt.aa, line 230
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_519_to_assign_stmt_529] 
    {
      // start:  	output := (rs1_data ~^ rs2_data)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 235
      // Source expression
      // (rs1_data ~^ rs2_data)
      $T[XOR_u32_u32_518_sample_start_] 
      $T[XOR_u32_u32_518_sample_completed_] 
      $T[XOR_u32_u32_518_update_start_] 
      $T[XOR_u32_u32_518_update_completed_] 
      // rs1_data
      // rs2_data
      // start: Forward dependencies from rs1_data to transition XOR_u32_u32_518_sample_start_
      // done: Forward dependencies from rs1_data to transition XOR_u32_u32_518_sample_start_
      // start: Forward dependencies from rs2_data to transition XOR_u32_u32_518_sample_start_
      // done: Forward dependencies from rs2_data to transition XOR_u32_u32_518_sample_start_
      ;;[XOR_u32_u32_518_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[XOR_u32_u32_518_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      XOR_u32_u32_518_sample_start_ &-> (XOR_u32_u32_518_Sample)
      XOR_u32_u32_518_sample_completed_ <-& (XOR_u32_u32_518_Sample)
      XOR_u32_u32_518_sample_completed_ &-> ($null)
      XOR_u32_u32_518_update_start_ &-> (XOR_u32_u32_518_Update)
      XOR_u32_u32_518_update_completed_ <-& (XOR_u32_u32_518_Update)
      // Target expression
      // (as target) output
      // start: WAR dependencies for output
      // done: WAR dependencies for output
      // end:  	output := (rs1_data ~^ rs2_data)// bits of buffering = 32. 
      // start: 	$call accessreg (0  rd output ) (dummy ) 
      //  file prog.linked.opt.aa, line 236
      $T[call_stmt_524_sample_start_] 
      $T[call_stmt_524_sample_completed_] 
      $T[call_stmt_524_update_start_] 
      $T[call_stmt_524_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rd
      // Call input argument 2
      // output
      // start: Forward dependencies from rd to transition call_stmt_524_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_524_sample_start_
      // start: Forward dependencies from output to transition call_stmt_524_sample_start_
      call_stmt_524_sample_start_ <-& (XOR_u32_u32_518_update_completed_)
      // done: Forward dependencies from output to transition call_stmt_524_sample_start_
      ;;[call_stmt_524_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_524_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_524_sample_start_ &-> (call_stmt_524_Sample)
      call_stmt_524_sample_completed_ <-& (call_stmt_524_Sample)
      call_stmt_524_sample_completed_ &-> ($null)
      call_stmt_524_update_start_ &-> (call_stmt_524_Update)
      call_stmt_524_update_completed_ <-& (call_stmt_524_Update)
      // Call output argument 0
      // (as target) dummy
      // start: WAR dependencies for dummy
      // done: WAR dependencies for dummy
      // end: 	$call accessreg (0  rd output ) (dummy ) 
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 237
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_528_sample_start_] 
      $T[ADD_u8_u8_528_sample_completed_] 
      $T[ADD_u8_u8_528_update_start_] 
      $T[ADD_u8_u8_528_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_528_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_528_sample_start_
      ;;[ADD_u8_u8_528_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_528_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_528_sample_start_ &-> (ADD_u8_u8_528_Sample)
      ADD_u8_u8_528_sample_completed_ <-& (ADD_u8_u8_528_Sample)
      ADD_u8_u8_528_sample_completed_ &-> ($null)
      ADD_u8_u8_528_update_start_ &-> (ADD_u8_u8_528_Update)
      ADD_u8_u8_528_update_completed_ <-& (ADD_u8_u8_528_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  call_stmt_524 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %xnor_i
    //  file prog.linked.opt.aa, line 230
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 236
    // 0 
    $constant $W[konst_520_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_527_wire_constant] : $int<8> := _b00000001// 1
    // 	output := (rs1_data ~^ rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 235
    // output
    $W[output_519] : $int<32>
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 236
    // dummy
    $W[dummy_524] : $int<32>
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 237
    // next_pc
    // 	output := (rs1_data ~^ rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 235
    // (rs1_data ~^ rs2_data)
    ~^[XOR_u32_u32_518_inst] (rs1_data rs2_data) (output_519)   
    $buffering  $out XOR_u32_u32_518_inst output_519 1
    $delay XOR_u32_u32_518_inst 1
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 236
    $call [call_stmt_524_call] $module accessreg(konst_520_wire_constant rd output_519) (dummy_524)  
    $delay call_stmt_524_call 6
    $buffering  $in call_stmt_524_call konst_520_wire_constant 1
    $buffering  $in call_stmt_524_call rd 1
    $buffering  $in call_stmt_524_call output_519 1
    $buffering  $out call_stmt_524_call dummy_524 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 237
    // (pc + 1 )
    +[ADD_u8_u8_528_inst] (pc konst_527_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_528_inst next_pc 1
    $delay ADD_u8_u8_528_inst 1
  }
  // end data-path
  // 	output := (rs1_data ~^ rs2_data)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 235
  // (rs1_data ~^ rs2_data)
  // rs1_data
  // rs2_data
  XOR_u32_u32_518_inst <=> (assign_stmt_519_to_assign_stmt_529/XOR_u32_u32_518_Sample/rr assign_stmt_519_to_assign_stmt_529/XOR_u32_u32_518_Update/cr) (assign_stmt_519_to_assign_stmt_529/XOR_u32_u32_518_Sample/ra assign_stmt_519_to_assign_stmt_529/XOR_u32_u32_518_Update/ca)
  // 	$call accessreg (0  rd output ) (dummy ) 
  //  file prog.linked.opt.aa, line 236
  // rd
  // output
  call_stmt_524_call <=> (assign_stmt_519_to_assign_stmt_529/call_stmt_524_Sample/crr assign_stmt_519_to_assign_stmt_529/call_stmt_524_Update/ccr) (assign_stmt_519_to_assign_stmt_529/call_stmt_524_Sample/cra assign_stmt_519_to_assign_stmt_529/call_stmt_524_Update/cca)
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 237
  // (pc + 1 )
  // pc
  ADD_u8_u8_528_inst <=> (assign_stmt_519_to_assign_stmt_529/ADD_u8_u8_528_Sample/rr assign_stmt_519_to_assign_stmt_529/ADD_u8_u8_528_Update/cr) (assign_stmt_519_to_assign_stmt_529/ADD_u8_u8_528_Sample/ra assign_stmt_519_to_assign_stmt_529/ADD_u8_u8_528_Update/ca)
}
$module [xor_i] 
{
  $in rs1_data:$int<32>
  // can point into 
  rs2_data:$int<32>
  // can point into 
  rd:$int<8>
  // can point into 
  pc:$int<8>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %xor_i
  //  file prog.linked.opt.aa, line 239
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_541_to_assign_stmt_551] 
    {
      // start:  	output := (rs1_data ^ rs2_data)// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 244
      // Source expression
      // (rs1_data ^ rs2_data)
      $T[XOR_u32_u32_540_sample_start_] 
      $T[XOR_u32_u32_540_sample_completed_] 
      $T[XOR_u32_u32_540_update_start_] 
      $T[XOR_u32_u32_540_update_completed_] 
      // rs1_data
      // rs2_data
      // start: Forward dependencies from rs1_data to transition XOR_u32_u32_540_sample_start_
      // done: Forward dependencies from rs1_data to transition XOR_u32_u32_540_sample_start_
      // start: Forward dependencies from rs2_data to transition XOR_u32_u32_540_sample_start_
      // done: Forward dependencies from rs2_data to transition XOR_u32_u32_540_sample_start_
      ;;[XOR_u32_u32_540_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[XOR_u32_u32_540_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      XOR_u32_u32_540_sample_start_ &-> (XOR_u32_u32_540_Sample)
      XOR_u32_u32_540_sample_completed_ <-& (XOR_u32_u32_540_Sample)
      XOR_u32_u32_540_sample_completed_ &-> ($null)
      XOR_u32_u32_540_update_start_ &-> (XOR_u32_u32_540_Update)
      XOR_u32_u32_540_update_completed_ <-& (XOR_u32_u32_540_Update)
      // Target expression
      // (as target) output
      // start: WAR dependencies for output
      // done: WAR dependencies for output
      // end:  	output := (rs1_data ^ rs2_data)// bits of buffering = 32. 
      // start: 	$call accessreg (0  rd output ) (dummy ) 
      //  file prog.linked.opt.aa, line 245
      $T[call_stmt_546_sample_start_] 
      $T[call_stmt_546_sample_completed_] 
      $T[call_stmt_546_update_start_] 
      $T[call_stmt_546_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rd
      // Call input argument 2
      // output
      // start: Forward dependencies from rd to transition call_stmt_546_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_546_sample_start_
      // start: Forward dependencies from output to transition call_stmt_546_sample_start_
      call_stmt_546_sample_start_ <-& (XOR_u32_u32_540_update_completed_)
      // done: Forward dependencies from output to transition call_stmt_546_sample_start_
      ;;[call_stmt_546_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_546_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_546_sample_start_ &-> (call_stmt_546_Sample)
      call_stmt_546_sample_completed_ <-& (call_stmt_546_Sample)
      call_stmt_546_sample_completed_ &-> ($null)
      call_stmt_546_update_start_ &-> (call_stmt_546_Update)
      call_stmt_546_update_completed_ <-& (call_stmt_546_Update)
      // Call output argument 0
      // (as target) dummy
      // start: WAR dependencies for dummy
      // done: WAR dependencies for dummy
      // end: 	$call accessreg (0  rd output ) (dummy ) 
      // start:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 246
      // Source expression
      // (pc + 1 )
      $T[ADD_u8_u8_550_sample_start_] 
      $T[ADD_u8_u8_550_sample_completed_] 
      $T[ADD_u8_u8_550_update_start_] 
      $T[ADD_u8_u8_550_update_completed_] 
      // pc
      // start: Forward dependencies from pc to transition ADD_u8_u8_550_sample_start_
      // done: Forward dependencies from pc to transition ADD_u8_u8_550_sample_start_
      ;;[ADD_u8_u8_550_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u8_u8_550_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u8_u8_550_sample_start_ &-> (ADD_u8_u8_550_Sample)
      ADD_u8_u8_550_sample_completed_ <-& (ADD_u8_u8_550_Sample)
      ADD_u8_u8_550_sample_completed_ &-> ($null)
      ADD_u8_u8_550_update_start_ &-> (ADD_u8_u8_550_Update)
      ADD_u8_u8_550_update_completed_ <-& (ADD_u8_u8_550_Update)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := (pc + 1 )// bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_2
      //  call_stmt_546 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %xor_i
    //  file prog.linked.opt.aa, line 239
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 245
    // 0 
    $constant $W[konst_542_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_549_wire_constant] : $int<8> := _b00000001// 1
    // 	output := (rs1_data ^ rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 244
    // output
    $W[output_541] : $int<32>
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 245
    // dummy
    $W[dummy_546] : $int<32>
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 246
    // next_pc
    // 	output := (rs1_data ^ rs2_data)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 244
    // (rs1_data ^ rs2_data)
    ^[XOR_u32_u32_540_inst] (rs1_data rs2_data) (output_541)   
    $buffering  $out XOR_u32_u32_540_inst output_541 1
    $delay XOR_u32_u32_540_inst 1
    // 	$call accessreg (0  rd output ) (dummy ) 
    //  file prog.linked.opt.aa, line 245
    $call [call_stmt_546_call] $module accessreg(konst_542_wire_constant rd output_541) (dummy_546)  
    $delay call_stmt_546_call 6
    $buffering  $in call_stmt_546_call konst_542_wire_constant 1
    $buffering  $in call_stmt_546_call rd 1
    $buffering  $in call_stmt_546_call output_541 1
    $buffering  $out call_stmt_546_call dummy_546 1
    // 	next_pc := (pc + 1 )// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 246
    // (pc + 1 )
    +[ADD_u8_u8_550_inst] (pc konst_549_wire_constant) (next_pc)   
    $buffering  $out ADD_u8_u8_550_inst next_pc 1
    $delay ADD_u8_u8_550_inst 1
  }
  // end data-path
  // 	output := (rs1_data ^ rs2_data)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 244
  // (rs1_data ^ rs2_data)
  // rs1_data
  // rs2_data
  XOR_u32_u32_540_inst <=> (assign_stmt_541_to_assign_stmt_551/XOR_u32_u32_540_Sample/rr assign_stmt_541_to_assign_stmt_551/XOR_u32_u32_540_Update/cr) (assign_stmt_541_to_assign_stmt_551/XOR_u32_u32_540_Sample/ra assign_stmt_541_to_assign_stmt_551/XOR_u32_u32_540_Update/ca)
  // 	$call accessreg (0  rd output ) (dummy ) 
  //  file prog.linked.opt.aa, line 245
  // rd
  // output
  call_stmt_546_call <=> (assign_stmt_541_to_assign_stmt_551/call_stmt_546_Sample/crr assign_stmt_541_to_assign_stmt_551/call_stmt_546_Update/ccr) (assign_stmt_541_to_assign_stmt_551/call_stmt_546_Sample/cra assign_stmt_541_to_assign_stmt_551/call_stmt_546_Update/cca)
  // 	next_pc := (pc + 1 )// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 246
  // (pc + 1 )
  // pc
  ADD_u8_u8_550_inst <=> (assign_stmt_541_to_assign_stmt_551/ADD_u8_u8_550_Sample/rr assign_stmt_541_to_assign_stmt_551/ADD_u8_u8_550_Update/cr) (assign_stmt_541_to_assign_stmt_551/ADD_u8_u8_550_Sample/ra assign_stmt_541_to_assign_stmt_551/ADD_u8_u8_550_Update/ca)
}
$module [try] 
{
  $in pc:$int<8>
  // can point into 
  inst:$int<32>
  // can point into 
  $out next_pc:$int<8>
  // can point into 
  // pipe-declarations for block %try
  //  file prog.linked.opt.aa, line 248
  // memory-space 1 is written into.
  // memory-space 1 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_560_to_assign_stmt_884] 
    {
      // start: WAR dependencies for op
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for op
      // start:  	$volatile op := ( $slice inst 31 24 ) 
      //  file prog.linked.opt.aa, line 253
      // volatile! 
      // Source expression
      // ( $slice inst 31 24 ) 
      // inst
      // Target expression
      // (as target) op
      // start: WAR dependencies for op
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for op
      // end:  	$volatile op := ( $slice inst 31 24 ) 
      // start: WAR dependencies for rs1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for rs1
      // start:  	$volatile rs1 := ( $slice inst 23 16 ) 
      //  file prog.linked.opt.aa, line 254
      // volatile! 
      // Source expression
      // ( $slice inst 23 16 ) 
      // inst
      // Target expression
      // (as target) rs1
      // start: WAR dependencies for rs1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for rs1
      // end:  	$volatile rs1 := ( $slice inst 23 16 ) 
      // start: WAR dependencies for rs2
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for rs2
      // start:  	$volatile rs2 := ( $slice inst 15 8 ) 
      //  file prog.linked.opt.aa, line 255
      // volatile! 
      // Source expression
      // ( $slice inst 15 8 ) 
      // inst
      // Target expression
      // (as target) rs2
      // start: WAR dependencies for rs2
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for rs2
      // end:  	$volatile rs2 := ( $slice inst 15 8 ) 
      // start: WAR dependencies for rd
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for rd
      // start:  	$volatile rd := ( $slice inst 7 0 ) 
      //  file prog.linked.opt.aa, line 256
      // volatile! 
      // Source expression
      // ( $slice inst 7 0 ) 
      // inst
      // Target expression
      // (as target) rd
      // start: WAR dependencies for rd
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for rd
      // end:  	$volatile rd := ( $slice inst 7 0 ) 
      // start: WAR dependencies for halt1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for halt1
      // start:  	$volatile halt1 := (op == 1 )
      //  file prog.linked.opt.aa, line 257
      // volatile! 
      // Source expression
      // (op == 1 )
      // op
      // Target expression
      // (as target) halt1
      // start: WAR dependencies for halt1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for halt1
      // end:  	$volatile halt1 := (op == 1 )
      // start: WAR dependencies for sbir1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for sbir1
      // start:  	$volatile sbir1 := (op == 2 )
      //  file prog.linked.opt.aa, line 258
      // volatile! 
      // Source expression
      // (op == 2 )
      // op
      // Target expression
      // (as target) sbir1
      // start: WAR dependencies for sbir1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for sbir1
      // end:  	$volatile sbir1 := (op == 2 )
      // start: WAR dependencies for load1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for load1
      // start:  	$volatile load1 := (op == 3 )
      //  file prog.linked.opt.aa, line 259
      // volatile! 
      // Source expression
      // (op == 3 )
      // op
      // Target expression
      // (as target) load1
      // start: WAR dependencies for load1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for load1
      // end:  	$volatile load1 := (op == 3 )
      // start: WAR dependencies for store1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for store1
      // start:  	$volatile store1 := (op == 4 )
      //  file prog.linked.opt.aa, line 260
      // volatile! 
      // Source expression
      // (op == 4 )
      // op
      // Target expression
      // (as target) store1
      // start: WAR dependencies for store1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for store1
      // end:  	$volatile store1 := (op == 4 )
      // start: WAR dependencies for and1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for and1
      // start:  	$volatile and1 := (op == 5 )
      //  file prog.linked.opt.aa, line 261
      // volatile! 
      // Source expression
      // (op == 5 )
      // op
      // Target expression
      // (as target) and1
      // start: WAR dependencies for and1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for and1
      // end:  	$volatile and1 := (op == 5 )
      // start: WAR dependencies for or1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for or1
      // start:  	$volatile or1 := (op == 6 )
      //  file prog.linked.opt.aa, line 262
      // volatile! 
      // Source expression
      // (op == 6 )
      // op
      // Target expression
      // (as target) or1
      // start: WAR dependencies for or1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for or1
      // end:  	$volatile or1 := (op == 6 )
      // start: WAR dependencies for xnor1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for xnor1
      // start:  	$volatile xnor1 := (op == 7 )
      //  file prog.linked.opt.aa, line 263
      // volatile! 
      // Source expression
      // (op == 7 )
      // op
      // Target expression
      // (as target) xnor1
      // start: WAR dependencies for xnor1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for xnor1
      // end:  	$volatile xnor1 := (op == 7 )
      // start: WAR dependencies for xor1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for xor1
      // start:  	$volatile xor1 := (op == 8 )
      //  file prog.linked.opt.aa, line 264
      // volatile! 
      // Source expression
      // (op == 8 )
      // op
      // Target expression
      // (as target) xor1
      // start: WAR dependencies for xor1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for xor1
      // end:  	$volatile xor1 := (op == 8 )
      // start: WAR dependencies for add1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for add1
      // start:  	$volatile add1 := (op == 9 )
      //  file prog.linked.opt.aa, line 265
      // volatile! 
      // Source expression
      // (op == 9 )
      // op
      // Target expression
      // (as target) add1
      // start: WAR dependencies for add1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for add1
      // end:  	$volatile add1 := (op == 9 )
      // start: WAR dependencies for sub1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for sub1
      // start:  	$volatile sub1 := (op == 10 )
      //  file prog.linked.opt.aa, line 266
      // volatile! 
      // Source expression
      // (op == 10 )
      // op
      // Target expression
      // (as target) sub1
      // start: WAR dependencies for sub1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for sub1
      // end:  	$volatile sub1 := (op == 10 )
      // start: WAR dependencies for sll1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for sll1
      // start:  	$volatile sll1 := (op == 11 )
      //  file prog.linked.opt.aa, line 267
      // volatile! 
      // Source expression
      // (op == 11 )
      // op
      // Target expression
      // (as target) sll1
      // start: WAR dependencies for sll1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for sll1
      // end:  	$volatile sll1 := (op == 11 )
      // start: WAR dependencies for srl1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for srl1
      // start:  	$volatile srl1 := (op == 12 )
      //  file prog.linked.opt.aa, line 268
      // volatile! 
      // Source expression
      // (op == 12 )
      // op
      // Target expression
      // (as target) srl1
      // start: WAR dependencies for srl1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for srl1
      // end:  	$volatile srl1 := (op == 12 )
      // start: WAR dependencies for sra1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for sra1
      // start:  	$volatile sra1 := (op == 13 )
      //  file prog.linked.opt.aa, line 269
      // volatile! 
      // Source expression
      // (op == 13 )
      // op
      // Target expression
      // (as target) sra1
      // start: WAR dependencies for sra1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for sra1
      // end:  	$volatile sra1 := (op == 13 )
      // start: WAR dependencies for bz1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for bz1
      // start:  	$volatile bz1 := (op == 14 )
      //  file prog.linked.opt.aa, line 270
      // volatile! 
      // Source expression
      // (op == 14 )
      // op
      // Target expression
      // (as target) bz1
      // start: WAR dependencies for bz1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for bz1
      // end:  	$volatile bz1 := (op == 14 )
      // start: WAR dependencies for bn1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for bn1
      // start:  	$volatile bn1 := (op == 15 )
      //  file prog.linked.opt.aa, line 271
      // volatile! 
      // Source expression
      // (op == 15 )
      // op
      // Target expression
      // (as target) bn1
      // start: WAR dependencies for bn1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for bn1
      // end:  	$volatile bn1 := (op == 15 )
      // start: WAR dependencies for call1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for call1
      // start:  	$volatile call1 := (op == 16 )
      //  file prog.linked.opt.aa, line 272
      // volatile! 
      // Source expression
      // (op == 16 )
      // op
      // Target expression
      // (as target) call1
      // start: WAR dependencies for call1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for call1
      // end:  	$volatile call1 := (op == 16 )
      // start: WAR dependencies for jmp1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for jmp1
      // start:  	$volatile jmp1 := (op == 17 )
      //  file prog.linked.opt.aa, line 273
      // volatile! 
      // Source expression
      // (op == 17 )
      // op
      // Target expression
      // (as target) jmp1
      // start: WAR dependencies for jmp1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for jmp1
      // end:  	$volatile jmp1 := (op == 17 )
      // start: WAR dependencies for cmp1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for cmp1
      // start:  	$volatile cmp1 := (op == 18 )
      //  file prog.linked.opt.aa, line 274
      // volatile! 
      // Source expression
      // (op == 18 )
      // op
      // Target expression
      // (as target) cmp1
      // start: WAR dependencies for cmp1
      // ignored out-of-scope w_root  inst : $uint<32> 
      // done: WAR dependencies for cmp1
      // end:  	$volatile cmp1 := (op == 18 )
      // start: 	$call accessreg (1  rs1 0  ) (rs1_data ) 
      //  file prog.linked.opt.aa, line 275
      $T[call_stmt_667_sample_start_] 
      $T[call_stmt_667_sample_completed_] 
      $T[call_stmt_667_update_start_] 
      $T[call_stmt_667_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rs1
      // Call input argument 2
      // start: Forward dependencies from rs1 to transition call_stmt_667_sample_start_
      // done: Forward dependencies from rs1 to transition call_stmt_667_sample_start_
      ;;[call_stmt_667_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_667_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_667_sample_start_ &-> (call_stmt_667_Sample)
      call_stmt_667_sample_completed_ <-& (call_stmt_667_Sample)
      call_stmt_667_sample_completed_ &-> ($null)
      call_stmt_667_update_start_ &-> (call_stmt_667_Update)
      call_stmt_667_update_completed_ <-& (call_stmt_667_Update)
      // Call output argument 0
      // (as target) rs1_data
      // start: WAR dependencies for rs1_data
      // done: WAR dependencies for rs1_data
      // end: 	$call accessreg (1  rs1 0  ) (rs1_data ) 
      // start: 	$call accessreg (1  rs2 0  ) (rs2_data ) 
      //  file prog.linked.opt.aa, line 276
      $T[call_stmt_672_sample_start_] 
      $T[call_stmt_672_sample_completed_] 
      $T[call_stmt_672_update_start_] 
      $T[call_stmt_672_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // rs2
      // Call input argument 2
      // start: Forward dependencies from rs2 to transition call_stmt_672_sample_start_
      // done: Forward dependencies from rs2 to transition call_stmt_672_sample_start_
      ;;[call_stmt_672_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_672_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_672_sample_start_ &-> (call_stmt_672_Sample)
      call_stmt_672_sample_completed_ <-& (call_stmt_672_Sample)
      call_stmt_672_sample_completed_ &-> ($null)
      call_stmt_672_update_start_ &-> (call_stmt_672_Update)
      call_stmt_672_update_completed_ <-& (call_stmt_672_Update)
      // Call output argument 0
      // (as target) rs2_data
      // start: WAR dependencies for rs2_data
      // done: WAR dependencies for rs2_data
      // end: 	$call accessreg (1  rs2 0  ) (rs2_data ) 
      // start: 	$guard (halt1) $call halt (pc ) (next_pc1 ) 
      //  file prog.linked.opt.aa, line 277
      $T[call_stmt_676_sample_start_] 
      $T[call_stmt_676_sample_completed_] 
      $T[call_stmt_676_update_start_] 
      $T[call_stmt_676_update_completed_] 
      // Guard expression
      // halt1
      // start: Forward dependencies from halt1 to transition call_stmt_676_sample_start_
      // done: Forward dependencies from halt1 to transition call_stmt_676_sample_start_
      // Call input argument 0
      // pc
      // start: Forward dependencies from pc to transition call_stmt_676_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_676_sample_start_
      ;;[call_stmt_676_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_676_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_676_sample_start_ &-> (call_stmt_676_Sample)
      call_stmt_676_sample_completed_ <-& (call_stmt_676_Sample)
      call_stmt_676_sample_completed_ &-> ($null)
      call_stmt_676_update_start_ &-> (call_stmt_676_Update)
      call_stmt_676_update_completed_ <-& (call_stmt_676_Update)
      // Call output argument 0
      // (as target) next_pc1
      $T[STORE_next_pc1_675_sample_start_] 
      $T[STORE_next_pc1_675_sample_completed_] 
      $T[STORE_next_pc1_675_update_start_] 
      $T[STORE_next_pc1_675_update_completed_] 
      // Guard dependency for expression STORE_next_pc1_675 with guard R_halt1_673
      // root inst not in visited_elements
      // next_pc1
      $T[STORE_next_pc1_675_word_address_calculated] 
      $T[STORE_next_pc1_675_root_address_calculated] 
      STORE_next_pc1_675_word_address_calculated <-& (STORE_next_pc1_675_root_address_calculated)
      ;;[STORE_next_pc1_675_Sample] 
      {
        ;;[STORE_next_pc1_675_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_next_pc1_675_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_next_pc1_675_sample_start_ <-& (STORE_next_pc1_675_word_address_calculated)
      STORE_next_pc1_675_sample_start_ &-> (STORE_next_pc1_675_Sample)
      STORE_next_pc1_675_sample_completed_ <-& (STORE_next_pc1_675_Sample)
      STORE_next_pc1_675_sample_completed_ &-> ($null)
      STORE_next_pc1_675_update_start_ &-> (STORE_next_pc1_675_Update)
      STORE_next_pc1_675_update_completed_ <-& (STORE_next_pc1_675_Update)
      STORE_next_pc1_675_sample_start_ <-& (call_stmt_676_update_completed_)
      // end: 	$guard (halt1) $call halt (pc ) (next_pc1 ) 
      // start: 	$guard (sbir1) $call sbir (rs1 rd pc ) (next_pc2 ) 
      //  file prog.linked.opt.aa, line 278
      $T[call_stmt_682_sample_start_] 
      $T[call_stmt_682_sample_completed_] 
      $T[call_stmt_682_update_start_] 
      $T[call_stmt_682_update_completed_] 
      // Guard expression
      // sbir1
      // start: Forward dependencies from sbir1 to transition call_stmt_682_sample_start_
      // done: Forward dependencies from sbir1 to transition call_stmt_682_sample_start_
      // Call input argument 0
      // rs1
      // Call input argument 1
      // rd
      // Call input argument 2
      // pc
      // start: Forward dependencies from rs1 to transition call_stmt_682_sample_start_
      // done: Forward dependencies from rs1 to transition call_stmt_682_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_682_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_682_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_682_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_682_sample_start_
      ;;[call_stmt_682_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_682_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_682_sample_start_ &-> (call_stmt_682_Sample)
      call_stmt_682_sample_completed_ <-& (call_stmt_682_Sample)
      call_stmt_682_sample_completed_ &-> ($null)
      call_stmt_682_update_start_ &-> (call_stmt_682_Update)
      call_stmt_682_update_completed_ <-& (call_stmt_682_Update)
      // Call output argument 0
      // (as target) next_pc2
      // start: WAR dependencies for next_pc2
      // done: WAR dependencies for next_pc2
      // end: 	$guard (sbir1) $call sbir (rs1 rd pc ) (next_pc2 ) 
      // start: 	$guard (load1) $call load (rs1_data rd pc ) (next_pc3 ) 
      //  file prog.linked.opt.aa, line 279
      $T[call_stmt_688_sample_start_] 
      $T[call_stmt_688_sample_completed_] 
      $T[call_stmt_688_update_start_] 
      $T[call_stmt_688_update_completed_] 
      // Guard expression
      // load1
      // start: Forward dependencies from load1 to transition call_stmt_688_sample_start_
      // done: Forward dependencies from load1 to transition call_stmt_688_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rd
      // Call input argument 2
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_688_sample_start_
      call_stmt_688_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_688_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_688_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_688_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_688_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_688_sample_start_
      ;;[call_stmt_688_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_688_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_688_sample_start_ &-> (call_stmt_688_Sample)
      call_stmt_688_sample_completed_ <-& (call_stmt_688_Sample)
      call_stmt_688_sample_completed_ &-> ($null)
      call_stmt_688_update_start_ &-> (call_stmt_688_Update)
      call_stmt_688_update_completed_ <-& (call_stmt_688_Update)
      // Call output argument 0
      // (as target) next_pc3
      // start: WAR dependencies for next_pc3
      // done: WAR dependencies for next_pc3
      // end: 	$guard (load1) $call load (rs1_data rd pc ) (next_pc3 ) 
      // start: 	$guard (store1) $call store (rs1_data rs2_data pc ) (next_pc4 ) 
      //  file prog.linked.opt.aa, line 280
      $T[call_stmt_694_sample_start_] 
      $T[call_stmt_694_sample_completed_] 
      $T[call_stmt_694_update_start_] 
      $T[call_stmt_694_update_completed_] 
      // Guard expression
      // store1
      // start: Forward dependencies from store1 to transition call_stmt_694_sample_start_
      // done: Forward dependencies from store1 to transition call_stmt_694_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_694_sample_start_
      call_stmt_694_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_694_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_694_sample_start_
      call_stmt_694_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_694_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_694_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_694_sample_start_
      ;;[call_stmt_694_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_694_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_694_sample_start_ &-> (call_stmt_694_Sample)
      call_stmt_694_sample_completed_ <-& (call_stmt_694_Sample)
      call_stmt_694_sample_completed_ &-> ($null)
      call_stmt_694_update_start_ &-> (call_stmt_694_Update)
      call_stmt_694_update_completed_ <-& (call_stmt_694_Update)
      // Call output argument 0
      // (as target) next_pc4
      // start: WAR dependencies for next_pc4
      // done: WAR dependencies for next_pc4
      // end: 	$guard (store1) $call store (rs1_data rs2_data pc ) (next_pc4 ) 
      // start: 	$guard (and1) $call and_i (rs1_data rs2_data rd pc ) (next_pc5 ) 
      //  file prog.linked.opt.aa, line 281
      $T[call_stmt_701_sample_start_] 
      $T[call_stmt_701_sample_completed_] 
      $T[call_stmt_701_update_start_] 
      $T[call_stmt_701_update_completed_] 
      // Guard expression
      // and1
      // start: Forward dependencies from and1 to transition call_stmt_701_sample_start_
      // done: Forward dependencies from and1 to transition call_stmt_701_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // rd
      // Call input argument 3
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_701_sample_start_
      call_stmt_701_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_701_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_701_sample_start_
      call_stmt_701_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_701_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_701_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_701_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_701_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_701_sample_start_
      ;;[call_stmt_701_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_701_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_701_sample_start_ &-> (call_stmt_701_Sample)
      call_stmt_701_sample_completed_ <-& (call_stmt_701_Sample)
      call_stmt_701_sample_completed_ &-> ($null)
      call_stmt_701_update_start_ &-> (call_stmt_701_Update)
      call_stmt_701_update_completed_ <-& (call_stmt_701_Update)
      // Call output argument 0
      // (as target) next_pc5
      // start: WAR dependencies for next_pc5
      // done: WAR dependencies for next_pc5
      // end: 	$guard (and1) $call and_i (rs1_data rs2_data rd pc ) (next_pc5 ) 
      // start: 	$guard (or1) $call or_i (rs1_data rs2_data rd pc ) (next_pc6 ) 
      //  file prog.linked.opt.aa, line 282
      $T[call_stmt_708_sample_start_] 
      $T[call_stmt_708_sample_completed_] 
      $T[call_stmt_708_update_start_] 
      $T[call_stmt_708_update_completed_] 
      // Guard expression
      // or1
      // start: Forward dependencies from or1 to transition call_stmt_708_sample_start_
      // done: Forward dependencies from or1 to transition call_stmt_708_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // rd
      // Call input argument 3
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_708_sample_start_
      call_stmt_708_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_708_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_708_sample_start_
      call_stmt_708_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_708_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_708_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_708_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_708_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_708_sample_start_
      ;;[call_stmt_708_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_708_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_708_sample_start_ &-> (call_stmt_708_Sample)
      call_stmt_708_sample_completed_ <-& (call_stmt_708_Sample)
      call_stmt_708_sample_completed_ &-> ($null)
      call_stmt_708_update_start_ &-> (call_stmt_708_Update)
      call_stmt_708_update_completed_ <-& (call_stmt_708_Update)
      // Call output argument 0
      // (as target) next_pc6
      // start: WAR dependencies for next_pc6
      // done: WAR dependencies for next_pc6
      // end: 	$guard (or1) $call or_i (rs1_data rs2_data rd pc ) (next_pc6 ) 
      // start: 	$guard (xnor1) $call xnor_i (rs1_data rs2_data rd pc ) (next_pc7 ) 
      //  file prog.linked.opt.aa, line 283
      $T[call_stmt_715_sample_start_] 
      $T[call_stmt_715_sample_completed_] 
      $T[call_stmt_715_update_start_] 
      $T[call_stmt_715_update_completed_] 
      // Guard expression
      // xnor1
      // start: Forward dependencies from xnor1 to transition call_stmt_715_sample_start_
      // done: Forward dependencies from xnor1 to transition call_stmt_715_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // rd
      // Call input argument 3
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_715_sample_start_
      call_stmt_715_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_715_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_715_sample_start_
      call_stmt_715_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_715_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_715_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_715_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_715_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_715_sample_start_
      ;;[call_stmt_715_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_715_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_715_sample_start_ &-> (call_stmt_715_Sample)
      call_stmt_715_sample_completed_ <-& (call_stmt_715_Sample)
      call_stmt_715_sample_completed_ &-> ($null)
      call_stmt_715_update_start_ &-> (call_stmt_715_Update)
      call_stmt_715_update_completed_ <-& (call_stmt_715_Update)
      // Call output argument 0
      // (as target) next_pc7
      // start: WAR dependencies for next_pc7
      // done: WAR dependencies for next_pc7
      // end: 	$guard (xnor1) $call xnor_i (rs1_data rs2_data rd pc ) (next_pc7 ) 
      // start: 	$guard (xor1) $call xor_i (rs1_data rs2_data rd pc ) (next_pc8 ) 
      //  file prog.linked.opt.aa, line 284
      $T[call_stmt_722_sample_start_] 
      $T[call_stmt_722_sample_completed_] 
      $T[call_stmt_722_update_start_] 
      $T[call_stmt_722_update_completed_] 
      // Guard expression
      // xor1
      // start: Forward dependencies from xor1 to transition call_stmt_722_sample_start_
      // done: Forward dependencies from xor1 to transition call_stmt_722_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // rd
      // Call input argument 3
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_722_sample_start_
      call_stmt_722_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_722_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_722_sample_start_
      call_stmt_722_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_722_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_722_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_722_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_722_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_722_sample_start_
      ;;[call_stmt_722_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_722_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_722_sample_start_ &-> (call_stmt_722_Sample)
      call_stmt_722_sample_completed_ <-& (call_stmt_722_Sample)
      call_stmt_722_sample_completed_ &-> ($null)
      call_stmt_722_update_start_ &-> (call_stmt_722_Update)
      call_stmt_722_update_completed_ <-& (call_stmt_722_Update)
      // Call output argument 0
      // (as target) next_pc8
      // start: WAR dependencies for next_pc8
      // done: WAR dependencies for next_pc8
      // end: 	$guard (xor1) $call xor_i (rs1_data rs2_data rd pc ) (next_pc8 ) 
      // start: 	$guard (add1) $call add (rs1_data rs2_data rd pc ) (next_pc9 ) 
      //  file prog.linked.opt.aa, line 285
      $T[call_stmt_729_sample_start_] 
      $T[call_stmt_729_sample_completed_] 
      $T[call_stmt_729_update_start_] 
      $T[call_stmt_729_update_completed_] 
      // Guard expression
      // add1
      // start: Forward dependencies from add1 to transition call_stmt_729_sample_start_
      // done: Forward dependencies from add1 to transition call_stmt_729_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // rd
      // Call input argument 3
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_729_sample_start_
      call_stmt_729_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_729_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_729_sample_start_
      call_stmt_729_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_729_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_729_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_729_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_729_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_729_sample_start_
      ;;[call_stmt_729_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_729_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_729_sample_start_ &-> (call_stmt_729_Sample)
      call_stmt_729_sample_completed_ <-& (call_stmt_729_Sample)
      call_stmt_729_sample_completed_ &-> ($null)
      call_stmt_729_update_start_ &-> (call_stmt_729_Update)
      call_stmt_729_update_completed_ <-& (call_stmt_729_Update)
      // Call output argument 0
      // (as target) next_pc9
      // start: WAR dependencies for next_pc9
      // done: WAR dependencies for next_pc9
      // end: 	$guard (add1) $call add (rs1_data rs2_data rd pc ) (next_pc9 ) 
      // start: 	$guard (sub1) $call sub (rs1_data rs2_data rd pc ) (next_pc10 ) 
      //  file prog.linked.opt.aa, line 286
      $T[call_stmt_736_sample_start_] 
      $T[call_stmt_736_sample_completed_] 
      $T[call_stmt_736_update_start_] 
      $T[call_stmt_736_update_completed_] 
      // Guard expression
      // sub1
      // start: Forward dependencies from sub1 to transition call_stmt_736_sample_start_
      // done: Forward dependencies from sub1 to transition call_stmt_736_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // rd
      // Call input argument 3
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_736_sample_start_
      call_stmt_736_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_736_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_736_sample_start_
      call_stmt_736_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_736_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_736_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_736_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_736_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_736_sample_start_
      ;;[call_stmt_736_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_736_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_736_sample_start_ &-> (call_stmt_736_Sample)
      call_stmt_736_sample_completed_ <-& (call_stmt_736_Sample)
      call_stmt_736_sample_completed_ &-> ($null)
      call_stmt_736_update_start_ &-> (call_stmt_736_Update)
      call_stmt_736_update_completed_ <-& (call_stmt_736_Update)
      // Call output argument 0
      // (as target) next_pc10
      // start: WAR dependencies for next_pc10
      // done: WAR dependencies for next_pc10
      // end: 	$guard (sub1) $call sub (rs1_data rs2_data rd pc ) (next_pc10 ) 
      // start: 	$guard (sll1) $call sll_i (rs1_data rs2_data rd pc ) (next_pc11 ) 
      //  file prog.linked.opt.aa, line 287
      $T[call_stmt_743_sample_start_] 
      $T[call_stmt_743_sample_completed_] 
      $T[call_stmt_743_update_start_] 
      $T[call_stmt_743_update_completed_] 
      // Guard expression
      // sll1
      // start: Forward dependencies from sll1 to transition call_stmt_743_sample_start_
      // done: Forward dependencies from sll1 to transition call_stmt_743_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // rd
      // Call input argument 3
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_743_sample_start_
      call_stmt_743_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_743_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_743_sample_start_
      call_stmt_743_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_743_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_743_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_743_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_743_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_743_sample_start_
      ;;[call_stmt_743_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_743_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_743_sample_start_ &-> (call_stmt_743_Sample)
      call_stmt_743_sample_completed_ <-& (call_stmt_743_Sample)
      call_stmt_743_sample_completed_ &-> ($null)
      call_stmt_743_update_start_ &-> (call_stmt_743_Update)
      call_stmt_743_update_completed_ <-& (call_stmt_743_Update)
      // Call output argument 0
      // (as target) next_pc11
      // start: WAR dependencies for next_pc11
      // done: WAR dependencies for next_pc11
      // end: 	$guard (sll1) $call sll_i (rs1_data rs2_data rd pc ) (next_pc11 ) 
      // start: 	$guard (srl1) $call srl_i (rs1_data rs2_data rd pc ) (next_pc12 ) 
      //  file prog.linked.opt.aa, line 288
      $T[call_stmt_750_sample_start_] 
      $T[call_stmt_750_sample_completed_] 
      $T[call_stmt_750_update_start_] 
      $T[call_stmt_750_update_completed_] 
      // Guard expression
      // srl1
      // start: Forward dependencies from srl1 to transition call_stmt_750_sample_start_
      // done: Forward dependencies from srl1 to transition call_stmt_750_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // rd
      // Call input argument 3
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_750_sample_start_
      call_stmt_750_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_750_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_750_sample_start_
      call_stmt_750_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_750_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_750_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_750_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_750_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_750_sample_start_
      ;;[call_stmt_750_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_750_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_750_sample_start_ &-> (call_stmt_750_Sample)
      call_stmt_750_sample_completed_ <-& (call_stmt_750_Sample)
      call_stmt_750_sample_completed_ &-> ($null)
      call_stmt_750_update_start_ &-> (call_stmt_750_Update)
      call_stmt_750_update_completed_ <-& (call_stmt_750_Update)
      // Call output argument 0
      // (as target) next_pc12
      // start: WAR dependencies for next_pc12
      // done: WAR dependencies for next_pc12
      // end: 	$guard (srl1) $call srl_i (rs1_data rs2_data rd pc ) (next_pc12 ) 
      // start: 	$guard (sra1) $call sra_i (rs1_data rs2_data rd pc ) (next_pc13 ) 
      //  file prog.linked.opt.aa, line 289
      $T[call_stmt_757_sample_start_] 
      $T[call_stmt_757_sample_completed_] 
      $T[call_stmt_757_update_start_] 
      $T[call_stmt_757_update_completed_] 
      // Guard expression
      // sra1
      // start: Forward dependencies from sra1 to transition call_stmt_757_sample_start_
      // done: Forward dependencies from sra1 to transition call_stmt_757_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // rd
      // Call input argument 3
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_757_sample_start_
      call_stmt_757_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_757_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_757_sample_start_
      call_stmt_757_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_757_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_757_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_757_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_757_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_757_sample_start_
      ;;[call_stmt_757_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_757_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_757_sample_start_ &-> (call_stmt_757_Sample)
      call_stmt_757_sample_completed_ <-& (call_stmt_757_Sample)
      call_stmt_757_sample_completed_ &-> ($null)
      call_stmt_757_update_start_ &-> (call_stmt_757_Update)
      call_stmt_757_update_completed_ <-& (call_stmt_757_Update)
      // Call output argument 0
      // (as target) next_pc13
      // start: WAR dependencies for next_pc13
      // done: WAR dependencies for next_pc13
      // end: 	$guard (sra1) $call sra_i (rs1_data rs2_data rd pc ) (next_pc13 ) 
      // start: 	$guard (bz1) $call bz (rs1_data rs2_data rd pc ) (next_pc14 ) 
      //  file prog.linked.opt.aa, line 290
      $T[call_stmt_764_sample_start_] 
      $T[call_stmt_764_sample_completed_] 
      $T[call_stmt_764_update_start_] 
      $T[call_stmt_764_update_completed_] 
      // Guard expression
      // bz1
      // start: Forward dependencies from bz1 to transition call_stmt_764_sample_start_
      // done: Forward dependencies from bz1 to transition call_stmt_764_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // rd
      // Call input argument 3
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_764_sample_start_
      call_stmt_764_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_764_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_764_sample_start_
      call_stmt_764_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_764_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_764_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_764_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_764_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_764_sample_start_
      ;;[call_stmt_764_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_764_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_764_sample_start_ &-> (call_stmt_764_Sample)
      call_stmt_764_sample_completed_ <-& (call_stmt_764_Sample)
      call_stmt_764_sample_completed_ &-> ($null)
      call_stmt_764_update_start_ &-> (call_stmt_764_Update)
      call_stmt_764_update_completed_ <-& (call_stmt_764_Update)
      // Call output argument 0
      // (as target) next_pc14
      // start: WAR dependencies for next_pc14
      // done: WAR dependencies for next_pc14
      // end: 	$guard (bz1) $call bz (rs1_data rs2_data rd pc ) (next_pc14 ) 
      // start: 	$guard (bn1) $call bn (rs1_data rs2_data rd pc ) (next_pc15 ) 
      //  file prog.linked.opt.aa, line 291
      $T[call_stmt_771_sample_start_] 
      $T[call_stmt_771_sample_completed_] 
      $T[call_stmt_771_update_start_] 
      $T[call_stmt_771_update_completed_] 
      // Guard expression
      // bn1
      // start: Forward dependencies from bn1 to transition call_stmt_771_sample_start_
      // done: Forward dependencies from bn1 to transition call_stmt_771_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // rd
      // Call input argument 3
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_771_sample_start_
      call_stmt_771_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_771_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_771_sample_start_
      call_stmt_771_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_771_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_771_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_771_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_771_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_771_sample_start_
      ;;[call_stmt_771_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_771_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_771_sample_start_ &-> (call_stmt_771_Sample)
      call_stmt_771_sample_completed_ <-& (call_stmt_771_Sample)
      call_stmt_771_sample_completed_ &-> ($null)
      call_stmt_771_update_start_ &-> (call_stmt_771_Update)
      call_stmt_771_update_completed_ <-& (call_stmt_771_Update)
      // Call output argument 0
      // (as target) next_pc15
      // start: WAR dependencies for next_pc15
      // done: WAR dependencies for next_pc15
      // end: 	$guard (bn1) $call bn (rs1_data rs2_data rd pc ) (next_pc15 ) 
      // start: 	$guard (call1) $call call (rs1_data rs2_data rd pc ) (next_pc16 ) 
      //  file prog.linked.opt.aa, line 292
      $T[call_stmt_778_sample_start_] 
      $T[call_stmt_778_sample_completed_] 
      $T[call_stmt_778_update_start_] 
      $T[call_stmt_778_update_completed_] 
      // Guard expression
      // call1
      // start: Forward dependencies from call1 to transition call_stmt_778_sample_start_
      // done: Forward dependencies from call1 to transition call_stmt_778_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // rd
      // Call input argument 3
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_778_sample_start_
      call_stmt_778_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_778_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_778_sample_start_
      call_stmt_778_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_778_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_778_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_778_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_778_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_778_sample_start_
      ;;[call_stmt_778_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_778_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_778_sample_start_ &-> (call_stmt_778_Sample)
      call_stmt_778_sample_completed_ <-& (call_stmt_778_Sample)
      call_stmt_778_sample_completed_ &-> ($null)
      call_stmt_778_update_start_ &-> (call_stmt_778_Update)
      call_stmt_778_update_completed_ <-& (call_stmt_778_Update)
      // Call output argument 0
      // (as target) next_pc16
      // start: WAR dependencies for next_pc16
      // done: WAR dependencies for next_pc16
      // end: 	$guard (call1) $call call (rs1_data rs2_data rd pc ) (next_pc16 ) 
      // start: 	$guard (jmp1) $call jmp (rs1_data pc ) (next_pc17 ) 
      //  file prog.linked.opt.aa, line 293
      $T[call_stmt_783_sample_start_] 
      $T[call_stmt_783_sample_completed_] 
      $T[call_stmt_783_update_start_] 
      $T[call_stmt_783_update_completed_] 
      // Guard expression
      // jmp1
      // start: Forward dependencies from jmp1 to transition call_stmt_783_sample_start_
      // done: Forward dependencies from jmp1 to transition call_stmt_783_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_783_sample_start_
      call_stmt_783_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_783_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_783_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_783_sample_start_
      ;;[call_stmt_783_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_783_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_783_sample_start_ &-> (call_stmt_783_Sample)
      call_stmt_783_sample_completed_ <-& (call_stmt_783_Sample)
      call_stmt_783_sample_completed_ &-> ($null)
      call_stmt_783_update_start_ &-> (call_stmt_783_Update)
      call_stmt_783_update_completed_ <-& (call_stmt_783_Update)
      // Call output argument 0
      // (as target) next_pc17
      // start: WAR dependencies for next_pc17
      // done: WAR dependencies for next_pc17
      // end: 	$guard (jmp1) $call jmp (rs1_data pc ) (next_pc17 ) 
      // start: 	$guard (cmp1) $call cmp (rs1_data rs2_data rd pc ) (next_pc18 ) 
      //  file prog.linked.opt.aa, line 294
      $T[call_stmt_790_sample_start_] 
      $T[call_stmt_790_sample_completed_] 
      $T[call_stmt_790_update_start_] 
      $T[call_stmt_790_update_completed_] 
      // Guard expression
      // cmp1
      // start: Forward dependencies from cmp1 to transition call_stmt_790_sample_start_
      // done: Forward dependencies from cmp1 to transition call_stmt_790_sample_start_
      // Call input argument 0
      // rs1_data
      // Call input argument 1
      // rs2_data
      // Call input argument 2
      // rd
      // Call input argument 3
      // pc
      // start: Forward dependencies from rs1_data to transition call_stmt_790_sample_start_
      call_stmt_790_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from rs1_data to transition call_stmt_790_sample_start_
      // start: Forward dependencies from rs2_data to transition call_stmt_790_sample_start_
      call_stmt_790_sample_start_ <-& (call_stmt_672_update_completed_)
      // done: Forward dependencies from rs2_data to transition call_stmt_790_sample_start_
      // start: Forward dependencies from rd to transition call_stmt_790_sample_start_
      // done: Forward dependencies from rd to transition call_stmt_790_sample_start_
      // start: Forward dependencies from pc to transition call_stmt_790_sample_start_
      // done: Forward dependencies from pc to transition call_stmt_790_sample_start_
      ;;[call_stmt_790_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_790_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_790_sample_start_ &-> (call_stmt_790_Sample)
      call_stmt_790_sample_completed_ <-& (call_stmt_790_Sample)
      call_stmt_790_sample_completed_ &-> ($null)
      call_stmt_790_update_start_ &-> (call_stmt_790_Update)
      call_stmt_790_update_completed_ <-& (call_stmt_790_Update)
      // Call output argument 0
      // (as target) next_pc18
      // start: WAR dependencies for next_pc18
      // done: WAR dependencies for next_pc18
      // end: 	$guard (cmp1) $call cmp (rs1_data rs2_data rd pc ) (next_pc18 ) 
      // start:  	next_pc := ( $mux (op == 1 ) next_pc1  ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) // bits of buffering = 8. 
      //  file prog.linked.opt.aa, line 295
      // Source expression
      // ( $mux (op == 1 ) next_pc1  ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
      $T[MUX_883_sample_start_] 
      $T[MUX_883_sample_completed_] 
      $T[MUX_883_update_start_] 
      $T[MUX_883_update_completed_] 
      // (op == 1 )
      // op
      // next_pc1
      $T[LOAD_next_pc1_795_sample_start_] 
      $T[LOAD_next_pc1_795_sample_completed_] 
      $T[LOAD_next_pc1_795_update_start_] 
      $T[LOAD_next_pc1_795_update_completed_] 
      $T[LOAD_next_pc1_795_word_address_calculated] 
      $T[LOAD_next_pc1_795_root_address_calculated] 
      LOAD_next_pc1_795_word_address_calculated <-& (LOAD_next_pc1_795_root_address_calculated)
      ;;[LOAD_next_pc1_795_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[LOAD_next_pc1_795_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[LOAD_next_pc1_795_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      LOAD_next_pc1_795_sample_start_ <-& (LOAD_next_pc1_795_word_address_calculated)
      LOAD_next_pc1_795_sample_start_ &-> (LOAD_next_pc1_795_Sample)
      LOAD_next_pc1_795_sample_completed_ <-& (LOAD_next_pc1_795_Sample)
      LOAD_next_pc1_795_sample_completed_ &-> ($null)
      LOAD_next_pc1_795_update_start_ &-> (LOAD_next_pc1_795_Update)
      LOAD_next_pc1_795_update_completed_ <-& (LOAD_next_pc1_795_Update)
      // ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
      // (op == 2 )
      // op
      // next_pc2
      // ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
      // (op == 3 )
      // op
      // next_pc3
      // ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
      // (op == 4 )
      // op
      // next_pc4
      // ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
      // (op == 5 )
      // op
      // next_pc5
      // ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  ) 
      // (op == 6 )
      // op
      // next_pc6
      // ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  ) 
      // (op == 7 )
      // op
      // next_pc7
      // ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  ) 
      // (op == 8 )
      // op
      // next_pc8
      // ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  ) 
      // (op == 9 )
      // op
      // next_pc9
      // ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  ) 
      // (op == 10 )
      // op
      // next_pc10
      // ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  ) 
      // (op == 11 )
      // op
      // next_pc11
      // ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  ) 
      // (op == 12 )
      // op
      // next_pc12
      // ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  ) 
      // (op == 13 )
      // op
      // next_pc13
      // ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  ) 
      // (op == 14 )
      // op
      // next_pc14
      // ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  ) 
      // (op == 15 )
      // op
      // next_pc15
      // ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  ) 
      // (op == 16 )
      // op
      // next_pc16
      // ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  ) 
      // (op == 17 )
      // op
      // next_pc17
      // ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) ) 
      // (op == 18 )
      // op
      // next_pc18
      // start: Forward dependencies from (op == 1 ) to transition MUX_883_sample_start_
      // done: Forward dependencies from (op == 1 ) to transition MUX_883_sample_start_
      // start: Forward dependencies from next_pc1 to transition MUX_883_sample_start_
      MUX_883_sample_start_ <-& (LOAD_next_pc1_795_update_completed_)
      // done: Forward dependencies from next_pc1 to transition MUX_883_sample_start_
      // start: Forward dependencies from ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  to transition MUX_883_sample_start_
      MUX_883_sample_start_ <-& (call_stmt_750_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_757_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_764_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_682_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_688_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_694_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_701_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_708_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_715_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_722_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_729_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_736_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_743_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_771_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_778_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_783_update_completed_)
      MUX_883_sample_start_ <-& (call_stmt_790_update_completed_)
      // done: Forward dependencies from ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  to transition MUX_883_sample_start_
      ;;[MUX_883_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_883_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_883_sample_start_ &-> (MUX_883_start)
      MUX_883_sample_completed_ <-& (MUX_883_start)
      MUX_883_sample_completed_ &-> ($null)
      MUX_883_update_start_ &-> (MUX_883_complete)
      MUX_883_update_completed_ <-& (MUX_883_complete)
      // Target expression
      // (as target) next_pc
      // next_pc
      // write to interface object
      // start: WAR dependencies for next_pc
      // done: WAR dependencies for next_pc
      // next_pc
      // write to interface object
      // end:  	next_pc := ( $mux (op == 1 ) next_pc1  ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) // bits of buffering = 8. 
      // load-store dependencies..
      // memory-space  memory_space_1
      //  STORE_next_pc1_675 store
      //  call_stmt_764 store
      $T [STORE_next_pc1_675_call_stmt_764_delay] $delay
      // STORE_next_pc1_675(store) -> call_stmt_764(store)
      call_stmt_764_sample_start_ <-& (STORE_next_pc1_675_call_stmt_764_delay)
      STORE_next_pc1_675_call_stmt_764_delay <-& (STORE_next_pc1_675_sample_completed_)
      //  call_stmt_771 store
      $T [call_stmt_764_call_stmt_771_delay] $delay
      // call_stmt_764(store) -> call_stmt_771(store)
      call_stmt_771_sample_start_ <-& (call_stmt_764_call_stmt_771_delay)
      call_stmt_764_call_stmt_771_delay <-& (call_stmt_764_update_completed_)
      //  LOAD_next_pc1_795 load
      $T [call_stmt_771_LOAD_next_pc1_795_delay] $delay
      // call_stmt_771(store) -> LOAD_next_pc1_795(load)
      LOAD_next_pc1_795_sample_start_ <-& (call_stmt_771_LOAD_next_pc1_795_delay)
      call_stmt_771_LOAD_next_pc1_795_delay <-& (call_stmt_771_update_completed_)
      // memory-space  memory_space_3
      //  call_stmt_757 store
      // memory-space  memory_space_0
      //  call_stmt_688 store
      //  call_stmt_694 store
      $T [call_stmt_688_call_stmt_694_delay] $delay
      // call_stmt_688(store) -> call_stmt_694(store)
      call_stmt_694_sample_start_ <-& (call_stmt_688_call_stmt_694_delay)
      call_stmt_688_call_stmt_694_delay <-& (call_stmt_688_update_completed_)
      // memory-space  memory_space_2
      //  call_stmt_667 store
      //  call_stmt_672 store
      $T [call_stmt_667_call_stmt_672_delay] $delay
      // call_stmt_667(store) -> call_stmt_672(store)
      call_stmt_672_sample_start_ <-& (call_stmt_667_call_stmt_672_delay)
      call_stmt_667_call_stmt_672_delay <-& (call_stmt_667_update_completed_)
      //  call_stmt_682 store
      $T [call_stmt_672_call_stmt_682_delay] $delay
      // call_stmt_672(store) -> call_stmt_682(store)
      call_stmt_682_sample_start_ <-& (call_stmt_672_call_stmt_682_delay)
      call_stmt_672_call_stmt_682_delay <-& (call_stmt_672_update_completed_)
      //  call_stmt_688 store
      $T [call_stmt_682_call_stmt_688_delay] $delay
      // call_stmt_682(store) -> call_stmt_688(store)
      call_stmt_688_sample_start_ <-& (call_stmt_682_call_stmt_688_delay)
      call_stmt_682_call_stmt_688_delay <-& (call_stmt_682_update_completed_)
      //  call_stmt_701 store
      $T [call_stmt_688_call_stmt_701_delay] $delay
      // call_stmt_688(store) -> call_stmt_701(store)
      call_stmt_701_sample_start_ <-& (call_stmt_688_call_stmt_701_delay)
      call_stmt_688_call_stmt_701_delay <-& (call_stmt_688_update_completed_)
      //  call_stmt_708 store
      $T [call_stmt_701_call_stmt_708_delay] $delay
      // call_stmt_701(store) -> call_stmt_708(store)
      call_stmt_708_sample_start_ <-& (call_stmt_701_call_stmt_708_delay)
      call_stmt_701_call_stmt_708_delay <-& (call_stmt_701_update_completed_)
      //  call_stmt_715 store
      $T [call_stmt_708_call_stmt_715_delay] $delay
      // call_stmt_708(store) -> call_stmt_715(store)
      call_stmt_715_sample_start_ <-& (call_stmt_708_call_stmt_715_delay)
      call_stmt_708_call_stmt_715_delay <-& (call_stmt_708_update_completed_)
      //  call_stmt_722 store
      $T [call_stmt_715_call_stmt_722_delay] $delay
      // call_stmt_715(store) -> call_stmt_722(store)
      call_stmt_722_sample_start_ <-& (call_stmt_715_call_stmt_722_delay)
      call_stmt_715_call_stmt_722_delay <-& (call_stmt_715_update_completed_)
      //  call_stmt_729 store
      $T [call_stmt_722_call_stmt_729_delay] $delay
      // call_stmt_722(store) -> call_stmt_729(store)
      call_stmt_729_sample_start_ <-& (call_stmt_722_call_stmt_729_delay)
      call_stmt_722_call_stmt_729_delay <-& (call_stmt_722_update_completed_)
      //  call_stmt_736 store
      $T [call_stmt_729_call_stmt_736_delay] $delay
      // call_stmt_729(store) -> call_stmt_736(store)
      call_stmt_736_sample_start_ <-& (call_stmt_729_call_stmt_736_delay)
      call_stmt_729_call_stmt_736_delay <-& (call_stmt_729_update_completed_)
      //  call_stmt_743 store
      $T [call_stmt_736_call_stmt_743_delay] $delay
      // call_stmt_736(store) -> call_stmt_743(store)
      call_stmt_743_sample_start_ <-& (call_stmt_736_call_stmt_743_delay)
      call_stmt_736_call_stmt_743_delay <-& (call_stmt_736_update_completed_)
      //  call_stmt_750 store
      $T [call_stmt_743_call_stmt_750_delay] $delay
      // call_stmt_743(store) -> call_stmt_750(store)
      call_stmt_750_sample_start_ <-& (call_stmt_743_call_stmt_750_delay)
      call_stmt_743_call_stmt_750_delay <-& (call_stmt_743_update_completed_)
      //  call_stmt_757 store
      $T [call_stmt_750_call_stmt_757_delay] $delay
      // call_stmt_750(store) -> call_stmt_757(store)
      call_stmt_757_sample_start_ <-& (call_stmt_750_call_stmt_757_delay)
      call_stmt_750_call_stmt_757_delay <-& (call_stmt_750_update_completed_)
      //  call_stmt_778 store
      $T [call_stmt_757_call_stmt_778_delay] $delay
      // call_stmt_757(store) -> call_stmt_778(store)
      call_stmt_778_sample_start_ <-& (call_stmt_757_call_stmt_778_delay)
      call_stmt_757_call_stmt_778_delay <-& (call_stmt_757_update_completed_)
      //  call_stmt_790 store
      $T [call_stmt_778_call_stmt_790_delay] $delay
      // call_stmt_778(store) -> call_stmt_790(store)
      call_stmt_790_sample_start_ <-& (call_stmt_778_call_stmt_790_delay)
      call_stmt_778_call_stmt_790_delay <-& (call_stmt_778_update_completed_)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %try
    //  file prog.linked.opt.aa, line 248
    // 1 
    $constant $W[konst_575_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_580_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_585_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_590_wire_constant] : $int<8> := _b00000100// 4
    // 5 
    $constant $W[konst_595_wire_constant] : $int<8> := _b00000101// 5
    // 6 
    $constant $W[konst_600_wire_constant] : $int<8> := _b00000110// 6
    // 7 
    $constant $W[konst_605_wire_constant] : $int<8> := _b00000111// 7
    // 8 
    $constant $W[konst_610_wire_constant] : $int<8> := _b00001000// 8
    // 9 
    $constant $W[konst_615_wire_constant] : $int<8> := _b00001001// 9
    // 10 
    $constant $W[konst_620_wire_constant] : $int<8> := _b00001010// 10
    // 11 
    $constant $W[konst_625_wire_constant] : $int<8> := _b00001011// 11
    // 12 
    $constant $W[konst_630_wire_constant] : $int<8> := _b00001100// 12
    // 13 
    $constant $W[konst_635_wire_constant] : $int<8> := _b00001101// 13
    // 14 
    $constant $W[konst_640_wire_constant] : $int<8> := _b00001110// 14
    // 15 
    $constant $W[konst_645_wire_constant] : $int<8> := _b00001111// 15
    // 16 
    $constant $W[konst_650_wire_constant] : $int<8> := _b00010000// 16
    // 17 
    $constant $W[konst_655_wire_constant] : $int<8> := _b00010001// 17
    // 18 
    $constant $W[konst_660_wire_constant] : $int<8> := _b00010010// 18
    // 	$call accessreg (1  rs1 0  ) (rs1_data ) 
    //  file prog.linked.opt.aa, line 275
    // 1 
    $constant $W[konst_663_wire_constant] : $int<1> := _b1// 1
    // 0 
    $constant $W[konst_665_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 	$call accessreg (1  rs2 0  ) (rs2_data ) 
    //  file prog.linked.opt.aa, line 276
    // 1 
    $constant $W[konst_668_wire_constant] : $int<1> := _b1// 1
    // 0 
    $constant $W[konst_670_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 	$guard (halt1) $call halt (pc ) (next_pc1 ) 
    //  file prog.linked.opt.aa, line 277
    // 	$guard (sbir1) $call sbir (rs1 rd pc ) (next_pc2 ) 
    //  file prog.linked.opt.aa, line 278
    // 	$guard (load1) $call load (rs1_data rd pc ) (next_pc3 ) 
    //  file prog.linked.opt.aa, line 279
    // 	$guard (store1) $call store (rs1_data rs2_data pc ) (next_pc4 ) 
    //  file prog.linked.opt.aa, line 280
    // 	$guard (and1) $call and_i (rs1_data rs2_data rd pc ) (next_pc5 ) 
    //  file prog.linked.opt.aa, line 281
    // 	$guard (or1) $call or_i (rs1_data rs2_data rd pc ) (next_pc6 ) 
    //  file prog.linked.opt.aa, line 282
    // 	$guard (xnor1) $call xnor_i (rs1_data rs2_data rd pc ) (next_pc7 ) 
    //  file prog.linked.opt.aa, line 283
    // 	$guard (xor1) $call xor_i (rs1_data rs2_data rd pc ) (next_pc8 ) 
    //  file prog.linked.opt.aa, line 284
    // 	$guard (add1) $call add (rs1_data rs2_data rd pc ) (next_pc9 ) 
    //  file prog.linked.opt.aa, line 285
    // 	$guard (sub1) $call sub (rs1_data rs2_data rd pc ) (next_pc10 ) 
    //  file prog.linked.opt.aa, line 286
    // 	$guard (sll1) $call sll_i (rs1_data rs2_data rd pc ) (next_pc11 ) 
    //  file prog.linked.opt.aa, line 287
    // 	$guard (srl1) $call srl_i (rs1_data rs2_data rd pc ) (next_pc12 ) 
    //  file prog.linked.opt.aa, line 288
    // 	$guard (sra1) $call sra_i (rs1_data rs2_data rd pc ) (next_pc13 ) 
    //  file prog.linked.opt.aa, line 289
    // 	$guard (bz1) $call bz (rs1_data rs2_data rd pc ) (next_pc14 ) 
    //  file prog.linked.opt.aa, line 290
    // 	$guard (bn1) $call bn (rs1_data rs2_data rd pc ) (next_pc15 ) 
    //  file prog.linked.opt.aa, line 291
    // 	$guard (call1) $call call (rs1_data rs2_data rd pc ) (next_pc16 ) 
    //  file prog.linked.opt.aa, line 292
    // 	$guard (jmp1) $call jmp (rs1_data pc ) (next_pc17 ) 
    //  file prog.linked.opt.aa, line 293
    // 	$guard (cmp1) $call cmp (rs1_data rs2_data rd pc ) (next_pc18 ) 
    //  file prog.linked.opt.aa, line 294
    // ( $mux (op == 1 ) next_pc1  ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    // 1 
    $constant $W[konst_793_wire_constant] : $int<8> := _b00000001// 1
    // next_pc1
    $constant $W[LOAD_next_pc1_795_word_address_0] : $pointer<memory_space_1> := _b0
    // ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    // 2 
    $constant $W[konst_797_wire_constant] : $int<8> := _b00000010// 2
    // ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    // 3 
    $constant $W[konst_801_wire_constant] : $int<8> := _b00000011// 3
    // ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    // 4 
    $constant $W[konst_805_wire_constant] : $int<8> := _b00000100// 4
    // ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    // 5 
    $constant $W[konst_809_wire_constant] : $int<8> := _b00000101// 5
    // ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  ) 
    // 6 
    $constant $W[konst_813_wire_constant] : $int<8> := _b00000110// 6
    // ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  ) 
    // 7 
    $constant $W[konst_817_wire_constant] : $int<8> := _b00000111// 7
    // ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  ) 
    // 8 
    $constant $W[konst_821_wire_constant] : $int<8> := _b00001000// 8
    // ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  ) 
    // 9 
    $constant $W[konst_825_wire_constant] : $int<8> := _b00001001// 9
    // ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  ) 
    // 10 
    $constant $W[konst_829_wire_constant] : $int<8> := _b00001010// 10
    // ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  ) 
    // 11 
    $constant $W[konst_833_wire_constant] : $int<8> := _b00001011// 11
    // ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  ) 
    // 12 
    $constant $W[konst_837_wire_constant] : $int<8> := _b00001100// 12
    // ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  ) 
    // 13 
    $constant $W[konst_841_wire_constant] : $int<8> := _b00001101// 13
    // ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  ) 
    // 14 
    $constant $W[konst_845_wire_constant] : $int<8> := _b00001110// 14
    // ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  ) 
    // 15 
    $constant $W[konst_849_wire_constant] : $int<8> := _b00001111// 15
    // ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  ) 
    // 16 
    $constant $W[konst_853_wire_constant] : $int<8> := _b00010000// 16
    // ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  ) 
    // 17 
    $constant $W[konst_857_wire_constant] : $int<8> := _b00010001// 17
    // ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) ) 
    // 18 
    $constant $W[konst_861_wire_constant] : $int<8> := _b00010010// 18
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_865_wire_constant] : $int<8> := _b00000000// 0
    // 	$volatile op := ( $slice inst 31 24 ) 
    //  file prog.linked.opt.aa, line 253
    // op
    $W[op_560] : $int<8>
    // 	$volatile rs1 := ( $slice inst 23 16 ) 
    //  file prog.linked.opt.aa, line 254
    // rs1
    $W[rs1_564] : $int<8>
    // 	$volatile rs2 := ( $slice inst 15 8 ) 
    //  file prog.linked.opt.aa, line 255
    // rs2
    $W[rs2_568] : $int<8>
    // 	$volatile rd := ( $slice inst 7 0 ) 
    //  file prog.linked.opt.aa, line 256
    // rd
    $W[rd_572] : $int<8>
    // 	$volatile halt1 := (op == 1 )
    //  file prog.linked.opt.aa, line 257
    // halt1
    $W[halt1_577] : $int<1>
    // 	$volatile sbir1 := (op == 2 )
    //  file prog.linked.opt.aa, line 258
    // sbir1
    $W[sbir1_582] : $int<1>
    // 	$volatile load1 := (op == 3 )
    //  file prog.linked.opt.aa, line 259
    // load1
    $W[load1_587] : $int<1>
    // 	$volatile store1 := (op == 4 )
    //  file prog.linked.opt.aa, line 260
    // store1
    $W[store1_592] : $int<1>
    // 	$volatile and1 := (op == 5 )
    //  file prog.linked.opt.aa, line 261
    // and1
    $W[and1_597] : $int<1>
    // 	$volatile or1 := (op == 6 )
    //  file prog.linked.opt.aa, line 262
    // or1
    $W[or1_602] : $int<1>
    // 	$volatile xnor1 := (op == 7 )
    //  file prog.linked.opt.aa, line 263
    // xnor1
    $W[xnor1_607] : $int<1>
    // 	$volatile xor1 := (op == 8 )
    //  file prog.linked.opt.aa, line 264
    // xor1
    $W[xor1_612] : $int<1>
    // 	$volatile add1 := (op == 9 )
    //  file prog.linked.opt.aa, line 265
    // add1
    $W[add1_617] : $int<1>
    // 	$volatile sub1 := (op == 10 )
    //  file prog.linked.opt.aa, line 266
    // sub1
    $W[sub1_622] : $int<1>
    // 	$volatile sll1 := (op == 11 )
    //  file prog.linked.opt.aa, line 267
    // sll1
    $W[sll1_627] : $int<1>
    // 	$volatile srl1 := (op == 12 )
    //  file prog.linked.opt.aa, line 268
    // srl1
    $W[srl1_632] : $int<1>
    // 	$volatile sra1 := (op == 13 )
    //  file prog.linked.opt.aa, line 269
    // sra1
    $W[sra1_637] : $int<1>
    // 	$volatile bz1 := (op == 14 )
    //  file prog.linked.opt.aa, line 270
    // bz1
    $W[bz1_642] : $int<1>
    // 	$volatile bn1 := (op == 15 )
    //  file prog.linked.opt.aa, line 271
    // bn1
    $W[bn1_647] : $int<1>
    // 	$volatile call1 := (op == 16 )
    //  file prog.linked.opt.aa, line 272
    // call1
    $W[call1_652] : $int<1>
    // 	$volatile jmp1 := (op == 17 )
    //  file prog.linked.opt.aa, line 273
    // jmp1
    $W[jmp1_657] : $int<1>
    // 	$volatile cmp1 := (op == 18 )
    //  file prog.linked.opt.aa, line 274
    // cmp1
    $W[cmp1_662] : $int<1>
    // 	$call accessreg (1  rs1 0  ) (rs1_data ) 
    //  file prog.linked.opt.aa, line 275
    // rs1_data
    $W[rs1_data_667] : $int<32>
    // 	$call accessreg (1  rs2 0  ) (rs2_data ) 
    //  file prog.linked.opt.aa, line 276
    // rs2_data
    $W[rs2_data_672] : $int<32>
    // 	$guard (halt1) $call halt (pc ) (next_pc1 ) 
    //  file prog.linked.opt.aa, line 277
    $W[STORE_next_pc1_675_wire] : $int<8>
    // next_pc1
    $constant $W[STORE_next_pc1_675_word_address_0] : $pointer<memory_space_1> := _b0
    $W[STORE_next_pc1_675_data_0] : $int<8>
    // 	$guard (sbir1) $call sbir (rs1 rd pc ) (next_pc2 ) 
    //  file prog.linked.opt.aa, line 278
    // next_pc2
    $W[next_pc2_682] : $int<8>
    // 	$guard (load1) $call load (rs1_data rd pc ) (next_pc3 ) 
    //  file prog.linked.opt.aa, line 279
    // next_pc3
    $W[next_pc3_688] : $int<8>
    // 	$guard (store1) $call store (rs1_data rs2_data pc ) (next_pc4 ) 
    //  file prog.linked.opt.aa, line 280
    // next_pc4
    $W[next_pc4_694] : $int<8>
    // 	$guard (and1) $call and_i (rs1_data rs2_data rd pc ) (next_pc5 ) 
    //  file prog.linked.opt.aa, line 281
    // next_pc5
    $W[next_pc5_701] : $int<8>
    // 	$guard (or1) $call or_i (rs1_data rs2_data rd pc ) (next_pc6 ) 
    //  file prog.linked.opt.aa, line 282
    // next_pc6
    $W[next_pc6_708] : $int<8>
    // 	$guard (xnor1) $call xnor_i (rs1_data rs2_data rd pc ) (next_pc7 ) 
    //  file prog.linked.opt.aa, line 283
    // next_pc7
    $W[next_pc7_715] : $int<8>
    // 	$guard (xor1) $call xor_i (rs1_data rs2_data rd pc ) (next_pc8 ) 
    //  file prog.linked.opt.aa, line 284
    // next_pc8
    $W[next_pc8_722] : $int<8>
    // 	$guard (add1) $call add (rs1_data rs2_data rd pc ) (next_pc9 ) 
    //  file prog.linked.opt.aa, line 285
    // next_pc9
    $W[next_pc9_729] : $int<8>
    // 	$guard (sub1) $call sub (rs1_data rs2_data rd pc ) (next_pc10 ) 
    //  file prog.linked.opt.aa, line 286
    // next_pc10
    $W[next_pc10_736] : $int<8>
    // 	$guard (sll1) $call sll_i (rs1_data rs2_data rd pc ) (next_pc11 ) 
    //  file prog.linked.opt.aa, line 287
    // next_pc11
    $W[next_pc11_743] : $int<8>
    // 	$guard (srl1) $call srl_i (rs1_data rs2_data rd pc ) (next_pc12 ) 
    //  file prog.linked.opt.aa, line 288
    // next_pc12
    $W[next_pc12_750] : $int<8>
    // 	$guard (sra1) $call sra_i (rs1_data rs2_data rd pc ) (next_pc13 ) 
    //  file prog.linked.opt.aa, line 289
    // next_pc13
    $W[next_pc13_757] : $int<8>
    // 	$guard (bz1) $call bz (rs1_data rs2_data rd pc ) (next_pc14 ) 
    //  file prog.linked.opt.aa, line 290
    // next_pc14
    $W[next_pc14_764] : $int<8>
    // 	$guard (bn1) $call bn (rs1_data rs2_data rd pc ) (next_pc15 ) 
    //  file prog.linked.opt.aa, line 291
    // next_pc15
    $W[next_pc15_771] : $int<8>
    // 	$guard (call1) $call call (rs1_data rs2_data rd pc ) (next_pc16 ) 
    //  file prog.linked.opt.aa, line 292
    // next_pc16
    $W[next_pc16_778] : $int<8>
    // 	$guard (jmp1) $call jmp (rs1_data pc ) (next_pc17 ) 
    //  file prog.linked.opt.aa, line 293
    // next_pc17
    $W[next_pc17_783] : $int<8>
    // 	$guard (cmp1) $call cmp (rs1_data rs2_data rd pc ) (next_pc18 ) 
    //  file prog.linked.opt.aa, line 294
    // next_pc18
    $W[next_pc18_790] : $int<8>
    // 	next_pc := ( $mux (op == 1 ) next_pc1  ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 295
    // (op == 1 )
    $intermediate $W[EQ_u8_u1_794_wire] : $int<1>
    // next_pc1
    $W[LOAD_next_pc1_795_wire] : $int<8>
    // next_pc1
    $W[LOAD_next_pc1_795_data_0] : $int<8>
    // (op == 2 )
    $intermediate $W[EQ_u8_u1_798_wire] : $int<1>
    // (op == 3 )
    $intermediate $W[EQ_u8_u1_802_wire] : $int<1>
    // (op == 4 )
    $intermediate $W[EQ_u8_u1_806_wire] : $int<1>
    // (op == 5 )
    $intermediate $W[EQ_u8_u1_810_wire] : $int<1>
    // (op == 6 )
    $intermediate $W[EQ_u8_u1_814_wire] : $int<1>
    // (op == 7 )
    $intermediate $W[EQ_u8_u1_818_wire] : $int<1>
    // (op == 8 )
    $intermediate $W[EQ_u8_u1_822_wire] : $int<1>
    // (op == 9 )
    $intermediate $W[EQ_u8_u1_826_wire] : $int<1>
    // (op == 10 )
    $intermediate $W[EQ_u8_u1_830_wire] : $int<1>
    // (op == 11 )
    $intermediate $W[EQ_u8_u1_834_wire] : $int<1>
    // (op == 12 )
    $intermediate $W[EQ_u8_u1_838_wire] : $int<1>
    // (op == 13 )
    $intermediate $W[EQ_u8_u1_842_wire] : $int<1>
    // (op == 14 )
    $intermediate $W[EQ_u8_u1_846_wire] : $int<1>
    // (op == 15 )
    $intermediate $W[EQ_u8_u1_850_wire] : $int<1>
    // (op == 16 )
    $intermediate $W[EQ_u8_u1_854_wire] : $int<1>
    // (op == 17 )
    $intermediate $W[EQ_u8_u1_858_wire] : $int<1>
    // (op == 18 )
    $intermediate $W[EQ_u8_u1_862_wire] : $int<1>
    // ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) ) 
    $intermediate $W[MUX_866_wire] : $int<8>
    // ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  ) 
    $intermediate $W[MUX_867_wire] : $int<8>
    // ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  ) 
    $intermediate $W[MUX_868_wire] : $int<8>
    // ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  ) 
    $intermediate $W[MUX_869_wire] : $int<8>
    // ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  ) 
    $intermediate $W[MUX_870_wire] : $int<8>
    // ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  ) 
    $intermediate $W[MUX_871_wire] : $int<8>
    // ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  ) 
    $intermediate $W[MUX_872_wire] : $int<8>
    // ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  ) 
    $intermediate $W[MUX_873_wire] : $int<8>
    // ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  ) 
    $intermediate $W[MUX_874_wire] : $int<8>
    // ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  ) 
    $intermediate $W[MUX_875_wire] : $int<8>
    // ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  ) 
    $intermediate $W[MUX_876_wire] : $int<8>
    // ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  ) 
    $intermediate $W[MUX_877_wire] : $int<8>
    // ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  ) 
    $intermediate $W[MUX_878_wire] : $int<8>
    // ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    $intermediate $W[MUX_879_wire] : $int<8>
    // ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    $intermediate $W[MUX_880_wire] : $int<8>
    // ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    $intermediate $W[MUX_881_wire] : $int<8>
    // ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    $intermediate $W[MUX_882_wire] : $int<8>
    // next_pc
    // 	$volatile op := ( $slice inst 31 24 ) 
    //  file prog.linked.opt.aa, line 253
    // ( $slice inst 31 24 ) 
    [:] [slice_559_inst] (inst 31 24) (op_560)  $flowthrough
    $delay slice_559_inst 0
    // 	$volatile rs1 := ( $slice inst 23 16 ) 
    //  file prog.linked.opt.aa, line 254
    // ( $slice inst 23 16 ) 
    [:] [slice_563_inst] (inst 23 16) (rs1_564)  $flowthrough
    $delay slice_563_inst 0
    // 	$volatile rs2 := ( $slice inst 15 8 ) 
    //  file prog.linked.opt.aa, line 255
    // ( $slice inst 15 8 ) 
    [:] [slice_567_inst] (inst 15 8) (rs2_568)  $flowthrough
    $delay slice_567_inst 0
    // 	$volatile rd := ( $slice inst 7 0 ) 
    //  file prog.linked.opt.aa, line 256
    // ( $slice inst 7 0 ) 
    [:] [slice_571_inst] (inst 7 0) (rd_572)  $flowthrough
    $delay slice_571_inst 0
    // 	$volatile halt1 := (op == 1 )
    //  file prog.linked.opt.aa, line 257
    // (op == 1 )
    ==[EQ_u8_u1_576_inst] (op_560 konst_575_wire_constant) (halt1_577)   $flowthrough 
    $delay EQ_u8_u1_576_inst 0
    // 	$volatile sbir1 := (op == 2 )
    //  file prog.linked.opt.aa, line 258
    // (op == 2 )
    ==[EQ_u8_u1_581_inst] (op_560 konst_580_wire_constant) (sbir1_582)   $flowthrough 
    $delay EQ_u8_u1_581_inst 0
    // 	$volatile load1 := (op == 3 )
    //  file prog.linked.opt.aa, line 259
    // (op == 3 )
    ==[EQ_u8_u1_586_inst] (op_560 konst_585_wire_constant) (load1_587)   $flowthrough 
    $delay EQ_u8_u1_586_inst 0
    // 	$volatile store1 := (op == 4 )
    //  file prog.linked.opt.aa, line 260
    // (op == 4 )
    ==[EQ_u8_u1_591_inst] (op_560 konst_590_wire_constant) (store1_592)   $flowthrough 
    $delay EQ_u8_u1_591_inst 0
    // 	$volatile and1 := (op == 5 )
    //  file prog.linked.opt.aa, line 261
    // (op == 5 )
    ==[EQ_u8_u1_596_inst] (op_560 konst_595_wire_constant) (and1_597)   $flowthrough 
    $delay EQ_u8_u1_596_inst 0
    // 	$volatile or1 := (op == 6 )
    //  file prog.linked.opt.aa, line 262
    // (op == 6 )
    ==[EQ_u8_u1_601_inst] (op_560 konst_600_wire_constant) (or1_602)   $flowthrough 
    $delay EQ_u8_u1_601_inst 0
    // 	$volatile xnor1 := (op == 7 )
    //  file prog.linked.opt.aa, line 263
    // (op == 7 )
    ==[EQ_u8_u1_606_inst] (op_560 konst_605_wire_constant) (xnor1_607)   $flowthrough 
    $delay EQ_u8_u1_606_inst 0
    // 	$volatile xor1 := (op == 8 )
    //  file prog.linked.opt.aa, line 264
    // (op == 8 )
    ==[EQ_u8_u1_611_inst] (op_560 konst_610_wire_constant) (xor1_612)   $flowthrough 
    $delay EQ_u8_u1_611_inst 0
    // 	$volatile add1 := (op == 9 )
    //  file prog.linked.opt.aa, line 265
    // (op == 9 )
    ==[EQ_u8_u1_616_inst] (op_560 konst_615_wire_constant) (add1_617)   $flowthrough 
    $delay EQ_u8_u1_616_inst 0
    // 	$volatile sub1 := (op == 10 )
    //  file prog.linked.opt.aa, line 266
    // (op == 10 )
    ==[EQ_u8_u1_621_inst] (op_560 konst_620_wire_constant) (sub1_622)   $flowthrough 
    $delay EQ_u8_u1_621_inst 0
    // 	$volatile sll1 := (op == 11 )
    //  file prog.linked.opt.aa, line 267
    // (op == 11 )
    ==[EQ_u8_u1_626_inst] (op_560 konst_625_wire_constant) (sll1_627)   $flowthrough 
    $delay EQ_u8_u1_626_inst 0
    // 	$volatile srl1 := (op == 12 )
    //  file prog.linked.opt.aa, line 268
    // (op == 12 )
    ==[EQ_u8_u1_631_inst] (op_560 konst_630_wire_constant) (srl1_632)   $flowthrough 
    $delay EQ_u8_u1_631_inst 0
    // 	$volatile sra1 := (op == 13 )
    //  file prog.linked.opt.aa, line 269
    // (op == 13 )
    ==[EQ_u8_u1_636_inst] (op_560 konst_635_wire_constant) (sra1_637)   $flowthrough 
    $delay EQ_u8_u1_636_inst 0
    // 	$volatile bz1 := (op == 14 )
    //  file prog.linked.opt.aa, line 270
    // (op == 14 )
    ==[EQ_u8_u1_641_inst] (op_560 konst_640_wire_constant) (bz1_642)   $flowthrough 
    $delay EQ_u8_u1_641_inst 0
    // 	$volatile bn1 := (op == 15 )
    //  file prog.linked.opt.aa, line 271
    // (op == 15 )
    ==[EQ_u8_u1_646_inst] (op_560 konst_645_wire_constant) (bn1_647)   $flowthrough 
    $delay EQ_u8_u1_646_inst 0
    // 	$volatile call1 := (op == 16 )
    //  file prog.linked.opt.aa, line 272
    // (op == 16 )
    ==[EQ_u8_u1_651_inst] (op_560 konst_650_wire_constant) (call1_652)   $flowthrough 
    $delay EQ_u8_u1_651_inst 0
    // 	$volatile jmp1 := (op == 17 )
    //  file prog.linked.opt.aa, line 273
    // (op == 17 )
    ==[EQ_u8_u1_656_inst] (op_560 konst_655_wire_constant) (jmp1_657)   $flowthrough 
    $delay EQ_u8_u1_656_inst 0
    // 	$volatile cmp1 := (op == 18 )
    //  file prog.linked.opt.aa, line 274
    // (op == 18 )
    ==[EQ_u8_u1_661_inst] (op_560 konst_660_wire_constant) (cmp1_662)   $flowthrough 
    $delay EQ_u8_u1_661_inst 0
    // 	$call accessreg (1  rs1 0  ) (rs1_data ) 
    //  file prog.linked.opt.aa, line 275
    $call [call_stmt_667_call] $module accessreg(konst_663_wire_constant rs1_564 konst_665_wire_constant) (rs1_data_667)  
    $delay call_stmt_667_call 6
    $buffering  $in call_stmt_667_call konst_663_wire_constant 1
    $buffering  $in call_stmt_667_call rs1_564 1
    $buffering  $in call_stmt_667_call konst_665_wire_constant 1
    $buffering  $out call_stmt_667_call rs1_data_667 1
    // 	$call accessreg (1  rs2 0  ) (rs2_data ) 
    //  file prog.linked.opt.aa, line 276
    $call [call_stmt_672_call] $module accessreg(konst_668_wire_constant rs2_568 konst_670_wire_constant) (rs2_data_672)  
    $delay call_stmt_672_call 6
    $buffering  $in call_stmt_672_call konst_668_wire_constant 1
    $buffering  $in call_stmt_672_call rs2_568 1
    $buffering  $in call_stmt_672_call konst_670_wire_constant 1
    $buffering  $out call_stmt_672_call rs2_data_672 1
    // 	$guard (halt1) $call halt (pc ) (next_pc1 ) 
    //  file prog.linked.opt.aa, line 277
    // next_pc1
    $store [STORE_next_pc1_675_store_0] $to memory_space_1 (STORE_next_pc1_675_word_address_0 STORE_next_pc1_675_data_0) $guard ( halt1_577 ) 
    $delay STORE_next_pc1_675_store_0 5
    &/ [STORE_next_pc1_675_gather_scatter] (STORE_next_pc1_675_wire) (STORE_next_pc1_675_data_0) $guard ( halt1_577 ) 
    $flowthrough 
    $call [call_stmt_676_call] $module halt(pc) (STORE_next_pc1_675_wire) $guard ( halt1_577 )  
    $delay call_stmt_676_call 4
    $buffering  $in call_stmt_676_call pc 1
    $buffering  $out call_stmt_676_call STORE_next_pc1_675_wire 1
    // 	$guard (sbir1) $call sbir (rs1 rd pc ) (next_pc2 ) 
    //  file prog.linked.opt.aa, line 278
    $call [call_stmt_682_call] $module sbir(rs1_564 rd_572 pc) (next_pc2_682) $guard ( sbir1_582 )  
    $delay call_stmt_682_call 4
    $buffering  $in call_stmt_682_call rs1_564 1
    $buffering  $in call_stmt_682_call rd_572 1
    $buffering  $in call_stmt_682_call pc 1
    $buffering  $out call_stmt_682_call next_pc2_682 1
    // 	$guard (load1) $call load (rs1_data rd pc ) (next_pc3 ) 
    //  file prog.linked.opt.aa, line 279
    $call [call_stmt_688_call] $module load(rs1_data_667 rd_572 pc) (next_pc3_688) $guard ( load1_587 )  
    $delay call_stmt_688_call 4
    $buffering  $in call_stmt_688_call rs1_data_667 1
    $buffering  $in call_stmt_688_call rd_572 1
    $buffering  $in call_stmt_688_call pc 1
    $buffering  $out call_stmt_688_call next_pc3_688 1
    // 	$guard (store1) $call store (rs1_data rs2_data pc ) (next_pc4 ) 
    //  file prog.linked.opt.aa, line 280
    $call [call_stmt_694_call] $module store(rs1_data_667 rs2_data_672 pc) (next_pc4_694) $guard ( store1_592 )  
    $delay call_stmt_694_call 4
    $buffering  $in call_stmt_694_call rs1_data_667 1
    $buffering  $in call_stmt_694_call rs2_data_672 1
    $buffering  $in call_stmt_694_call pc 1
    $buffering  $out call_stmt_694_call next_pc4_694 1
    // 	$guard (and1) $call and_i (rs1_data rs2_data rd pc ) (next_pc5 ) 
    //  file prog.linked.opt.aa, line 281
    $call [call_stmt_701_call] $module and_i(rs1_data_667 rs2_data_672 rd_572 pc) (next_pc5_701) $guard ( and1_597 )  
    $delay call_stmt_701_call 4
    $buffering  $in call_stmt_701_call rs1_data_667 1
    $buffering  $in call_stmt_701_call rs2_data_672 1
    $buffering  $in call_stmt_701_call rd_572 1
    $buffering  $in call_stmt_701_call pc 1
    $buffering  $out call_stmt_701_call next_pc5_701 1
    // 	$guard (or1) $call or_i (rs1_data rs2_data rd pc ) (next_pc6 ) 
    //  file prog.linked.opt.aa, line 282
    $call [call_stmt_708_call] $module or_i(rs1_data_667 rs2_data_672 rd_572 pc) (next_pc6_708) $guard ( or1_602 )  
    $delay call_stmt_708_call 4
    $buffering  $in call_stmt_708_call rs1_data_667 1
    $buffering  $in call_stmt_708_call rs2_data_672 1
    $buffering  $in call_stmt_708_call rd_572 1
    $buffering  $in call_stmt_708_call pc 1
    $buffering  $out call_stmt_708_call next_pc6_708 1
    // 	$guard (xnor1) $call xnor_i (rs1_data rs2_data rd pc ) (next_pc7 ) 
    //  file prog.linked.opt.aa, line 283
    $call [call_stmt_715_call] $module xnor_i(rs1_data_667 rs2_data_672 rd_572 pc) (next_pc7_715) $guard ( xnor1_607 )  
    $delay call_stmt_715_call 4
    $buffering  $in call_stmt_715_call rs1_data_667 1
    $buffering  $in call_stmt_715_call rs2_data_672 1
    $buffering  $in call_stmt_715_call rd_572 1
    $buffering  $in call_stmt_715_call pc 1
    $buffering  $out call_stmt_715_call next_pc7_715 1
    // 	$guard (xor1) $call xor_i (rs1_data rs2_data rd pc ) (next_pc8 ) 
    //  file prog.linked.opt.aa, line 284
    $call [call_stmt_722_call] $module xor_i(rs1_data_667 rs2_data_672 rd_572 pc) (next_pc8_722) $guard ( xor1_612 )  
    $delay call_stmt_722_call 4
    $buffering  $in call_stmt_722_call rs1_data_667 1
    $buffering  $in call_stmt_722_call rs2_data_672 1
    $buffering  $in call_stmt_722_call rd_572 1
    $buffering  $in call_stmt_722_call pc 1
    $buffering  $out call_stmt_722_call next_pc8_722 1
    // 	$guard (add1) $call add (rs1_data rs2_data rd pc ) (next_pc9 ) 
    //  file prog.linked.opt.aa, line 285
    $call [call_stmt_729_call] $module add(rs1_data_667 rs2_data_672 rd_572 pc) (next_pc9_729) $guard ( add1_617 )  
    $delay call_stmt_729_call 4
    $buffering  $in call_stmt_729_call rs1_data_667 1
    $buffering  $in call_stmt_729_call rs2_data_672 1
    $buffering  $in call_stmt_729_call rd_572 1
    $buffering  $in call_stmt_729_call pc 1
    $buffering  $out call_stmt_729_call next_pc9_729 1
    // 	$guard (sub1) $call sub (rs1_data rs2_data rd pc ) (next_pc10 ) 
    //  file prog.linked.opt.aa, line 286
    $call [call_stmt_736_call] $module sub(rs1_data_667 rs2_data_672 rd_572 pc) (next_pc10_736) $guard ( sub1_622 )  
    $delay call_stmt_736_call 4
    $buffering  $in call_stmt_736_call rs1_data_667 1
    $buffering  $in call_stmt_736_call rs2_data_672 1
    $buffering  $in call_stmt_736_call rd_572 1
    $buffering  $in call_stmt_736_call pc 1
    $buffering  $out call_stmt_736_call next_pc10_736 1
    // 	$guard (sll1) $call sll_i (rs1_data rs2_data rd pc ) (next_pc11 ) 
    //  file prog.linked.opt.aa, line 287
    $call [call_stmt_743_call] $module sll_i(rs1_data_667 rs2_data_672 rd_572 pc) (next_pc11_743) $guard ( sll1_627 )  
    $delay call_stmt_743_call 4
    $buffering  $in call_stmt_743_call rs1_data_667 1
    $buffering  $in call_stmt_743_call rs2_data_672 1
    $buffering  $in call_stmt_743_call rd_572 1
    $buffering  $in call_stmt_743_call pc 1
    $buffering  $out call_stmt_743_call next_pc11_743 1
    // 	$guard (srl1) $call srl_i (rs1_data rs2_data rd pc ) (next_pc12 ) 
    //  file prog.linked.opt.aa, line 288
    $call [call_stmt_750_call] $module srl_i(rs1_data_667 rs2_data_672 rd_572 pc) (next_pc12_750) $guard ( srl1_632 )  
    $delay call_stmt_750_call 4
    $buffering  $in call_stmt_750_call rs1_data_667 1
    $buffering  $in call_stmt_750_call rs2_data_672 1
    $buffering  $in call_stmt_750_call rd_572 1
    $buffering  $in call_stmt_750_call pc 1
    $buffering  $out call_stmt_750_call next_pc12_750 1
    // 	$guard (sra1) $call sra_i (rs1_data rs2_data rd pc ) (next_pc13 ) 
    //  file prog.linked.opt.aa, line 289
    $call [call_stmt_757_call] $module sra_i(rs1_data_667 rs2_data_672 rd_572 pc) (next_pc13_757) $guard ( sra1_637 )  
    $delay call_stmt_757_call 4
    $buffering  $in call_stmt_757_call rs1_data_667 1
    $buffering  $in call_stmt_757_call rs2_data_672 1
    $buffering  $in call_stmt_757_call rd_572 1
    $buffering  $in call_stmt_757_call pc 1
    $buffering  $out call_stmt_757_call next_pc13_757 1
    // 	$guard (bz1) $call bz (rs1_data rs2_data rd pc ) (next_pc14 ) 
    //  file prog.linked.opt.aa, line 290
    $call [call_stmt_764_call] $module bz(rs1_data_667 rs2_data_672 rd_572 pc) (next_pc14_764) $guard ( bz1_642 )  
    $delay call_stmt_764_call 4
    $buffering  $in call_stmt_764_call rs1_data_667 1
    $buffering  $in call_stmt_764_call rs2_data_672 1
    $buffering  $in call_stmt_764_call rd_572 1
    $buffering  $in call_stmt_764_call pc 1
    $buffering  $out call_stmt_764_call next_pc14_764 1
    // 	$guard (bn1) $call bn (rs1_data rs2_data rd pc ) (next_pc15 ) 
    //  file prog.linked.opt.aa, line 291
    $call [call_stmt_771_call] $module bn(rs1_data_667 rs2_data_672 rd_572 pc) (next_pc15_771) $guard ( bn1_647 )  
    $delay call_stmt_771_call 4
    $buffering  $in call_stmt_771_call rs1_data_667 1
    $buffering  $in call_stmt_771_call rs2_data_672 1
    $buffering  $in call_stmt_771_call rd_572 1
    $buffering  $in call_stmt_771_call pc 1
    $buffering  $out call_stmt_771_call next_pc15_771 1
    // 	$guard (call1) $call call (rs1_data rs2_data rd pc ) (next_pc16 ) 
    //  file prog.linked.opt.aa, line 292
    $call [call_stmt_778_call] $module call(rs1_data_667 rs2_data_672 rd_572 pc) (next_pc16_778) $guard ( call1_652 )  
    $delay call_stmt_778_call 4
    $buffering  $in call_stmt_778_call rs1_data_667 1
    $buffering  $in call_stmt_778_call rs2_data_672 1
    $buffering  $in call_stmt_778_call rd_572 1
    $buffering  $in call_stmt_778_call pc 1
    $buffering  $out call_stmt_778_call next_pc16_778 1
    // 	$guard (jmp1) $call jmp (rs1_data pc ) (next_pc17 ) 
    //  file prog.linked.opt.aa, line 293
    $call [call_stmt_783_call] $module jmp(rs1_data_667 pc) (next_pc17_783) $guard ( jmp1_657 )  
    $delay call_stmt_783_call 4
    $buffering  $in call_stmt_783_call rs1_data_667 1
    $buffering  $in call_stmt_783_call pc 1
    $buffering  $out call_stmt_783_call next_pc17_783 1
    // 	$guard (cmp1) $call cmp (rs1_data rs2_data rd pc ) (next_pc18 ) 
    //  file prog.linked.opt.aa, line 294
    $call [call_stmt_790_call] $module cmp(rs1_data_667 rs2_data_672 rd_572 pc) (next_pc18_790) $guard ( cmp1_662 )  
    $delay call_stmt_790_call 4
    $buffering  $in call_stmt_790_call rs1_data_667 1
    $buffering  $in call_stmt_790_call rs2_data_672 1
    $buffering  $in call_stmt_790_call rd_572 1
    $buffering  $in call_stmt_790_call pc 1
    $buffering  $out call_stmt_790_call next_pc18_790 1
    // 	next_pc := ( $mux (op == 1 ) next_pc1  ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 295
    // (op == 1 )
    ==[EQ_u8_u1_794_inst] (op_560 konst_793_wire_constant) (EQ_u8_u1_794_wire)   $flowthrough 
    $delay EQ_u8_u1_794_inst 0
    // next_pc1
    $load [LOAD_next_pc1_795_load_0] $from memory_space_1 (LOAD_next_pc1_795_word_address_0) (LOAD_next_pc1_795_data_0) 
    $delay LOAD_next_pc1_795_load_0 5
    &/ [LOAD_next_pc1_795_gather_scatter] (LOAD_next_pc1_795_data_0) (LOAD_next_pc1_795_wire) 
    $flowthrough 
    // (op == 2 )
    ==[EQ_u8_u1_798_inst] (op_560 konst_797_wire_constant) (EQ_u8_u1_798_wire)   $flowthrough 
    $delay EQ_u8_u1_798_inst 0
    // (op == 3 )
    ==[EQ_u8_u1_802_inst] (op_560 konst_801_wire_constant) (EQ_u8_u1_802_wire)   $flowthrough 
    $delay EQ_u8_u1_802_inst 0
    // (op == 4 )
    ==[EQ_u8_u1_806_inst] (op_560 konst_805_wire_constant) (EQ_u8_u1_806_wire)   $flowthrough 
    $delay EQ_u8_u1_806_inst 0
    // (op == 5 )
    ==[EQ_u8_u1_810_inst] (op_560 konst_809_wire_constant) (EQ_u8_u1_810_wire)   $flowthrough 
    $delay EQ_u8_u1_810_inst 0
    // (op == 6 )
    ==[EQ_u8_u1_814_inst] (op_560 konst_813_wire_constant) (EQ_u8_u1_814_wire)   $flowthrough 
    $delay EQ_u8_u1_814_inst 0
    // (op == 7 )
    ==[EQ_u8_u1_818_inst] (op_560 konst_817_wire_constant) (EQ_u8_u1_818_wire)   $flowthrough 
    $delay EQ_u8_u1_818_inst 0
    // (op == 8 )
    ==[EQ_u8_u1_822_inst] (op_560 konst_821_wire_constant) (EQ_u8_u1_822_wire)   $flowthrough 
    $delay EQ_u8_u1_822_inst 0
    // (op == 9 )
    ==[EQ_u8_u1_826_inst] (op_560 konst_825_wire_constant) (EQ_u8_u1_826_wire)   $flowthrough 
    $delay EQ_u8_u1_826_inst 0
    // (op == 10 )
    ==[EQ_u8_u1_830_inst] (op_560 konst_829_wire_constant) (EQ_u8_u1_830_wire)   $flowthrough 
    $delay EQ_u8_u1_830_inst 0
    // (op == 11 )
    ==[EQ_u8_u1_834_inst] (op_560 konst_833_wire_constant) (EQ_u8_u1_834_wire)   $flowthrough 
    $delay EQ_u8_u1_834_inst 0
    // (op == 12 )
    ==[EQ_u8_u1_838_inst] (op_560 konst_837_wire_constant) (EQ_u8_u1_838_wire)   $flowthrough 
    $delay EQ_u8_u1_838_inst 0
    // (op == 13 )
    ==[EQ_u8_u1_842_inst] (op_560 konst_841_wire_constant) (EQ_u8_u1_842_wire)   $flowthrough 
    $delay EQ_u8_u1_842_inst 0
    // (op == 14 )
    ==[EQ_u8_u1_846_inst] (op_560 konst_845_wire_constant) (EQ_u8_u1_846_wire)   $flowthrough 
    $delay EQ_u8_u1_846_inst 0
    // (op == 15 )
    ==[EQ_u8_u1_850_inst] (op_560 konst_849_wire_constant) (EQ_u8_u1_850_wire)   $flowthrough 
    $delay EQ_u8_u1_850_inst 0
    // (op == 16 )
    ==[EQ_u8_u1_854_inst] (op_560 konst_853_wire_constant) (EQ_u8_u1_854_wire)   $flowthrough 
    $delay EQ_u8_u1_854_inst 0
    // (op == 17 )
    ==[EQ_u8_u1_858_inst] (op_560 konst_857_wire_constant) (EQ_u8_u1_858_wire)   $flowthrough 
    $delay EQ_u8_u1_858_inst 0
    // (op == 18 )
    ==[EQ_u8_u1_862_inst] (op_560 konst_861_wire_constant) (EQ_u8_u1_862_wire)   $flowthrough 
    $delay EQ_u8_u1_862_inst 0
    // ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) ) 
    ? [MUX_866_inst] (EQ_u8_u1_862_wire next_pc18_790 type_cast_865_wire_constant) (MUX_866_wire)  $flowthrough
    // ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  ) 
    ? [MUX_867_inst] (EQ_u8_u1_858_wire next_pc17_783 MUX_866_wire) (MUX_867_wire)  $flowthrough
    // ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  ) 
    ? [MUX_868_inst] (EQ_u8_u1_854_wire next_pc16_778 MUX_867_wire) (MUX_868_wire)  $flowthrough
    // ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  ) 
    ? [MUX_869_inst] (EQ_u8_u1_850_wire next_pc15_771 MUX_868_wire) (MUX_869_wire)  $flowthrough
    // ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  ) 
    ? [MUX_870_inst] (EQ_u8_u1_846_wire next_pc14_764 MUX_869_wire) (MUX_870_wire)  $flowthrough
    // ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  ) 
    ? [MUX_871_inst] (EQ_u8_u1_842_wire next_pc13_757 MUX_870_wire) (MUX_871_wire)  $flowthrough
    // ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  ) 
    ? [MUX_872_inst] (EQ_u8_u1_838_wire next_pc12_750 MUX_871_wire) (MUX_872_wire)  $flowthrough
    // ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  ) 
    ? [MUX_873_inst] (EQ_u8_u1_834_wire next_pc11_743 MUX_872_wire) (MUX_873_wire)  $flowthrough
    // ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  ) 
    ? [MUX_874_inst] (EQ_u8_u1_830_wire next_pc10_736 MUX_873_wire) (MUX_874_wire)  $flowthrough
    // ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  ) 
    ? [MUX_875_inst] (EQ_u8_u1_826_wire next_pc9_729 MUX_874_wire) (MUX_875_wire)  $flowthrough
    // ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  ) 
    ? [MUX_876_inst] (EQ_u8_u1_822_wire next_pc8_722 MUX_875_wire) (MUX_876_wire)  $flowthrough
    // ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  ) 
    ? [MUX_877_inst] (EQ_u8_u1_818_wire next_pc7_715 MUX_876_wire) (MUX_877_wire)  $flowthrough
    // ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  ) 
    ? [MUX_878_inst] (EQ_u8_u1_814_wire next_pc6_708 MUX_877_wire) (MUX_878_wire)  $flowthrough
    // ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    ? [MUX_879_inst] (EQ_u8_u1_810_wire next_pc5_701 MUX_878_wire) (MUX_879_wire)  $flowthrough
    // ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    ? [MUX_880_inst] (EQ_u8_u1_806_wire next_pc4_694 MUX_879_wire) (MUX_880_wire)  $flowthrough
    // ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    ? [MUX_881_inst] (EQ_u8_u1_802_wire next_pc3_688 MUX_880_wire) (MUX_881_wire)  $flowthrough
    // ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    ? [MUX_882_inst] (EQ_u8_u1_798_wire next_pc2_682 MUX_881_wire) (MUX_882_wire)  $flowthrough
    // ( $mux (op == 1 ) next_pc1  ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
    ? [MUX_883_inst] (EQ_u8_u1_794_wire LOAD_next_pc1_795_wire MUX_882_wire) (next_pc) 
    $buffering  $out MUX_883_inst next_pc 1
  }
  // end data-path
  // 	$volatile op := ( $slice inst 31 24 ) 
  //  file prog.linked.opt.aa, line 253
  // inst
  // 	$volatile rs1 := ( $slice inst 23 16 ) 
  //  file prog.linked.opt.aa, line 254
  // inst
  // 	$volatile rs2 := ( $slice inst 15 8 ) 
  //  file prog.linked.opt.aa, line 255
  // inst
  // 	$volatile rd := ( $slice inst 7 0 ) 
  //  file prog.linked.opt.aa, line 256
  // inst
  // 	$volatile halt1 := (op == 1 )
  //  file prog.linked.opt.aa, line 257
  // (op == 1 )
  // op
  // 	$volatile sbir1 := (op == 2 )
  //  file prog.linked.opt.aa, line 258
  // (op == 2 )
  // op
  // 	$volatile load1 := (op == 3 )
  //  file prog.linked.opt.aa, line 259
  // (op == 3 )
  // op
  // 	$volatile store1 := (op == 4 )
  //  file prog.linked.opt.aa, line 260
  // (op == 4 )
  // op
  // 	$volatile and1 := (op == 5 )
  //  file prog.linked.opt.aa, line 261
  // (op == 5 )
  // op
  // 	$volatile or1 := (op == 6 )
  //  file prog.linked.opt.aa, line 262
  // (op == 6 )
  // op
  // 	$volatile xnor1 := (op == 7 )
  //  file prog.linked.opt.aa, line 263
  // (op == 7 )
  // op
  // 	$volatile xor1 := (op == 8 )
  //  file prog.linked.opt.aa, line 264
  // (op == 8 )
  // op
  // 	$volatile add1 := (op == 9 )
  //  file prog.linked.opt.aa, line 265
  // (op == 9 )
  // op
  // 	$volatile sub1 := (op == 10 )
  //  file prog.linked.opt.aa, line 266
  // (op == 10 )
  // op
  // 	$volatile sll1 := (op == 11 )
  //  file prog.linked.opt.aa, line 267
  // (op == 11 )
  // op
  // 	$volatile srl1 := (op == 12 )
  //  file prog.linked.opt.aa, line 268
  // (op == 12 )
  // op
  // 	$volatile sra1 := (op == 13 )
  //  file prog.linked.opt.aa, line 269
  // (op == 13 )
  // op
  // 	$volatile bz1 := (op == 14 )
  //  file prog.linked.opt.aa, line 270
  // (op == 14 )
  // op
  // 	$volatile bn1 := (op == 15 )
  //  file prog.linked.opt.aa, line 271
  // (op == 15 )
  // op
  // 	$volatile call1 := (op == 16 )
  //  file prog.linked.opt.aa, line 272
  // (op == 16 )
  // op
  // 	$volatile jmp1 := (op == 17 )
  //  file prog.linked.opt.aa, line 273
  // (op == 17 )
  // op
  // 	$volatile cmp1 := (op == 18 )
  //  file prog.linked.opt.aa, line 274
  // (op == 18 )
  // op
  // 	$call accessreg (1  rs1 0  ) (rs1_data ) 
  //  file prog.linked.opt.aa, line 275
  // rs1
  call_stmt_667_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_667_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_667_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_667_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_667_Update/cca)
  // 	$call accessreg (1  rs2 0  ) (rs2_data ) 
  //  file prog.linked.opt.aa, line 276
  // rs2
  call_stmt_672_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_672_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_672_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_672_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_672_Update/cca)
  // 	$guard (halt1) $call halt (pc ) (next_pc1 ) 
  //  file prog.linked.opt.aa, line 277
  // pc
  // next_pc1
  STORE_next_pc1_675_gather_scatter <=> (assign_stmt_560_to_assign_stmt_884/STORE_next_pc1_675_Sample/STORE_next_pc1_675_Split/split_req) (assign_stmt_560_to_assign_stmt_884/STORE_next_pc1_675_Sample/STORE_next_pc1_675_Split/split_ack)
  STORE_next_pc1_675_store_0 <=> (assign_stmt_560_to_assign_stmt_884/STORE_next_pc1_675_Sample/word_access_start/word_0/rr assign_stmt_560_to_assign_stmt_884/STORE_next_pc1_675_Update/word_access_complete/word_0/cr) (assign_stmt_560_to_assign_stmt_884/STORE_next_pc1_675_Sample/word_access_start/word_0/ra assign_stmt_560_to_assign_stmt_884/STORE_next_pc1_675_Update/word_access_complete/word_0/ca)
  call_stmt_676_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_676_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_676_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_676_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_676_Update/cca)
  // 	$guard (sbir1) $call sbir (rs1 rd pc ) (next_pc2 ) 
  //  file prog.linked.opt.aa, line 278
  // rs1
  // rd
  // pc
  call_stmt_682_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_682_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_682_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_682_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_682_Update/cca)
  // 	$guard (load1) $call load (rs1_data rd pc ) (next_pc3 ) 
  //  file prog.linked.opt.aa, line 279
  // rs1_data
  // rd
  // pc
  call_stmt_688_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_688_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_688_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_688_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_688_Update/cca)
  // 	$guard (store1) $call store (rs1_data rs2_data pc ) (next_pc4 ) 
  //  file prog.linked.opt.aa, line 280
  // rs1_data
  // rs2_data
  // pc
  call_stmt_694_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_694_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_694_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_694_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_694_Update/cca)
  // 	$guard (and1) $call and_i (rs1_data rs2_data rd pc ) (next_pc5 ) 
  //  file prog.linked.opt.aa, line 281
  // rs1_data
  // rs2_data
  // rd
  // pc
  call_stmt_701_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_701_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_701_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_701_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_701_Update/cca)
  // 	$guard (or1) $call or_i (rs1_data rs2_data rd pc ) (next_pc6 ) 
  //  file prog.linked.opt.aa, line 282
  // rs1_data
  // rs2_data
  // rd
  // pc
  call_stmt_708_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_708_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_708_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_708_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_708_Update/cca)
  // 	$guard (xnor1) $call xnor_i (rs1_data rs2_data rd pc ) (next_pc7 ) 
  //  file prog.linked.opt.aa, line 283
  // rs1_data
  // rs2_data
  // rd
  // pc
  call_stmt_715_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_715_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_715_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_715_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_715_Update/cca)
  // 	$guard (xor1) $call xor_i (rs1_data rs2_data rd pc ) (next_pc8 ) 
  //  file prog.linked.opt.aa, line 284
  // rs1_data
  // rs2_data
  // rd
  // pc
  call_stmt_722_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_722_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_722_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_722_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_722_Update/cca)
  // 	$guard (add1) $call add (rs1_data rs2_data rd pc ) (next_pc9 ) 
  //  file prog.linked.opt.aa, line 285
  // rs1_data
  // rs2_data
  // rd
  // pc
  call_stmt_729_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_729_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_729_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_729_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_729_Update/cca)
  // 	$guard (sub1) $call sub (rs1_data rs2_data rd pc ) (next_pc10 ) 
  //  file prog.linked.opt.aa, line 286
  // rs1_data
  // rs2_data
  // rd
  // pc
  call_stmt_736_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_736_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_736_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_736_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_736_Update/cca)
  // 	$guard (sll1) $call sll_i (rs1_data rs2_data rd pc ) (next_pc11 ) 
  //  file prog.linked.opt.aa, line 287
  // rs1_data
  // rs2_data
  // rd
  // pc
  call_stmt_743_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_743_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_743_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_743_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_743_Update/cca)
  // 	$guard (srl1) $call srl_i (rs1_data rs2_data rd pc ) (next_pc12 ) 
  //  file prog.linked.opt.aa, line 288
  // rs1_data
  // rs2_data
  // rd
  // pc
  call_stmt_750_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_750_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_750_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_750_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_750_Update/cca)
  // 	$guard (sra1) $call sra_i (rs1_data rs2_data rd pc ) (next_pc13 ) 
  //  file prog.linked.opt.aa, line 289
  // rs1_data
  // rs2_data
  // rd
  // pc
  call_stmt_757_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_757_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_757_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_757_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_757_Update/cca)
  // 	$guard (bz1) $call bz (rs1_data rs2_data rd pc ) (next_pc14 ) 
  //  file prog.linked.opt.aa, line 290
  // rs1_data
  // rs2_data
  // rd
  // pc
  call_stmt_764_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_764_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_764_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_764_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_764_Update/cca)
  // 	$guard (bn1) $call bn (rs1_data rs2_data rd pc ) (next_pc15 ) 
  //  file prog.linked.opt.aa, line 291
  // rs1_data
  // rs2_data
  // rd
  // pc
  call_stmt_771_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_771_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_771_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_771_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_771_Update/cca)
  // 	$guard (call1) $call call (rs1_data rs2_data rd pc ) (next_pc16 ) 
  //  file prog.linked.opt.aa, line 292
  // rs1_data
  // rs2_data
  // rd
  // pc
  call_stmt_778_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_778_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_778_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_778_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_778_Update/cca)
  // 	$guard (jmp1) $call jmp (rs1_data pc ) (next_pc17 ) 
  //  file prog.linked.opt.aa, line 293
  // rs1_data
  // pc
  call_stmt_783_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_783_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_783_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_783_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_783_Update/cca)
  // 	$guard (cmp1) $call cmp (rs1_data rs2_data rd pc ) (next_pc18 ) 
  //  file prog.linked.opt.aa, line 294
  // rs1_data
  // rs2_data
  // rd
  // pc
  call_stmt_790_call <=> (assign_stmt_560_to_assign_stmt_884/call_stmt_790_Sample/crr assign_stmt_560_to_assign_stmt_884/call_stmt_790_Update/ccr) (assign_stmt_560_to_assign_stmt_884/call_stmt_790_Sample/cra assign_stmt_560_to_assign_stmt_884/call_stmt_790_Update/cca)
  // 	next_pc := ( $mux (op == 1 ) next_pc1  ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 295
  // (op == 1 )
  // op
  // next_pc1
  LOAD_next_pc1_795_gather_scatter <=> (assign_stmt_560_to_assign_stmt_884/LOAD_next_pc1_795_Update/LOAD_next_pc1_795_Merge/merge_req) (assign_stmt_560_to_assign_stmt_884/LOAD_next_pc1_795_Update/LOAD_next_pc1_795_Merge/merge_ack)
  LOAD_next_pc1_795_load_0 <=> (assign_stmt_560_to_assign_stmt_884/LOAD_next_pc1_795_Sample/word_access_start/word_0/rr assign_stmt_560_to_assign_stmt_884/LOAD_next_pc1_795_Update/word_access_complete/word_0/cr) (assign_stmt_560_to_assign_stmt_884/LOAD_next_pc1_795_Sample/word_access_start/word_0/ra assign_stmt_560_to_assign_stmt_884/LOAD_next_pc1_795_Update/word_access_complete/word_0/ca)
  // (op == 2 )
  // op
  // next_pc2
  // (op == 3 )
  // op
  // next_pc3
  // (op == 4 )
  // op
  // next_pc4
  // (op == 5 )
  // op
  // next_pc5
  // (op == 6 )
  // op
  // next_pc6
  // (op == 7 )
  // op
  // next_pc7
  // (op == 8 )
  // op
  // next_pc8
  // (op == 9 )
  // op
  // next_pc9
  // (op == 10 )
  // op
  // next_pc10
  // (op == 11 )
  // op
  // next_pc11
  // (op == 12 )
  // op
  // next_pc12
  // (op == 13 )
  // op
  // next_pc13
  // (op == 14 )
  // op
  // next_pc14
  // (op == 15 )
  // op
  // next_pc15
  // (op == 16 )
  // op
  // next_pc16
  // (op == 17 )
  // op
  // next_pc17
  // (op == 18 )
  // op
  // next_pc18
  // ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) ) 
  // ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  ) 
  // ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  ) 
  // ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  ) 
  // ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  ) 
  // ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  ) 
  // ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  ) 
  // ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  ) 
  // ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  ) 
  // ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  ) 
  // ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  ) 
  // ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  ) 
  // ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  ) 
  // ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
  // ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
  // ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
  // ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
  // ( $mux (op == 1 ) next_pc1  ( $mux (op == 2 ) next_pc2  ( $mux (op == 3 ) next_pc3  ( $mux (op == 4 ) next_pc4  ( $mux (op == 5 ) next_pc5  ( $mux (op == 6 ) next_pc6  ( $mux (op == 7 ) next_pc7  ( $mux (op == 8 ) next_pc8  ( $mux (op == 9 ) next_pc9  ( $mux (op == 10 ) next_pc10  ( $mux (op == 11 ) next_pc11  ( $mux (op == 12 ) next_pc12  ( $mux (op == 13 ) next_pc13  ( $mux (op == 14 ) next_pc14  ( $mux (op == 15 ) next_pc15  ( $mux (op == 16 ) next_pc16  ( $mux (op == 17 ) next_pc17  ( $mux (op == 18 ) next_pc18  ($bitcast ($uint<8>) 0  ) )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  )  ) 
  MUX_883_inst <=> (assign_stmt_560_to_assign_stmt_884/MUX_883_start/req assign_stmt_560_to_assign_stmt_884/MUX_883_complete/req) (assign_stmt_560_to_assign_stmt_884/MUX_883_start/ack assign_stmt_560_to_assign_stmt_884/MUX_883_complete/ack)
}
$module [try1] 
{
  // pipe-declarations for block %try1
  //  file prog.linked.opt.aa, line 297
  // pipe-declarations for block %try1%loop
  //  file prog.linked.opt.aa, line 305
  // pipe-declarations for block %try1%loop%
  //  file prog.linked.opt.aa, line 307
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_890_to_call_stmt_891] 
    {
      // start: 	$call init_mem () () 
      //  file prog.linked.opt.aa, line 303
      $T[call_stmt_890_sample_start_] 
      $T[call_stmt_890_sample_completed_] 
      $T[call_stmt_890_update_start_] 
      $T[call_stmt_890_update_completed_] 
      ;;[call_stmt_890_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_890_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_890_sample_start_ &-> (call_stmt_890_Sample)
      call_stmt_890_sample_completed_ <-& (call_stmt_890_Sample)
      call_stmt_890_sample_completed_ &-> ($null)
      call_stmt_890_update_start_ &-> (call_stmt_890_Update)
      call_stmt_890_update_completed_ <-& (call_stmt_890_Update)
      // end: 	$call init_mem () () 
      // start: 	$call init_reg () () 
      //  file prog.linked.opt.aa, line 304
      $T[call_stmt_891_sample_start_] 
      $T[call_stmt_891_sample_completed_] 
      $T[call_stmt_891_update_start_] 
      $T[call_stmt_891_update_completed_] 
      ;;[call_stmt_891_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_891_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_891_sample_start_ &-> (call_stmt_891_Sample)
      call_stmt_891_sample_completed_ <-& (call_stmt_891_Sample)
      call_stmt_891_sample_completed_ &-> ($null)
      call_stmt_891_update_start_ &-> (call_stmt_891_Update)
      call_stmt_891_update_completed_ <-& (call_stmt_891_Update)
      // end: 	$call init_reg () () 
      // load-store dependencies..
      // memory-space  memory_space_0
      //  call_stmt_890 store
      // memory-space  memory_space_2
      //  call_stmt_891 store
    }
    <>[branch_block_stmt_892] // Branch Block  file prog.linked.opt.aa, line 305
    {
      $P [branch_block_stmt_892__entry__]
      branch_block_stmt_892__entry__ <-| ($entry)
      $P [branch_block_stmt_892__exit__]
      branch_block_stmt_892__exit__ |-> ($exit)
      $P [merge_stmt_893__entry__] 
      $P [merge_stmt_893__exit__] 
      $P [assign_stmt_902_to_assign_stmt_932__entry__] 
      $P [assign_stmt_902_to_assign_stmt_932__exit__] 
      $P [loopback]
      ::[assign_stmt_902_to_assign_stmt_932] 
      {
        // start:  		inst1 := write_mem// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 311
        // Source expression
        // write_mem
        $T[RPIPE_write_mem_901_sample_start_] 
        $T[RPIPE_write_mem_901_sample_completed_] 
        $T[RPIPE_write_mem_901_update_start_] 
        $T[RPIPE_write_mem_901_update_completed_] 
        ;;[RPIPE_write_mem_901_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_write_mem_901_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_write_mem_901_sample_start_ &-> (RPIPE_write_mem_901_Sample)
        RPIPE_write_mem_901_sample_completed_ <-& (RPIPE_write_mem_901_Sample)
        RPIPE_write_mem_901_update_start_ <-& (RPIPE_write_mem_901_sample_completed_)
        RPIPE_write_mem_901_update_start_ &-> (RPIPE_write_mem_901_Update)
        RPIPE_write_mem_901_update_completed_ <-& (RPIPE_write_mem_901_Update)
        // Target expression
        // (as target) inst1
        // start: WAR dependencies for inst1
        // done: WAR dependencies for inst1
        // end:  		inst1 := write_mem// bits of buffering = 8. 
        // start:  		inst2 := write_mem// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 312
        // Source expression
        // write_mem
        $T[RPIPE_write_mem_904_sample_start_] 
        $T[RPIPE_write_mem_904_sample_completed_] 
        $T[RPIPE_write_mem_904_update_start_] 
        $T[RPIPE_write_mem_904_update_completed_] 
        ;;[RPIPE_write_mem_904_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_write_mem_904_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_write_mem_904_sample_start_ &-> (RPIPE_write_mem_904_Sample)
        RPIPE_write_mem_904_sample_completed_ <-& (RPIPE_write_mem_904_Sample)
        RPIPE_write_mem_904_update_start_ <-& (RPIPE_write_mem_904_sample_completed_)
        RPIPE_write_mem_904_update_start_ &-> (RPIPE_write_mem_904_Update)
        RPIPE_write_mem_904_update_completed_ <-& (RPIPE_write_mem_904_Update)
        // Target expression
        // (as target) inst2
        // start: WAR dependencies for inst2
        // done: WAR dependencies for inst2
        // end:  		inst2 := write_mem// bits of buffering = 8. 
        // start:  		inst3 := write_mem// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 313
        // Source expression
        // write_mem
        $T[RPIPE_write_mem_907_sample_start_] 
        $T[RPIPE_write_mem_907_sample_completed_] 
        $T[RPIPE_write_mem_907_update_start_] 
        $T[RPIPE_write_mem_907_update_completed_] 
        ;;[RPIPE_write_mem_907_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_write_mem_907_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_write_mem_907_sample_start_ &-> (RPIPE_write_mem_907_Sample)
        RPIPE_write_mem_907_sample_completed_ <-& (RPIPE_write_mem_907_Sample)
        RPIPE_write_mem_907_update_start_ <-& (RPIPE_write_mem_907_sample_completed_)
        RPIPE_write_mem_907_update_start_ &-> (RPIPE_write_mem_907_Update)
        RPIPE_write_mem_907_update_completed_ <-& (RPIPE_write_mem_907_Update)
        // Target expression
        // (as target) inst3
        // start: WAR dependencies for inst3
        // done: WAR dependencies for inst3
        // end:  		inst3 := write_mem// bits of buffering = 8. 
        // start:  		inst4 := write_mem// bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 314
        // Source expression
        // write_mem
        $T[RPIPE_write_mem_910_sample_start_] 
        $T[RPIPE_write_mem_910_sample_completed_] 
        $T[RPIPE_write_mem_910_update_start_] 
        $T[RPIPE_write_mem_910_update_completed_] 
        ;;[RPIPE_write_mem_910_Sample] 
        {
          // pipe read sample
          $T [rr] $T [ra] 
        }
        ;;[RPIPE_write_mem_910_Update] 
        {
          // pipe read update
          $T [cr] $T [ca] 
        }
        RPIPE_write_mem_910_sample_start_ &-> (RPIPE_write_mem_910_Sample)
        RPIPE_write_mem_910_sample_completed_ <-& (RPIPE_write_mem_910_Sample)
        RPIPE_write_mem_910_update_start_ <-& (RPIPE_write_mem_910_sample_completed_)
        RPIPE_write_mem_910_update_start_ &-> (RPIPE_write_mem_910_Update)
        RPIPE_write_mem_910_update_completed_ <-& (RPIPE_write_mem_910_Update)
        // Target expression
        // (as target) inst4
        // start: WAR dependencies for inst4
        // done: WAR dependencies for inst4
        // end:  		inst4 := write_mem// bits of buffering = 8. 
        // start:  		inst := ((inst1 && inst2) && (inst3 && inst4))// bits of buffering = 32. 
        //  file prog.linked.opt.aa, line 315
        // Source expression
        // ((inst1 && inst2) && (inst3 && inst4))
        $T[CONCAT_u16_u32_919_sample_start_] 
        $T[CONCAT_u16_u32_919_sample_completed_] 
        $T[CONCAT_u16_u32_919_update_start_] 
        $T[CONCAT_u16_u32_919_update_completed_] 
        // (inst1 && inst2)
        // inst1
        // inst2
        // (inst3 && inst4)
        // inst3
        // inst4
        // start: Forward dependencies from (inst1 && inst2) to transition CONCAT_u16_u32_919_sample_start_
        CONCAT_u16_u32_919_sample_start_ <-& (RPIPE_write_mem_901_update_completed_)
        CONCAT_u16_u32_919_sample_start_ <-& (RPIPE_write_mem_904_update_completed_)
        // done: Forward dependencies from (inst1 && inst2) to transition CONCAT_u16_u32_919_sample_start_
        // start: Forward dependencies from (inst3 && inst4) to transition CONCAT_u16_u32_919_sample_start_
        CONCAT_u16_u32_919_sample_start_ <-& (RPIPE_write_mem_907_update_completed_)
        CONCAT_u16_u32_919_sample_start_ <-& (RPIPE_write_mem_910_update_completed_)
        // done: Forward dependencies from (inst3 && inst4) to transition CONCAT_u16_u32_919_sample_start_
        ;;[CONCAT_u16_u32_919_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u16_u32_919_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u16_u32_919_sample_start_ &-> (CONCAT_u16_u32_919_Sample)
        CONCAT_u16_u32_919_sample_completed_ <-& (CONCAT_u16_u32_919_Sample)
        CONCAT_u16_u32_919_sample_completed_ &-> ($null)
        CONCAT_u16_u32_919_update_start_ &-> (CONCAT_u16_u32_919_Update)
        CONCAT_u16_u32_919_update_completed_ <-& (CONCAT_u16_u32_919_Update)
        // Target expression
        // (as target) inst
        // start: WAR dependencies for inst
        // done: WAR dependencies for inst
        // end:  		inst := ((inst1 && inst2) && (inst3 && inst4))// bits of buffering = 32. 
        // start: 		$call try (pc inst ) (next_pc )  $mark FIRST 
        //  file prog.linked.opt.aa, line 316
        $T[call_stmt_924_sample_start_] 
        $T[call_stmt_924_sample_completed_] 
        $T[call_stmt_924_update_start_] 
        $T[call_stmt_924_update_completed_] 
        // Call input argument 0
        // pc
        // Call input argument 1
        // inst
        // start: Forward dependencies from pc to transition call_stmt_924_sample_start_
        // done: Forward dependencies from pc to transition call_stmt_924_sample_start_
        // start: Forward dependencies from inst to transition call_stmt_924_sample_start_
        call_stmt_924_sample_start_ <-& (CONCAT_u16_u32_919_update_completed_)
        // done: Forward dependencies from inst to transition call_stmt_924_sample_start_
        ;;[call_stmt_924_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_924_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_924_sample_start_ &-> (call_stmt_924_Sample)
        call_stmt_924_sample_completed_ <-& (call_stmt_924_Sample)
        call_stmt_924_sample_completed_ &-> ($null)
        call_stmt_924_update_start_ &-> (call_stmt_924_Update)
        call_stmt_924_update_completed_ <-& (call_stmt_924_Update)
        // Call output argument 0
        // (as target) next_pc
        // start: WAR dependencies for next_pc
        // done: WAR dependencies for next_pc
        // end: 		$call try (pc inst ) (next_pc )  $mark FIRST 
        // start:  		reg_output := pc $synch ( $update FIRST )  // bits of buffering = 8. 
        //  file prog.linked.opt.aa, line 317
        // Source expression
        // pc
        // Target expression
        // (as target) reg_output
        $T[WPIPE_reg_output_925_sample_start_] 
        $T[WPIPE_reg_output_925_sample_completed_] 
        $T[WPIPE_reg_output_925_update_start_] 
        $T[WPIPE_reg_output_925_update_completed_] 
        ;;[WPIPE_reg_output_925_Sample] 
        {
          // pipe write sample-start reg_output
          $T [req] $T [ack] 
        }
        ;;[WPIPE_reg_output_925_Update] 
        {
          // pipe write update (complete) reg_output
          $T [req] $T [ack] 
        }
        WPIPE_reg_output_925_sample_start_ &-> (WPIPE_reg_output_925_Sample)
        WPIPE_reg_output_925_sample_completed_ <-& (WPIPE_reg_output_925_Sample)
        WPIPE_reg_output_925_update_start_ <-& (WPIPE_reg_output_925_sample_completed_)
        WPIPE_reg_output_925_update_start_ &-> (WPIPE_reg_output_925_Update)
        WPIPE_reg_output_925_update_completed_ <-& (WPIPE_reg_output_925_Update)
        // start: Forward dependencies from pc to transition WPIPE_reg_output_925_sample_start_
        // done: Forward dependencies from pc to transition WPIPE_reg_output_925_sample_start_
        // forced synch: synched statement will start after marked statement
        $T [synch_WPIPE_reg_output_925_sample_start__call_stmt_924_sample_completed_]  $delay
        synch_WPIPE_reg_output_925_sample_start__call_stmt_924_sample_completed_ <-& (call_stmt_924_update_completed_)
        WPIPE_reg_output_925_sample_start_ <-& (synch_WPIPE_reg_output_925_sample_start__call_stmt_924_sample_completed_)
        // end:  		reg_output := pc $synch ( $update FIRST )  // bits of buffering = 8. 
        // start:  		LEDS := (zero8 && pc)// bits of buffering = 16. 
        //  file prog.linked.opt.aa, line 318
        // Source expression
        // (zero8 && pc)
        $T[CONCAT_u8_u16_931_sample_start_] 
        $T[CONCAT_u8_u16_931_sample_completed_] 
        $T[CONCAT_u8_u16_931_update_start_] 
        $T[CONCAT_u8_u16_931_update_completed_] 
        // pc
        // start: Forward dependencies from pc to transition CONCAT_u8_u16_931_sample_start_
        // done: Forward dependencies from pc to transition CONCAT_u8_u16_931_sample_start_
        ;;[CONCAT_u8_u16_931_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u8_u16_931_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u8_u16_931_sample_start_ &-> (CONCAT_u8_u16_931_Sample)
        CONCAT_u8_u16_931_sample_completed_ <-& (CONCAT_u8_u16_931_Sample)
        CONCAT_u8_u16_931_sample_completed_ &-> ($null)
        CONCAT_u8_u16_931_update_start_ &-> (CONCAT_u8_u16_931_Update)
        CONCAT_u8_u16_931_update_completed_ <-& (CONCAT_u8_u16_931_Update)
        // Target expression
        // (as target) LEDS
        $T[WPIPE_LEDS_928_sample_start_] 
        $T[WPIPE_LEDS_928_sample_completed_] 
        $T[WPIPE_LEDS_928_update_start_] 
        $T[WPIPE_LEDS_928_update_completed_] 
        ;;[WPIPE_LEDS_928_Sample] 
        {
          // pipe write sample-start LEDS
          $T [req] $T [ack] 
        }
        ;;[WPIPE_LEDS_928_Update] 
        {
          // pipe write update (complete) LEDS
          $T [req] $T [ack] 
        }
        WPIPE_LEDS_928_sample_start_ &-> (WPIPE_LEDS_928_Sample)
        WPIPE_LEDS_928_sample_completed_ <-& (WPIPE_LEDS_928_Sample)
        WPIPE_LEDS_928_update_start_ <-& (WPIPE_LEDS_928_sample_completed_)
        WPIPE_LEDS_928_update_start_ &-> (WPIPE_LEDS_928_Update)
        WPIPE_LEDS_928_update_completed_ <-& (WPIPE_LEDS_928_Update)
        // start: Forward dependencies from (zero8 && pc) to transition WPIPE_LEDS_928_sample_start_
        WPIPE_LEDS_928_sample_start_ <-& (CONCAT_u8_u16_931_update_completed_)
        // done: Forward dependencies from (zero8 && pc) to transition WPIPE_LEDS_928_sample_start_
        // end:  		LEDS := (zero8 && pc)// bits of buffering = 16. 
        // load-store dependencies..
        // memory-space  memory_space_1
        //  call_stmt_924 store
        // memory-space  memory_space_3
        //  call_stmt_924 store
        // memory-space  memory_space_0
        //  call_stmt_924 store
        // memory-space  memory_space_2
        //  call_stmt_924 store
        // pipe read/write dependencies for pipe LEDS
        // read-dependencies for pipe LEDS
        // write-dependencies for pipe LEDS
        // signal dependencies for LEDS
        // pipe read/write dependencies for pipe write_mem
        // read-dependencies for pipe write_mem
        RPIPE_write_mem_904_sample_start_ <-& (RPIPE_write_mem_901_update_completed_)
        RPIPE_write_mem_907_sample_start_ <-& (RPIPE_write_mem_904_update_completed_)
        RPIPE_write_mem_910_sample_start_ <-& (RPIPE_write_mem_907_update_completed_)
        // write-dependencies for pipe write_mem
        // signal dependencies for write_mem
        // pipe read/write dependencies for pipe reg_output
        // read-dependencies for pipe reg_output
        // write-dependencies for pipe reg_output
        // signal dependencies for reg_output
      }
      assign_stmt_902_to_assign_stmt_932__entry__ |-> (assign_stmt_902_to_assign_stmt_932)
      assign_stmt_902_to_assign_stmt_932__exit__ <-| (assign_stmt_902_to_assign_stmt_932)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 307
      ;;[merge_stmt_893_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_893__entry__ |-> (merge_stmt_893_dead_link)
      merge_stmt_893__exit__ <-| (merge_stmt_893_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 307  --------------------------
      ||[merge_stmt_893__entry___PhiReq] 
      {
        ;;[phi_stmt_894] 
        {
          ||[phi_stmt_894_sources] 
          {
            // sources for 			$phi pc := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_pc $on   loopback 
            // type of target is $uint<8>
            // constant source .... delay transition 
            $T [type_cast_897_konst_delay_trans] $delay
          }
          $T [phi_stmt_894_req] 
        }
      }
      merge_stmt_893__entry__ |-> (merge_stmt_893__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_894] 
        {
          ||[phi_stmt_894_sources] 
          {
            // sources for 			$phi pc := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_pc $on   loopback 
            // type of target is $uint<8>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_894_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_893_PhiReqMerge] 
      merge_stmt_893_PhiReqMerge <-| ( merge_stmt_893__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_893_PhiAck] 
      {
        $T [phi_stmt_894_ack] 
      }
      merge_stmt_893_PhiReqMerge |-> (merge_stmt_893_PhiAck)
      merge_stmt_893__exit__  <-| (merge_stmt_893_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 307  --------------------------
      merge_stmt_893__entry__ <-| (branch_block_stmt_892__entry__)
      assign_stmt_902_to_assign_stmt_932__entry__ <-| (merge_stmt_893__exit__)
      loopback <-| (assign_stmt_902_to_assign_stmt_932__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %try1%loop%
    //  file prog.linked.opt.aa, line 307
    // constant-object-declarations for block %try1%loop
    //  file prog.linked.opt.aa, line 305
    // constant-object-declarations for block %try1
    //  file prog.linked.opt.aa, line 297
    $constant $W[xxtry1xxzero8] : $int<8> := _b00000000// 0
    // 	$call init_mem () () 
    //  file prog.linked.opt.aa, line 303
    // 	$call init_reg () () 
    //  file prog.linked.opt.aa, line 304
    // constant-declarations for block %try1%loop
    //  file prog.linked.opt.aa, line 305
    // constant-declarations for block %try1%loop%
    //  file prog.linked.opt.aa, line 307
    // constant-declarations for phi:  			$phi pc := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_pc $on   loopback 
    // type of target is $uint<8>
    //  file prog.linked.opt.aa, line 308
    // ($bitcast ($uint<8>) 0  )
    $constant $W[type_cast_897_wire_constant] : $int<8> := _b00000000// 0
    // 		$call try (pc inst ) (next_pc )  $mark FIRST 
    //  file prog.linked.opt.aa, line 316
    // zero8
    $constant $W[R_zero8_929_wire_constant] : $int<8> := _b00000000// 0
    // 	$call init_mem () () 
    //  file prog.linked.opt.aa, line 303
    // 	$call init_reg () () 
    //  file prog.linked.opt.aa, line 304
    // block %try1%loop
    //  file prog.linked.opt.aa, line 305
    // merge-statement  
    //  file prog.linked.opt.aa, line 307
    // 			$phi pc := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_pc $on   loopback 
    // type of target is $uint<8>
    //  file prog.linked.opt.aa, line 308
    $W[next_pc_924_898_buffered] : $int<8>
    // pc
    $W[pc_894] : $int<8>
    // 		inst1 := write_mem// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 311
    // inst1
    $W[inst1_902] : $int<8>
    // 		inst2 := write_mem// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 312
    // inst2
    $W[inst2_905] : $int<8>
    // 		inst3 := write_mem// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 313
    // inst3
    $W[inst3_908] : $int<8>
    // 		inst4 := write_mem// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 314
    // inst4
    $W[inst4_911] : $int<8>
    // 		inst := ((inst1 && inst2) && (inst3 && inst4))// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 315
    // (inst1 && inst2)
    $intermediate $W[CONCAT_u8_u16_915_wire] : $int<16>
    // (inst3 && inst4)
    $intermediate $W[CONCAT_u8_u16_918_wire] : $int<16>
    // inst
    $W[inst_920] : $int<32>
    // 		$call try (pc inst ) (next_pc )  $mark FIRST 
    //  file prog.linked.opt.aa, line 316
    // next_pc
    $W[next_pc_924] : $int<8>
    // 		reg_output := pc $synch ( $update FIRST )  // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 317
    // reg_output
    // 		LEDS := (zero8 && pc)// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 318
    // (zero8 && pc)
    $intermediate $W[CONCAT_u8_u16_931_wire] : $int<16>
    // LEDS
    // 	$call init_mem () () 
    //  file prog.linked.opt.aa, line 303
    $call [call_stmt_890_call] $module init_mem() ()  
    $delay call_stmt_890_call 4
    // 	$call init_reg () () 
    //  file prog.linked.opt.aa, line 304
    $call [call_stmt_891_call] $module init_reg() ()  
    $delay call_stmt_891_call 4
    // datapath-instances for block %try1%loop
    //  file prog.linked.opt.aa, line 305
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 307
    // 			$phi pc := 			  ($bitcast ($uint<8>) 0  ) $on   $entry 			  next_pc $on   loopback 
    // type of target is $uint<8>
    //  file prog.linked.opt.aa, line 308
    # := [next_pc_924_898_buf] (next_pc_924) (next_pc_924_898_buffered)   
    $phi [phi_stmt_894] (type_cast_897_wire_constant next_pc_924_898_buffered) ( pc_894 ) 
    // 		inst1 := write_mem// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 311
    // write_mem
    $ioport $in [RPIPE_write_mem_901_inst] (write_mem) (inst1_902) 
    $buffering $out RPIPE_write_mem_901_inst inst1_902 1
    // 		inst2 := write_mem// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 312
    // write_mem
    $ioport $in [RPIPE_write_mem_904_inst] (write_mem) (inst2_905) 
    $buffering $out RPIPE_write_mem_904_inst inst2_905 1
    // 		inst3 := write_mem// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 313
    // write_mem
    $ioport $in [RPIPE_write_mem_907_inst] (write_mem) (inst3_908) 
    $buffering $out RPIPE_write_mem_907_inst inst3_908 1
    // 		inst4 := write_mem// bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 314
    // write_mem
    $ioport $in [RPIPE_write_mem_910_inst] (write_mem) (inst4_911) 
    $buffering $out RPIPE_write_mem_910_inst inst4_911 1
    // 		inst := ((inst1 && inst2) && (inst3 && inst4))// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 315
    // (inst1 && inst2)
    &&[CONCAT_u8_u16_915_inst] (inst1_902 inst2_905) (CONCAT_u8_u16_915_wire)   $flowthrough 
    $delay CONCAT_u8_u16_915_inst 0
    // (inst3 && inst4)
    &&[CONCAT_u8_u16_918_inst] (inst3_908 inst4_911) (CONCAT_u8_u16_918_wire)   $flowthrough 
    $delay CONCAT_u8_u16_918_inst 0
    // ((inst1 && inst2) && (inst3 && inst4))
    &&[CONCAT_u16_u32_919_inst] (CONCAT_u8_u16_915_wire CONCAT_u8_u16_918_wire) (inst_920)   
    $buffering  $out CONCAT_u16_u32_919_inst inst_920 1
    $delay CONCAT_u16_u32_919_inst 1
    // 		$call try (pc inst ) (next_pc )  $mark FIRST 
    //  file prog.linked.opt.aa, line 316
    $call [call_stmt_924_call] $module try(pc_894 inst_920) (next_pc_924)  
    $delay call_stmt_924_call 4
    $buffering  $in call_stmt_924_call pc_894 1
    $buffering  $in call_stmt_924_call inst_920 1
    $buffering  $out call_stmt_924_call next_pc_924 1
    // 		reg_output := pc $synch ( $update FIRST )  // bits of buffering = 8. 
    //  file prog.linked.opt.aa, line 317
    // reg_output
    $ioport $out [WPIPE_reg_output_925_inst]  (pc_894) (reg_output) 
    // 		LEDS := (zero8 && pc)// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 318
    // (zero8 && pc)
    &&[CONCAT_u8_u16_931_inst] (R_zero8_929_wire_constant pc_894) (CONCAT_u8_u16_931_wire)   
    $buffering  $out CONCAT_u8_u16_931_inst CONCAT_u8_u16_931_wire 1
    $delay CONCAT_u8_u16_931_inst 1
    // LEDS
    $ioport $out [WPIPE_LEDS_928_inst]  (CONCAT_u8_u16_931_wire) (LEDS) 
  }
  // end data-path
  // 	$call init_mem () () 
  //  file prog.linked.opt.aa, line 303
  call_stmt_890_call <=> (call_stmt_890_to_call_stmt_891/call_stmt_890_Sample/crr call_stmt_890_to_call_stmt_891/call_stmt_890_Update/ccr) (call_stmt_890_to_call_stmt_891/call_stmt_890_Sample/cra call_stmt_890_to_call_stmt_891/call_stmt_890_Update/cca)
  // 	$call init_reg () () 
  //  file prog.linked.opt.aa, line 304
  call_stmt_891_call <=> (call_stmt_890_to_call_stmt_891/call_stmt_891_Sample/crr call_stmt_890_to_call_stmt_891/call_stmt_891_Update/ccr) (call_stmt_890_to_call_stmt_891/call_stmt_891_Sample/cra call_stmt_890_to_call_stmt_891/call_stmt_891_Update/cca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 307
  next_pc_924_898_buf <=> (branch_block_stmt_892/loopback_PhiReq/phi_stmt_894/phi_stmt_894_sources/Interlock/Sample/req branch_block_stmt_892/loopback_PhiReq/phi_stmt_894/phi_stmt_894_sources/Interlock/Update/req) (branch_block_stmt_892/loopback_PhiReq/phi_stmt_894/phi_stmt_894_sources/Interlock/Sample/ack branch_block_stmt_892/loopback_PhiReq/phi_stmt_894/phi_stmt_894_sources/Interlock/Update/ack)
  phi_stmt_894 <=> (branch_block_stmt_892/merge_stmt_893__entry___PhiReq/phi_stmt_894/phi_stmt_894_req branch_block_stmt_892/loopback_PhiReq/phi_stmt_894/phi_stmt_894_req) (branch_block_stmt_892/merge_stmt_893_PhiAck/phi_stmt_894_ack)
  // 		inst1 := write_mem// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 311
  // write_mem
  RPIPE_write_mem_901_inst <=> (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_901_Sample/rr branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_901_Update/cr) (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_901_Sample/ra branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_901_Update/ca)
  // 		inst2 := write_mem// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 312
  // write_mem
  RPIPE_write_mem_904_inst <=> (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_904_Sample/rr branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_904_Update/cr) (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_904_Sample/ra branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_904_Update/ca)
  // 		inst3 := write_mem// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 313
  // write_mem
  RPIPE_write_mem_907_inst <=> (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_907_Sample/rr branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_907_Update/cr) (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_907_Sample/ra branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_907_Update/ca)
  // 		inst4 := write_mem// bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 314
  // write_mem
  RPIPE_write_mem_910_inst <=> (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_910_Sample/rr branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_910_Update/cr) (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_910_Sample/ra branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/RPIPE_write_mem_910_Update/ca)
  // 		inst := ((inst1 && inst2) && (inst3 && inst4))// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 315
  // ((inst1 && inst2) && (inst3 && inst4))
  // (inst1 && inst2)
  // inst1
  // inst2
  // (inst3 && inst4)
  // inst3
  // inst4
  CONCAT_u16_u32_919_inst <=> (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/CONCAT_u16_u32_919_Sample/rr branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/CONCAT_u16_u32_919_Update/cr) (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/CONCAT_u16_u32_919_Sample/ra branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/CONCAT_u16_u32_919_Update/ca)
  // 		$call try (pc inst ) (next_pc )  $mark FIRST 
  //  file prog.linked.opt.aa, line 316
  // pc
  // inst
  call_stmt_924_call <=> (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/call_stmt_924_Sample/crr branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/call_stmt_924_Update/ccr) (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/call_stmt_924_Sample/cra branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/call_stmt_924_Update/cca)
  // 		reg_output := pc $synch ( $update FIRST )  // bits of buffering = 8. 
  //  file prog.linked.opt.aa, line 317
  // pc
  // reg_output
  WPIPE_reg_output_925_inst <=> (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/WPIPE_reg_output_925_Sample/req branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/WPIPE_reg_output_925_Update/req) (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/WPIPE_reg_output_925_Sample/ack branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/WPIPE_reg_output_925_Update/ack)
  // 		LEDS := (zero8 && pc)// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 318
  // (zero8 && pc)
  // pc
  CONCAT_u8_u16_931_inst <=> (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/CONCAT_u8_u16_931_Sample/rr branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/CONCAT_u8_u16_931_Update/cr) (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/CONCAT_u8_u16_931_Sample/ra branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/CONCAT_u8_u16_931_Update/ca)
  // LEDS
  WPIPE_LEDS_928_inst <=> (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/WPIPE_LEDS_928_Sample/req branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/WPIPE_LEDS_928_Update/req) (branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/WPIPE_LEDS_928_Sample/ack branch_block_stmt_892/assign_stmt_902_to_assign_stmt_932/WPIPE_LEDS_928_Update/ack)
}
