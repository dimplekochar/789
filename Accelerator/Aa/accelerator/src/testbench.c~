#include <pthread.h>
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <pthreadUtils.h>
#include <Pipes.h>
#include <pipeHandler.h>
# include <inttypes.h>
#ifdef AA2C
#include "simple_memory_aa_c_model.h"
#else
#include "vhdlCStubs.h"
#endif

#define ORDER 16
void Exit(int sig)
{
	fprintf(stderr, "## Break! ##\n");
	exit(0);
}

void Sender_0()
{
	int idx;
	while(1)
	{
		uint16_t X [1];
		for(idx = 0; idx < 1; idx++)
		{
			X[idx] = 1;
		}
		write_uint16_n("start", X, 1);
	}
}

void Sender_1()
{
	int idx;
	uint16_t Xl [29*29];
	read_uint16_n("acc_mem_add", Xl, 29*29);
	for(idx = 0; idx < 29*29; idx++)
	{	
		uint16_t rvall = Xl[idx];
		fprintf(stdout,"%d ", idx);
		fprintf(stdout,"output_port_add:  received %d\n", rvall);
	}
}



void Receiver_0()
{
	int idx;
	uint16_t Xl [29*29];
	read_uint16_n("acc_mem", Xl, 29*29);
	for(idx = 0; idx < 29*29; idx++)
	{	
		uint16_t rvall = Xl[idx];
		fprintf(stdout,"%d ", idx);
		fprintf(stdout,"output_port_data:  received %d\n", rvall);
	}
}

void Receiver_1()
{
	int idx;
	uint16_t Xl [2];
	read_uint16_n("status", Xl, 2);
	for(idx = 0; idx < 2; idx++)
	{	
		uint16_t rvall = Xl[idx];
		fprintf(stdout,"%d ", idx);
		fprintf(stdout,"status:  received %d\n", rvall);
	}
}





DEFINE_THREAD(Sender_1)
DEFINE_THREAD(Sender_0)
DEFINE_THREAD(Receiver_1)
DEFINE_THREAD(Receiver_0)

int main(int argc, char* argv[])
{
	float result[ORDER];
	signal(SIGINT,  Exit);
  	signal(SIGTERM, Exit);

#ifdef AA2C
	init_pipe_handler();
	simple_memory_start_daemons (NULL, 0);
#endif


	PTHREAD_DECL(Sender_0);
	PTHREAD_CREATE(Sender_0);
	PTHREAD_DECL(Sender_1);
	PTHREAD_CREATE(Sender_1);




	PTHREAD_DECL(Receiver_1);
	PTHREAD_CREATE(Receiver_1);
	PTHREAD_DECL(Receiver_0);
	PTHREAD_CREATE(Receiver_0);
	

	
	PTHREAD_JOIN(Receiver_0)
	PTHREAD_JOIN(Receiver_1)

#ifdef AA2C
	simple_memory_stop_daemons();
#endif

	return(0);
}
