// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  acc_mem : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [acc_mem] 16 $depth 2 
// $pipe  acc_mem_add : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [acc_mem_add] 16 $depth 2 
// $pipe  start : $uint<16>  $depth 1 
// can point into 
// in scope  top-level
$pipe [start] 16 $depth 1 
// $pipe  status : $uint<16>  $depth 1 
// can point into 
// in scope  top-level
$pipe [status] 16 $depth 1 
// load store constants for object PJ
$constant $W[PJ_base_address] : $int<1> := _b0
// load store constants for object ZJ
$constant $W[ZJ_base_address] : $int<1> := _b0
// load store constants for object a
$constant $W[a_base_address] : $int<4> := _b0000
// load store constants for object image
$constant $W[image_base_address] : $int<4> := _b0000
// load store constants for object kernel
$constant $W[kernel_base_address] : $int<4> := _b0000
// load store constants for object mem_array
$constant $W[mem_array_base_address] : $int<11> := _b00000000000
// load store constants for object one
$constant $W[one_base_address] : $int<1> := _b0
// load store constants for object total
$constant $W[total_base_address] : $int<1> := _b0
// load store constants for object zer
$constant $W[zer_base_address] : $int<1> := _b0
$memoryspace [memory_space_0] 
{
  $capacity 1
  $datawidth 16
  $addrwidth 1
  $maxaccesswidth 16
  // $storage  PJ : $uint<16> // memory space index = 0  base address = 0  word size = 16
  // can point into 
  // in scope  top-level
  $object [PJ] : $int<16>
}
$memoryspace [memory_space_1] 
{
  $capacity 1
  $datawidth 12
  $addrwidth 1
  $maxaccesswidth 12
  // $storage  ZJ : $uint<12> // memory space index = 1  base address = 0  word size = 12
  // can point into 
  // in scope  top-level
  $object [ZJ] : $int<12>
}
$memoryspace [memory_space_2] 
{
  $capacity 16
  $datawidth 16
  $addrwidth 4
  $maxaccesswidth 16
  // $storage  a : $array[16] $of $uint<16> // memory space index = 2  base address = 0  word size = 16
  // can point into 
  // in scope  top-level
  $object [a] : $array[16] $of $int<16>
}
$memoryspace [memory_space_3] 
{
  $capacity 16
  $datawidth 16
  $addrwidth 4
  $maxaccesswidth 16
  // $storage  image : $array[16] $of $uint<16> // memory space index = 3  base address = 0  word size = 16
  // can point into 
  // in scope  top-level
  $object [image] : $array[16] $of $int<16>
}
$memoryspace [memory_space_4] 
{
  $capacity 16
  $datawidth 16
  $addrwidth 4
  $maxaccesswidth 16
  // $storage  kernel : $array[16] $of $uint<16> // memory space index = 4  base address = 0  word size = 16
  // can point into 
  // in scope  top-level
  $object [kernel] : $array[16] $of $int<16>
}
$memoryspace [memory_space_5] 
{
  $capacity 1536
  $datawidth 16
  $addrwidth 11
  $maxaccesswidth 16
  // $storage  mem_array : $array[1536] $of $uint<16> // memory space index = 5  base address = 0  word size = 16
  // can point into 
  // in scope  top-level
  $object [mem_array] : $array[1536] $of $int<16>
}
$memoryspace [memory_space_6] 
{
  $capacity 1
  $datawidth 1
  $addrwidth 1
  $maxaccesswidth 1
  // $storage  one : $uint<1> // memory space index = 6  base address = 0  word size = 1
  // can point into 
  // in scope  top-level
  $object [one] : $int<1>
}
$memoryspace [memory_space_7] 
{
  $capacity 1
  $datawidth 16
  $addrwidth 1
  $maxaccesswidth 16
  // $storage  total : $uint<16> // memory space index = 7  base address = 0  word size = 16
  // can point into 
  // in scope  top-level
  $object [total] : $int<16>
}
$memoryspace [memory_space_8] 
{
  $capacity 1
  $datawidth 4
  $addrwidth 1
  $maxaccesswidth 4
  // $storage  zer : $uint<4> // memory space index = 8  base address = 0  word size = 4
  // can point into 
  // in scope  top-level
  $object [zer] : $int<4>
}
$pipeline $depth 14 $buffering 1 $module [accessMem] 
{
  $in read_write_bar:$int<1>
  // can point into 
  addr:$int<12>
  // can point into 
  write_data:$int<16>
  // can point into 
  $out read_datal:$int<64>
  // can point into 
  // pipe-declarations for block %accessMem
  //  file prog.linked.opt.aa, line 27
  // memory-space 5 is written into.
  // memory-space 5 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_29_to_assign_stmt_101] 
    {
      $T [read_write_bar_update_enable] 
      $T [read_write_bar_update_enable_out] 
      read_write_bar_update_enable &-> (read_write_bar_update_enable_out)
      $null &-> (read_write_bar_update_enable)
      $T [addr_update_enable] 
      $T [addr_update_enable_out] 
      addr_update_enable &-> (addr_update_enable_out)
      $null &-> (addr_update_enable)
      $T [write_data_update_enable] 
      $T [write_data_update_enable_out] 
      write_data_update_enable &-> (write_data_update_enable_out)
      $null &-> (write_data_update_enable)
      $T [read_datal_update_enable] 
      $T [read_datal_update_enable_in] 
      $null &-> (read_datal_update_enable)
      $null <-& (read_datal_update_enable_in) 
      $null &-> (read_datal_update_enable)
      read_datal_update_enable <-& (read_datal_update_enable_in) 
      // start:  	$guard (read_write_bar) t_read_data0 := mem_array[addr]// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 32
      // Guard expression 
      // read_write_bar
      // Source expression
      // mem_array[addr]
      $T[array_obj_ref_28_base_address_calculated] 
      $T[array_obj_ref_28_sample_start_] 
      $T[array_obj_ref_28_sample_completed_] 
      $T[array_obj_ref_28_update_start_] 
      $T[array_obj_ref_28_update_completed_] 
      $T[array_obj_ref_28_word_address_calculated] 
      $T[array_obj_ref_28_root_address_calculated] 
      $T[array_obj_ref_28_offset_calculated] 
      $T[array_obj_ref_28_index_resized_0] 
      $T[array_obj_ref_28_index_scaled_0] 
      $T[array_obj_ref_28_index_computed_0] 
      // addr
      // start: Forward dependencies from addr to transition array_obj_ref_28_index_computed_0
      array_obj_ref_28_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr to transition array_obj_ref_28_index_computed_0
      ;;[array_obj_ref_28_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_28_index_computed_0 &-> (array_obj_ref_28_index_resize_0)
      array_obj_ref_28_index_resized_0 <-& (array_obj_ref_28_index_resize_0)
      ;;[array_obj_ref_28_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_28_index_resized_0 &-> (array_obj_ref_28_index_scale_0)
      array_obj_ref_28_index_scaled_0 <-& (array_obj_ref_28_index_scale_0)
      ;;[array_obj_ref_28_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_28_index_scaled_0 &-> (array_obj_ref_28_final_index_sum_regn)
      array_obj_ref_28_offset_calculated <-& (array_obj_ref_28_final_index_sum_regn)
      ;;[array_obj_ref_28_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_28_offset_calculated &-> (array_obj_ref_28_base_plus_offset)
      array_obj_ref_28_root_address_calculated <-& (array_obj_ref_28_base_plus_offset)
      ;;[array_obj_ref_28_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_28_root_address_calculated &-> (array_obj_ref_28_word_addrgen)
      array_obj_ref_28_word_address_calculated <-& (array_obj_ref_28_word_addrgen)
      ;;[array_obj_ref_28_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_28_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_28_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_28_sample_start_ <-& (array_obj_ref_28_word_address_calculated)
      // reenable-joins
      addr_update_enable o<-& (array_obj_ref_28_sample_completed_ 0)
      array_obj_ref_28_sample_start_ &-> (array_obj_ref_28_Sample)
      array_obj_ref_28_sample_completed_ <-& (array_obj_ref_28_Sample)
      array_obj_ref_28_sample_completed_ &-> ($null)
      array_obj_ref_28_update_start_ &-> (array_obj_ref_28_Update)
      array_obj_ref_28_update_completed_ <-& (array_obj_ref_28_Update)
      // self-release: 
      array_obj_ref_28_sample_start_ o<-& (array_obj_ref_28_sample_completed_ 1)
      $null &-> (array_obj_ref_28_update_start_)
      array_obj_ref_28_update_start_ o<-& (array_obj_ref_28_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_28 with guard R_read_write_bar_25
      array_obj_ref_28_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (array_obj_ref_28_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data0
      // start: WAR dependencies for t_read_data0
      // done: WAR dependencies for t_read_data0
      // end:  	$guard (read_write_bar) t_read_data0 := mem_array[addr]// bits of buffering = 16. 
      // start:  	$guard (read_write_bar) addr1 := (addr + 1 )// bits of buffering = 12. 
      //  file prog.linked.opt.aa, line 33
      // Guard expression 
      // read_write_bar
      // Source expression
      // (addr + 1 )
      $T[ADD_u12_u12_34_sample_start_] 
      $T[ADD_u12_u12_34_sample_completed_] 
      $T[ADD_u12_u12_34_update_start_] 
      $T[ADD_u12_u12_34_update_completed_] 
      // Guard dependency for expression ADD_u12_u12_34 with guard R_read_write_bar_30
      ADD_u12_u12_34_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (ADD_u12_u12_34_sample_completed_ 0)
      // addr
      // start: Forward dependencies from addr to transition ADD_u12_u12_34_sample_start_
      ADD_u12_u12_34_sample_start_ <-& ($entry)
      // done: Forward dependencies from addr to transition ADD_u12_u12_34_sample_start_
      ;;[ADD_u12_u12_34_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u12_u12_34_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u12_u12_34_sample_start_ &-> (ADD_u12_u12_34_Sample)
      ADD_u12_u12_34_sample_completed_ <-& (ADD_u12_u12_34_Sample)
      ADD_u12_u12_34_sample_completed_ &-> ($null)
      ADD_u12_u12_34_update_start_ &-> (ADD_u12_u12_34_Update)
      ADD_u12_u12_34_update_completed_ <-& (ADD_u12_u12_34_Update)
      // RAW reenables for addr
      addr_update_enable o<-& (ADD_u12_u12_34_sample_completed_ 0)
      // self-release: 
      ADD_u12_u12_34_sample_start_ o<-& (ADD_u12_u12_34_sample_completed_ 1)
      $null &-> (ADD_u12_u12_34_update_start_)
      ADD_u12_u12_34_update_start_ o<-& (ADD_u12_u12_34_update_completed_ 0)
      // Target expression
      // (as target) addr1
      // start: WAR dependencies for addr1
      // done: WAR dependencies for addr1
      // end:  	$guard (read_write_bar) addr1 := (addr + 1 )// bits of buffering = 12. 
      // start:  	read_write_bar_36_delayed_1_0 := read_write_bar// bits of buffering = 1. 
      //  file prog.linked.opt.aa, line 34
      $T[assign_stmt_38_sample_start_] 
      $T[assign_stmt_38_sample_completed_] 
      $T[assign_stmt_38_update_start_] 
      $T[assign_stmt_38_update_completed_] 
      // Source expression
      // read_write_bar
      // Target expression
      // (as target) read_write_bar_36_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_38_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_38_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_38_sample_start_ &-> (assign_stmt_38_Sample)
      assign_stmt_38_sample_completed_ <-& (assign_stmt_38_Sample)
      assign_stmt_38_sample_completed_ &-> ($null)
      assign_stmt_38_update_start_ &-> (assign_stmt_38_Update)
      assign_stmt_38_update_completed_ <-& (assign_stmt_38_Update)
      // start: Forward dependencies from read_write_bar to transition assign_stmt_38_sample_start_
      assign_stmt_38_sample_start_ <-& ($entry)
      // done: Forward dependencies from read_write_bar to transition assign_stmt_38_sample_start_
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (assign_stmt_38_sample_completed_ 0)
      // self-release: 
      assign_stmt_38_sample_start_ o<-& (assign_stmt_38_sample_completed_ 1)
      $null &-> (assign_stmt_38_update_start_)
      assign_stmt_38_update_start_ o<-& (assign_stmt_38_update_completed_ 0)
      // start: WAR dependencies for read_write_bar_36_delayed_1_0
      // done: WAR dependencies for read_write_bar_36_delayed_1_0
      // end:  	read_write_bar_36_delayed_1_0 := read_write_bar// bits of buffering = 1. 
      // start:  	$guard (read_write_bar_36_delayed_1_0) t_read_data1 := mem_array[addr1]// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 35
      // Guard expression 
      // read_write_bar_36_delayed_1_0
      // Source expression
      // mem_array[addr1]
      $T[array_obj_ref_42_base_address_calculated] 
      $T[array_obj_ref_42_sample_start_] 
      $T[array_obj_ref_42_sample_completed_] 
      $T[array_obj_ref_42_update_start_] 
      $T[array_obj_ref_42_update_completed_] 
      $T[array_obj_ref_42_word_address_calculated] 
      $T[array_obj_ref_42_root_address_calculated] 
      $T[array_obj_ref_42_offset_calculated] 
      $T[array_obj_ref_42_index_resized_0] 
      $T[array_obj_ref_42_index_scaled_0] 
      $T[array_obj_ref_42_index_computed_0] 
      // addr1
      // start: Forward dependencies from addr1 to transition array_obj_ref_42_index_computed_0
      array_obj_ref_42_index_computed_0 <-& (ADD_u12_u12_34_update_completed_)
      // done: Forward dependencies from addr1 to transition array_obj_ref_42_index_computed_0
      ;;[array_obj_ref_42_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_42_index_computed_0 &-> (array_obj_ref_42_index_resize_0)
      array_obj_ref_42_index_resized_0 <-& (array_obj_ref_42_index_resize_0)
      ;;[array_obj_ref_42_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_42_index_resized_0 &-> (array_obj_ref_42_index_scale_0)
      array_obj_ref_42_index_scaled_0 <-& (array_obj_ref_42_index_scale_0)
      ;;[array_obj_ref_42_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_42_index_scaled_0 &-> (array_obj_ref_42_final_index_sum_regn)
      array_obj_ref_42_offset_calculated <-& (array_obj_ref_42_final_index_sum_regn)
      ;;[array_obj_ref_42_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_42_offset_calculated &-> (array_obj_ref_42_base_plus_offset)
      array_obj_ref_42_root_address_calculated <-& (array_obj_ref_42_base_plus_offset)
      ;;[array_obj_ref_42_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_42_root_address_calculated &-> (array_obj_ref_42_word_addrgen)
      array_obj_ref_42_word_address_calculated <-& (array_obj_ref_42_word_addrgen)
      ;;[array_obj_ref_42_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_42_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_42_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_42_sample_start_ <-& (array_obj_ref_42_word_address_calculated)
      // reenable-joins
      ADD_u12_u12_34_update_start_ o<-& (array_obj_ref_42_sample_completed_ 0)
      array_obj_ref_42_sample_start_ &-> (array_obj_ref_42_Sample)
      array_obj_ref_42_sample_completed_ <-& (array_obj_ref_42_Sample)
      array_obj_ref_42_sample_completed_ &-> ($null)
      array_obj_ref_42_update_start_ &-> (array_obj_ref_42_Update)
      array_obj_ref_42_update_completed_ <-& (array_obj_ref_42_Update)
      // self-release: 
      array_obj_ref_42_sample_start_ o<-& (array_obj_ref_42_sample_completed_ 1)
      $null &-> (array_obj_ref_42_update_start_)
      array_obj_ref_42_update_start_ o<-& (array_obj_ref_42_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_42 with guard R_read_write_bar_36_delayed_1_0_39
      array_obj_ref_42_sample_start_ <-& (assign_stmt_38_update_completed_)
      // RAW reenables for read_write_bar_36_delayed_1_0
      assign_stmt_38_update_start_ o<-& (array_obj_ref_42_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data1
      // start: WAR dependencies for t_read_data1
      // done: WAR dependencies for t_read_data1
      // end:  	$guard (read_write_bar_36_delayed_1_0) t_read_data1 := mem_array[addr1]// bits of buffering = 16. 
      // start:  	$guard (read_write_bar) addr2 := (addr + 2 )// bits of buffering = 12. 
      //  file prog.linked.opt.aa, line 36
      // Guard expression 
      // read_write_bar
      // Source expression
      // (addr + 2 )
      $T[ADD_u12_u12_48_sample_start_] 
      $T[ADD_u12_u12_48_sample_completed_] 
      $T[ADD_u12_u12_48_update_start_] 
      $T[ADD_u12_u12_48_update_completed_] 
      // Guard dependency for expression ADD_u12_u12_48 with guard R_read_write_bar_44
      ADD_u12_u12_48_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (ADD_u12_u12_48_sample_completed_ 0)
      // addr
      // start: Forward dependencies from addr to transition ADD_u12_u12_48_sample_start_
      ADD_u12_u12_48_sample_start_ <-& ($entry)
      // done: Forward dependencies from addr to transition ADD_u12_u12_48_sample_start_
      ;;[ADD_u12_u12_48_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u12_u12_48_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u12_u12_48_sample_start_ &-> (ADD_u12_u12_48_Sample)
      ADD_u12_u12_48_sample_completed_ <-& (ADD_u12_u12_48_Sample)
      ADD_u12_u12_48_sample_completed_ &-> ($null)
      ADD_u12_u12_48_update_start_ &-> (ADD_u12_u12_48_Update)
      ADD_u12_u12_48_update_completed_ <-& (ADD_u12_u12_48_Update)
      // RAW reenables for addr
      addr_update_enable o<-& (ADD_u12_u12_48_sample_completed_ 0)
      // self-release: 
      ADD_u12_u12_48_sample_start_ o<-& (ADD_u12_u12_48_sample_completed_ 1)
      $null &-> (ADD_u12_u12_48_update_start_)
      ADD_u12_u12_48_update_start_ o<-& (ADD_u12_u12_48_update_completed_ 0)
      // Target expression
      // (as target) addr2
      // start: WAR dependencies for addr2
      // done: WAR dependencies for addr2
      // end:  	$guard (read_write_bar) addr2 := (addr + 2 )// bits of buffering = 12. 
      // start:  	read_write_bar_47_delayed_1_0 := read_write_bar// bits of buffering = 1. 
      //  file prog.linked.opt.aa, line 37
      $T[assign_stmt_52_sample_start_] 
      $T[assign_stmt_52_sample_completed_] 
      $T[assign_stmt_52_update_start_] 
      $T[assign_stmt_52_update_completed_] 
      // Source expression
      // read_write_bar
      // Target expression
      // (as target) read_write_bar_47_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_52_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_52_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_52_sample_start_ &-> (assign_stmt_52_Sample)
      assign_stmt_52_sample_completed_ <-& (assign_stmt_52_Sample)
      assign_stmt_52_sample_completed_ &-> ($null)
      assign_stmt_52_update_start_ &-> (assign_stmt_52_Update)
      assign_stmt_52_update_completed_ <-& (assign_stmt_52_Update)
      // start: Forward dependencies from read_write_bar to transition assign_stmt_52_sample_start_
      assign_stmt_52_sample_start_ <-& ($entry)
      // done: Forward dependencies from read_write_bar to transition assign_stmt_52_sample_start_
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (assign_stmt_52_sample_completed_ 0)
      // self-release: 
      assign_stmt_52_sample_start_ o<-& (assign_stmt_52_sample_completed_ 1)
      $null &-> (assign_stmt_52_update_start_)
      assign_stmt_52_update_start_ o<-& (assign_stmt_52_update_completed_ 0)
      // start: WAR dependencies for read_write_bar_47_delayed_1_0
      // done: WAR dependencies for read_write_bar_47_delayed_1_0
      // end:  	read_write_bar_47_delayed_1_0 := read_write_bar// bits of buffering = 1. 
      // start:  	$guard (read_write_bar_47_delayed_1_0) t_read_data2 := mem_array[addr2]// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 38
      // Guard expression 
      // read_write_bar_47_delayed_1_0
      // Source expression
      // mem_array[addr2]
      $T[array_obj_ref_56_base_address_calculated] 
      $T[array_obj_ref_56_sample_start_] 
      $T[array_obj_ref_56_sample_completed_] 
      $T[array_obj_ref_56_update_start_] 
      $T[array_obj_ref_56_update_completed_] 
      $T[array_obj_ref_56_word_address_calculated] 
      $T[array_obj_ref_56_root_address_calculated] 
      $T[array_obj_ref_56_offset_calculated] 
      $T[array_obj_ref_56_index_resized_0] 
      $T[array_obj_ref_56_index_scaled_0] 
      $T[array_obj_ref_56_index_computed_0] 
      // addr2
      // start: Forward dependencies from addr2 to transition array_obj_ref_56_index_computed_0
      array_obj_ref_56_index_computed_0 <-& (ADD_u12_u12_48_update_completed_)
      // done: Forward dependencies from addr2 to transition array_obj_ref_56_index_computed_0
      ;;[array_obj_ref_56_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_56_index_computed_0 &-> (array_obj_ref_56_index_resize_0)
      array_obj_ref_56_index_resized_0 <-& (array_obj_ref_56_index_resize_0)
      ;;[array_obj_ref_56_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_56_index_resized_0 &-> (array_obj_ref_56_index_scale_0)
      array_obj_ref_56_index_scaled_0 <-& (array_obj_ref_56_index_scale_0)
      ;;[array_obj_ref_56_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_56_index_scaled_0 &-> (array_obj_ref_56_final_index_sum_regn)
      array_obj_ref_56_offset_calculated <-& (array_obj_ref_56_final_index_sum_regn)
      ;;[array_obj_ref_56_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_56_offset_calculated &-> (array_obj_ref_56_base_plus_offset)
      array_obj_ref_56_root_address_calculated <-& (array_obj_ref_56_base_plus_offset)
      ;;[array_obj_ref_56_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_56_root_address_calculated &-> (array_obj_ref_56_word_addrgen)
      array_obj_ref_56_word_address_calculated <-& (array_obj_ref_56_word_addrgen)
      ;;[array_obj_ref_56_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_56_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_56_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_56_sample_start_ <-& (array_obj_ref_56_word_address_calculated)
      // reenable-joins
      ADD_u12_u12_48_update_start_ o<-& (array_obj_ref_56_sample_completed_ 0)
      array_obj_ref_56_sample_start_ &-> (array_obj_ref_56_Sample)
      array_obj_ref_56_sample_completed_ <-& (array_obj_ref_56_Sample)
      array_obj_ref_56_sample_completed_ &-> ($null)
      array_obj_ref_56_update_start_ &-> (array_obj_ref_56_Update)
      array_obj_ref_56_update_completed_ <-& (array_obj_ref_56_Update)
      // self-release: 
      array_obj_ref_56_sample_start_ o<-& (array_obj_ref_56_sample_completed_ 1)
      $null &-> (array_obj_ref_56_update_start_)
      array_obj_ref_56_update_start_ o<-& (array_obj_ref_56_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_56 with guard R_read_write_bar_47_delayed_1_0_53
      array_obj_ref_56_sample_start_ <-& (assign_stmt_52_update_completed_)
      // RAW reenables for read_write_bar_47_delayed_1_0
      assign_stmt_52_update_start_ o<-& (array_obj_ref_56_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data2
      // start: WAR dependencies for t_read_data2
      // done: WAR dependencies for t_read_data2
      // end:  	$guard (read_write_bar_47_delayed_1_0) t_read_data2 := mem_array[addr2]// bits of buffering = 16. 
      // start:  	$guard (read_write_bar) addr3 := (addr + 3 )// bits of buffering = 12. 
      //  file prog.linked.opt.aa, line 39
      // Guard expression 
      // read_write_bar
      // Source expression
      // (addr + 3 )
      $T[ADD_u12_u12_62_sample_start_] 
      $T[ADD_u12_u12_62_sample_completed_] 
      $T[ADD_u12_u12_62_update_start_] 
      $T[ADD_u12_u12_62_update_completed_] 
      // Guard dependency for expression ADD_u12_u12_62 with guard R_read_write_bar_58
      ADD_u12_u12_62_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (ADD_u12_u12_62_sample_completed_ 0)
      // addr
      // start: Forward dependencies from addr to transition ADD_u12_u12_62_sample_start_
      ADD_u12_u12_62_sample_start_ <-& ($entry)
      // done: Forward dependencies from addr to transition ADD_u12_u12_62_sample_start_
      ;;[ADD_u12_u12_62_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u12_u12_62_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u12_u12_62_sample_start_ &-> (ADD_u12_u12_62_Sample)
      ADD_u12_u12_62_sample_completed_ <-& (ADD_u12_u12_62_Sample)
      ADD_u12_u12_62_sample_completed_ &-> ($null)
      ADD_u12_u12_62_update_start_ &-> (ADD_u12_u12_62_Update)
      ADD_u12_u12_62_update_completed_ <-& (ADD_u12_u12_62_Update)
      // RAW reenables for addr
      addr_update_enable o<-& (ADD_u12_u12_62_sample_completed_ 0)
      // self-release: 
      ADD_u12_u12_62_sample_start_ o<-& (ADD_u12_u12_62_sample_completed_ 1)
      $null &-> (ADD_u12_u12_62_update_start_)
      ADD_u12_u12_62_update_start_ o<-& (ADD_u12_u12_62_update_completed_ 0)
      // Target expression
      // (as target) addr3
      // start: WAR dependencies for addr3
      // done: WAR dependencies for addr3
      // end:  	$guard (read_write_bar) addr3 := (addr + 3 )// bits of buffering = 12. 
      // start:  	read_write_bar_58_delayed_1_0 := read_write_bar// bits of buffering = 1. 
      //  file prog.linked.opt.aa, line 40
      $T[assign_stmt_66_sample_start_] 
      $T[assign_stmt_66_sample_completed_] 
      $T[assign_stmt_66_update_start_] 
      $T[assign_stmt_66_update_completed_] 
      // Source expression
      // read_write_bar
      // Target expression
      // (as target) read_write_bar_58_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_66_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_66_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_66_sample_start_ &-> (assign_stmt_66_Sample)
      assign_stmt_66_sample_completed_ <-& (assign_stmt_66_Sample)
      assign_stmt_66_sample_completed_ &-> ($null)
      assign_stmt_66_update_start_ &-> (assign_stmt_66_Update)
      assign_stmt_66_update_completed_ <-& (assign_stmt_66_Update)
      // start: Forward dependencies from read_write_bar to transition assign_stmt_66_sample_start_
      assign_stmt_66_sample_start_ <-& ($entry)
      // done: Forward dependencies from read_write_bar to transition assign_stmt_66_sample_start_
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (assign_stmt_66_sample_completed_ 0)
      // self-release: 
      assign_stmt_66_sample_start_ o<-& (assign_stmt_66_sample_completed_ 1)
      $null &-> (assign_stmt_66_update_start_)
      assign_stmt_66_update_start_ o<-& (assign_stmt_66_update_completed_ 0)
      // start: WAR dependencies for read_write_bar_58_delayed_1_0
      // done: WAR dependencies for read_write_bar_58_delayed_1_0
      // end:  	read_write_bar_58_delayed_1_0 := read_write_bar// bits of buffering = 1. 
      // start:  	$guard (read_write_bar_58_delayed_1_0) t_read_data3 := mem_array[addr3]// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 41
      // Guard expression 
      // read_write_bar_58_delayed_1_0
      // Source expression
      // mem_array[addr3]
      $T[array_obj_ref_70_base_address_calculated] 
      $T[array_obj_ref_70_sample_start_] 
      $T[array_obj_ref_70_sample_completed_] 
      $T[array_obj_ref_70_update_start_] 
      $T[array_obj_ref_70_update_completed_] 
      $T[array_obj_ref_70_word_address_calculated] 
      $T[array_obj_ref_70_root_address_calculated] 
      $T[array_obj_ref_70_offset_calculated] 
      $T[array_obj_ref_70_index_resized_0] 
      $T[array_obj_ref_70_index_scaled_0] 
      $T[array_obj_ref_70_index_computed_0] 
      // addr3
      // start: Forward dependencies from addr3 to transition array_obj_ref_70_index_computed_0
      array_obj_ref_70_index_computed_0 <-& (ADD_u12_u12_62_update_completed_)
      // done: Forward dependencies from addr3 to transition array_obj_ref_70_index_computed_0
      ;;[array_obj_ref_70_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_70_index_computed_0 &-> (array_obj_ref_70_index_resize_0)
      array_obj_ref_70_index_resized_0 <-& (array_obj_ref_70_index_resize_0)
      ;;[array_obj_ref_70_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_70_index_resized_0 &-> (array_obj_ref_70_index_scale_0)
      array_obj_ref_70_index_scaled_0 <-& (array_obj_ref_70_index_scale_0)
      ;;[array_obj_ref_70_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_70_index_scaled_0 &-> (array_obj_ref_70_final_index_sum_regn)
      array_obj_ref_70_offset_calculated <-& (array_obj_ref_70_final_index_sum_regn)
      ;;[array_obj_ref_70_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_70_offset_calculated &-> (array_obj_ref_70_base_plus_offset)
      array_obj_ref_70_root_address_calculated <-& (array_obj_ref_70_base_plus_offset)
      ;;[array_obj_ref_70_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_70_root_address_calculated &-> (array_obj_ref_70_word_addrgen)
      array_obj_ref_70_word_address_calculated <-& (array_obj_ref_70_word_addrgen)
      ;;[array_obj_ref_70_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_70_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_70_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_70_sample_start_ <-& (array_obj_ref_70_word_address_calculated)
      // reenable-joins
      ADD_u12_u12_62_update_start_ o<-& (array_obj_ref_70_sample_completed_ 0)
      array_obj_ref_70_sample_start_ &-> (array_obj_ref_70_Sample)
      array_obj_ref_70_sample_completed_ <-& (array_obj_ref_70_Sample)
      array_obj_ref_70_sample_completed_ &-> ($null)
      array_obj_ref_70_update_start_ &-> (array_obj_ref_70_Update)
      array_obj_ref_70_update_completed_ <-& (array_obj_ref_70_Update)
      // self-release: 
      array_obj_ref_70_sample_start_ o<-& (array_obj_ref_70_sample_completed_ 1)
      $null &-> (array_obj_ref_70_update_start_)
      array_obj_ref_70_update_start_ o<-& (array_obj_ref_70_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_70 with guard R_read_write_bar_58_delayed_1_0_67
      array_obj_ref_70_sample_start_ <-& (assign_stmt_66_update_completed_)
      // RAW reenables for read_write_bar_58_delayed_1_0
      assign_stmt_66_update_start_ o<-& (array_obj_ref_70_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data3
      // start: WAR dependencies for t_read_data3
      // done: WAR dependencies for t_read_data3
      // end:  	$guard (read_write_bar_58_delayed_1_0) t_read_data3 := mem_array[addr3]// bits of buffering = 16. 
      // start:  	t_read_data0_69_delayed_1_0 := t_read_data0// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 42
      $T[assign_stmt_74_sample_start_] 
      $T[assign_stmt_74_sample_completed_] 
      $T[assign_stmt_74_update_start_] 
      $T[assign_stmt_74_update_completed_] 
      // Source expression
      // t_read_data0
      // Target expression
      // (as target) t_read_data0_69_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_74_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_74_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_74_sample_start_ &-> (assign_stmt_74_Sample)
      assign_stmt_74_sample_completed_ <-& (assign_stmt_74_Sample)
      assign_stmt_74_sample_completed_ &-> ($null)
      assign_stmt_74_update_start_ &-> (assign_stmt_74_Update)
      assign_stmt_74_update_completed_ <-& (assign_stmt_74_Update)
      // start: Forward dependencies from t_read_data0 to transition assign_stmt_74_sample_start_
      assign_stmt_74_sample_start_ <-& (array_obj_ref_28_update_completed_)
      // done: Forward dependencies from t_read_data0 to transition assign_stmt_74_sample_start_
      // RAW reenables for t_read_data0
      array_obj_ref_28_update_start_ o<-& (assign_stmt_74_sample_completed_ 0)
      // self-release: 
      assign_stmt_74_sample_start_ o<-& (assign_stmt_74_sample_completed_ 1)
      $null &-> (assign_stmt_74_update_start_)
      assign_stmt_74_update_start_ o<-& (assign_stmt_74_update_completed_ 0)
      // start: WAR dependencies for t_read_data0_69_delayed_1_0
      // done: WAR dependencies for t_read_data0_69_delayed_1_0
      // end:  	t_read_data0_69_delayed_1_0 := t_read_data0// bits of buffering = 16. 
      // start:  	read_write_bar_63_delayed_6_0 := read_write_bar $buffering 6// bits of buffering = 6. 
      //  file prog.linked.opt.aa, line 43
      $T[assign_stmt_77_sample_start_] 
      $T[assign_stmt_77_sample_completed_] 
      $T[assign_stmt_77_update_start_] 
      $T[assign_stmt_77_update_completed_] 
      // Source expression
      // read_write_bar
      // Target expression
      // (as target) read_write_bar_63_delayed_6_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_77_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_77_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_77_sample_start_ &-> (assign_stmt_77_Sample)
      assign_stmt_77_sample_completed_ <-& (assign_stmt_77_Sample)
      assign_stmt_77_sample_completed_ &-> ($null)
      assign_stmt_77_update_start_ &-> (assign_stmt_77_Update)
      assign_stmt_77_update_completed_ <-& (assign_stmt_77_Update)
      // start: Forward dependencies from read_write_bar to transition assign_stmt_77_sample_start_
      assign_stmt_77_sample_start_ <-& ($entry)
      // done: Forward dependencies from read_write_bar to transition assign_stmt_77_sample_start_
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (assign_stmt_77_sample_completed_ 0)
      // self-release: 
      assign_stmt_77_sample_start_ o<-& (assign_stmt_77_sample_completed_ 1)
      $null &-> (assign_stmt_77_update_start_)
      assign_stmt_77_update_start_ o<-& (assign_stmt_77_update_completed_ 0)
      // start: WAR dependencies for read_write_bar_63_delayed_6_0
      // done: WAR dependencies for read_write_bar_63_delayed_6_0
      // end:  	read_write_bar_63_delayed_6_0 := read_write_bar $buffering 6// bits of buffering = 6. 
      // start:  	$guard (read_write_bar_63_delayed_6_0) t_read_datal := ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_69_delayed_1_0))// bits of buffering = 64. 
      //  file prog.linked.opt.aa, line 44
      // Guard expression 
      // read_write_bar_63_delayed_6_0
      // Source expression
      // ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_69_delayed_1_0))
      $T[CONCAT_u32_u64_86_sample_start_] 
      $T[CONCAT_u32_u64_86_sample_completed_] 
      $T[CONCAT_u32_u64_86_update_start_] 
      $T[CONCAT_u32_u64_86_update_completed_] 
      // Guard dependency for expression CONCAT_u32_u64_86 with guard R_read_write_bar_63_delayed_6_0_78
      CONCAT_u32_u64_86_sample_start_ <-& (assign_stmt_77_update_completed_)
      // RAW reenables for read_write_bar_63_delayed_6_0
      assign_stmt_77_update_start_ o<-& (CONCAT_u32_u64_86_sample_completed_ 0)
      // (t_read_data3 && t_read_data2)
      // t_read_data3
      // t_read_data2
      // (t_read_data1 && t_read_data0_69_delayed_1_0)
      // t_read_data1
      // t_read_data0_69_delayed_1_0
      // start: Forward dependencies from (t_read_data3 && t_read_data2) to transition CONCAT_u32_u64_86_sample_start_
      CONCAT_u32_u64_86_sample_start_ <-& (array_obj_ref_70_update_completed_)
      CONCAT_u32_u64_86_sample_start_ <-& (array_obj_ref_56_update_completed_)
      // done: Forward dependencies from (t_read_data3 && t_read_data2) to transition CONCAT_u32_u64_86_sample_start_
      // start: Forward dependencies from (t_read_data1 && t_read_data0_69_delayed_1_0) to transition CONCAT_u32_u64_86_sample_start_
      CONCAT_u32_u64_86_sample_start_ <-& (assign_stmt_74_update_completed_)
      CONCAT_u32_u64_86_sample_start_ <-& (array_obj_ref_42_update_completed_)
      // done: Forward dependencies from (t_read_data1 && t_read_data0_69_delayed_1_0) to transition CONCAT_u32_u64_86_sample_start_
      ;;[CONCAT_u32_u64_86_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[CONCAT_u32_u64_86_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      CONCAT_u32_u64_86_sample_start_ &-> (CONCAT_u32_u64_86_Sample)
      CONCAT_u32_u64_86_sample_completed_ <-& (CONCAT_u32_u64_86_Sample)
      CONCAT_u32_u64_86_sample_completed_ &-> ($null)
      CONCAT_u32_u64_86_update_start_ &-> (CONCAT_u32_u64_86_Update)
      CONCAT_u32_u64_86_update_completed_ <-& (CONCAT_u32_u64_86_Update)
      // RAW reenables for (t_read_data3 && t_read_data2)
      array_obj_ref_70_update_start_ o<-& (CONCAT_u32_u64_86_sample_completed_ 0)
      array_obj_ref_56_update_start_ o<-& (CONCAT_u32_u64_86_sample_completed_ 0)
      // RAW reenables for (t_read_data1 && t_read_data0_69_delayed_1_0)
      assign_stmt_74_update_start_ o<-& (CONCAT_u32_u64_86_sample_completed_ 0)
      array_obj_ref_42_update_start_ o<-& (CONCAT_u32_u64_86_sample_completed_ 0)
      // self-release: 
      CONCAT_u32_u64_86_sample_start_ o<-& (CONCAT_u32_u64_86_sample_completed_ 1)
      $null &-> (CONCAT_u32_u64_86_update_start_)
      CONCAT_u32_u64_86_update_start_ o<-& (CONCAT_u32_u64_86_update_completed_ 0)
      // Target expression
      // (as target) t_read_datal
      // start: WAR dependencies for t_read_datal
      // done: WAR dependencies for t_read_datal
      // end:  	$guard (read_write_bar_63_delayed_6_0) t_read_datal := ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_69_delayed_1_0))// bits of buffering = 64. 
      // start:  	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 45
      // Guard expression 
      // read_write_bar
      // Source expression
      // write_data
      // Target expression
      // mem_array[addr]
      $T[array_obj_ref_90_sample_start_] 
      $T[array_obj_ref_90_sample_completed_] 
      $T[array_obj_ref_90_update_start_] 
      $T[array_obj_ref_90_update_completed_] 
      $T[array_obj_ref_90_word_address_calculated] 
      $T[array_obj_ref_90_root_address_calculated] 
      $T[array_obj_ref_90_offset_calculated] 
      $T[array_obj_ref_90_index_resized_0] 
      $T[array_obj_ref_90_index_scaled_0] 
      $T[array_obj_ref_90_index_computed_0] 
      // addr
      // start: Forward dependencies from addr to transition array_obj_ref_90_index_computed_0
      array_obj_ref_90_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr to transition array_obj_ref_90_index_computed_0
      ;;[array_obj_ref_90_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_90_index_computed_0 &-> (array_obj_ref_90_index_resize_0)
      array_obj_ref_90_index_resized_0 <-& (array_obj_ref_90_index_resize_0)
      ;;[array_obj_ref_90_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_90_index_resized_0 &-> (array_obj_ref_90_index_scale_0)
      array_obj_ref_90_index_scaled_0 <-& (array_obj_ref_90_index_scale_0)
      ;;[array_obj_ref_90_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_90_index_scaled_0 &-> (array_obj_ref_90_final_index_sum_regn)
      array_obj_ref_90_offset_calculated <-& (array_obj_ref_90_final_index_sum_regn)
      ;;[array_obj_ref_90_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_90_offset_calculated &-> (array_obj_ref_90_base_plus_offset)
      array_obj_ref_90_root_address_calculated <-& (array_obj_ref_90_base_plus_offset)
      ;;[array_obj_ref_90_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_90_root_address_calculated &-> (array_obj_ref_90_word_addrgen)
      array_obj_ref_90_word_address_calculated <-& (array_obj_ref_90_word_addrgen)
      ;;[array_obj_ref_90_Sample] 
      {
        ;;[array_obj_ref_90_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_90_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_90_sample_start_ <-& (array_obj_ref_90_word_address_calculated)
      // reenable-joins
      addr_update_enable o<-& (array_obj_ref_90_sample_completed_ 0)
      array_obj_ref_90_sample_start_ &-> (array_obj_ref_90_Sample)
      array_obj_ref_90_sample_completed_ <-& (array_obj_ref_90_Sample)
      array_obj_ref_90_sample_completed_ &-> ($null)
      array_obj_ref_90_update_start_ &-> (array_obj_ref_90_Update)
      array_obj_ref_90_update_completed_ <-& (array_obj_ref_90_Update)
      // Guard dependency for expression array_obj_ref_90 with guard R_read_write_bar_88
      array_obj_ref_90_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (array_obj_ref_90_sample_completed_ 0)
      // self-release: 
      array_obj_ref_90_sample_start_ o<-& (array_obj_ref_90_sample_completed_ 1)
      $null &-> (array_obj_ref_90_update_start_)
      array_obj_ref_90_update_start_ o<-& (array_obj_ref_90_update_completed_ 0)
      // start: Forward dependencies from write_data to transition array_obj_ref_90_sample_start_
      array_obj_ref_90_sample_start_ <-& ($entry)
      // done: Forward dependencies from write_data to transition array_obj_ref_90_sample_start_
      // RAW reenables for write_data
      write_data_update_enable o<-& (array_obj_ref_90_sample_completed_ 0)
      // end:  	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 16. 
      // start:  	read_write_bar_79_delayed_7_0 := read_write_bar $buffering 7// bits of buffering = 7. 
      //  file prog.linked.opt.aa, line 46
      $T[assign_stmt_95_sample_start_] 
      $T[assign_stmt_95_sample_completed_] 
      $T[assign_stmt_95_update_start_] 
      $T[assign_stmt_95_update_completed_] 
      // Source expression
      // read_write_bar
      // Target expression
      // (as target) read_write_bar_79_delayed_7_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_95_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_95_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_95_sample_start_ &-> (assign_stmt_95_Sample)
      assign_stmt_95_sample_completed_ <-& (assign_stmt_95_Sample)
      assign_stmt_95_sample_completed_ &-> ($null)
      assign_stmt_95_update_start_ &-> (assign_stmt_95_Update)
      assign_stmt_95_update_completed_ <-& (assign_stmt_95_Update)
      // start: Forward dependencies from read_write_bar to transition assign_stmt_95_sample_start_
      assign_stmt_95_sample_start_ <-& ($entry)
      // done: Forward dependencies from read_write_bar to transition assign_stmt_95_sample_start_
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (assign_stmt_95_sample_completed_ 0)
      // self-release: 
      assign_stmt_95_sample_start_ o<-& (assign_stmt_95_sample_completed_ 1)
      $null &-> (assign_stmt_95_update_start_)
      assign_stmt_95_update_start_ o<-& (assign_stmt_95_update_completed_ 0)
      // start: WAR dependencies for read_write_bar_79_delayed_7_0
      // done: WAR dependencies for read_write_bar_79_delayed_7_0
      // end:  	read_write_bar_79_delayed_7_0 := read_write_bar $buffering 7// bits of buffering = 7. 
      // start:  	read_datal := ( $mux read_write_bar_79_delayed_7_0 t_read_datal  0  ) // bits of buffering = 64. 
      //  file prog.linked.opt.aa, line 47
      // Source expression
      // ( $mux read_write_bar_79_delayed_7_0 t_read_datal  0  ) 
      $T[MUX_100_sample_start_] 
      $T[MUX_100_sample_completed_] 
      $T[MUX_100_update_start_] 
      $T[MUX_100_update_completed_] 
      // read_write_bar_79_delayed_7_0
      // t_read_datal
      // start: Forward dependencies from read_write_bar_79_delayed_7_0 to transition MUX_100_sample_start_
      MUX_100_sample_start_ <-& (assign_stmt_95_update_completed_)
      // done: Forward dependencies from read_write_bar_79_delayed_7_0 to transition MUX_100_sample_start_
      // start: Forward dependencies from t_read_datal to transition MUX_100_sample_start_
      MUX_100_sample_start_ <-& (CONCAT_u32_u64_86_update_completed_)
      // done: Forward dependencies from t_read_datal to transition MUX_100_sample_start_
      ;;[MUX_100_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_100_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_100_sample_start_ &-> (MUX_100_start)
      MUX_100_sample_completed_ <-& (MUX_100_start)
      MUX_100_sample_completed_ &-> ($null)
      MUX_100_update_start_ &-> (MUX_100_complete)
      MUX_100_update_completed_ <-& (MUX_100_complete)
      // RAW reenables for read_write_bar_79_delayed_7_0
      assign_stmt_95_update_start_ o<-& (MUX_100_sample_completed_ 0)
      // RAW reenables for t_read_datal
      CONCAT_u32_u64_86_update_start_ o<-& (MUX_100_sample_completed_ 0)
      // self-release: 
      MUX_100_sample_start_ o<-& (MUX_100_sample_completed_ 1)
      $null &-> (MUX_100_update_start_)
      MUX_100_update_start_ o<-& (MUX_100_update_completed_ 0)
      // Target expression
      // (as target) read_datal
      // read_datal
      // write to interface object
      // start: WAR dependencies for read_datal
      // done: WAR dependencies for read_datal
      // read_datal
      // write to interface object
      MUX_100_update_start_ <-& (read_datal_update_enable)
      // end:  	read_datal := ( $mux read_write_bar_79_delayed_7_0 t_read_datal  0  ) // bits of buffering = 64. 
      // load-store dependencies..
      // memory-space  memory_space_5
      //  array_obj_ref_28 load
      //  array_obj_ref_42 load
      //  array_obj_ref_56 load
      //  array_obj_ref_70 load
      //  array_obj_ref_90 store
      $T [array_obj_ref_28_array_obj_ref_90_delay] $delay
      // array_obj_ref_28(load) -> array_obj_ref_90(store)
      array_obj_ref_90_sample_start_ <-& (array_obj_ref_28_array_obj_ref_90_delay)
      array_obj_ref_28_array_obj_ref_90_delay <-& (array_obj_ref_28_sample_completed_)
      $T [array_obj_ref_42_array_obj_ref_90_delay] $delay
      // array_obj_ref_42(load) -> array_obj_ref_90(store)
      array_obj_ref_90_sample_start_ <-& (array_obj_ref_42_array_obj_ref_90_delay)
      array_obj_ref_42_array_obj_ref_90_delay <-& (array_obj_ref_42_sample_completed_)
      $T [array_obj_ref_56_array_obj_ref_90_delay] $delay
      // array_obj_ref_56(load) -> array_obj_ref_90(store)
      array_obj_ref_90_sample_start_ <-& (array_obj_ref_56_array_obj_ref_90_delay)
      array_obj_ref_56_array_obj_ref_90_delay <-& (array_obj_ref_56_sample_completed_)
      $T [array_obj_ref_70_array_obj_ref_90_delay] $delay
      // array_obj_ref_70(load) -> array_obj_ref_90(store)
      array_obj_ref_90_sample_start_ <-& (array_obj_ref_70_array_obj_ref_90_delay)
      array_obj_ref_70_array_obj_ref_90_delay <-& (array_obj_ref_70_sample_completed_)
      // reenable across ring for memory space memory_space_5
      $T[ring_reenable_memory_space_5] 
      // ordered memory-subsystem.
      ring_reenable_memory_space_5 <-& (array_obj_ref_90_sample_completed_)
      array_obj_ref_70_sample_start_ o<-& (ring_reenable_memory_space_5 1)
      array_obj_ref_28_sample_start_ o<-& (ring_reenable_memory_space_5 1)
      array_obj_ref_42_sample_start_ o<-& (ring_reenable_memory_space_5 1)
      array_obj_ref_56_sample_start_ o<-& (ring_reenable_memory_space_5 1)
    }
    ( read_datal_update_enable_in)
    ( read_write_bar_update_enable_out addr_update_enable_out write_data_update_enable_out)
    $P [read_write_bar_update_enable] 
    $P [addr_update_enable] 
    $P [write_data_update_enable] 
    $P [read_datal_update_enable] 
    $bind read_write_bar_update_enable <= assign_stmt_29_to_assign_stmt_101 : read_write_bar_update_enable_out
    $bind addr_update_enable <= assign_stmt_29_to_assign_stmt_101 : addr_update_enable_out
    $bind write_data_update_enable <= assign_stmt_29_to_assign_stmt_101 : write_data_update_enable_out
    $bind read_datal_update_enable => assign_stmt_29_to_assign_stmt_101 : read_datal_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %accessMem
    //  file prog.linked.opt.aa, line 27
    // mem_array[addr]
    $constant $W[array_obj_ref_28_resized_base_address] : $int<11> := _b00000000000// 0
    $constant $W[array_obj_ref_28_offset_scale_factor_0] : $int<11> := _b00000000001// 1
    $constant $W[array_obj_ref_28_word_offset_0] : $int<11> := _b00000000000// 0
    // 1 
    $constant $W[konst_33_wire_constant] : $int<12> := _b000000000001// 1
    // mem_array[addr1]
    $constant $W[array_obj_ref_42_resized_base_address] : $int<11> := _b00000000000// 0
    $constant $W[array_obj_ref_42_offset_scale_factor_0] : $int<11> := _b00000000001// 1
    $constant $W[array_obj_ref_42_word_offset_0] : $int<11> := _b00000000000// 0
    // 2 
    $constant $W[konst_47_wire_constant] : $int<12> := _b000000000010// 2
    // mem_array[addr2]
    $constant $W[array_obj_ref_56_resized_base_address] : $int<11> := _b00000000000// 0
    $constant $W[array_obj_ref_56_offset_scale_factor_0] : $int<11> := _b00000000001// 1
    $constant $W[array_obj_ref_56_word_offset_0] : $int<11> := _b00000000000// 0
    // 3 
    $constant $W[konst_61_wire_constant] : $int<12> := _b000000000011// 3
    // mem_array[addr3]
    $constant $W[array_obj_ref_70_resized_base_address] : $int<11> := _b00000000000// 0
    $constant $W[array_obj_ref_70_offset_scale_factor_0] : $int<11> := _b00000000001// 1
    $constant $W[array_obj_ref_70_word_offset_0] : $int<11> := _b00000000000// 0
    // mem_array[addr]
    $constant $W[array_obj_ref_90_resized_base_address] : $int<11> := _b00000000000// 0
    $constant $W[array_obj_ref_90_offset_scale_factor_0] : $int<11> := _b00000000001// 1
    $constant $W[array_obj_ref_90_word_offset_0] : $int<11> := _b00000000000// 0
    // ( $mux read_write_bar_79_delayed_7_0 t_read_datal  0  ) 
    // 0 
    $constant $W[konst_99_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 	$guard (read_write_bar) t_read_data0 := mem_array[addr]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 32
    // mem_array[addr]
    $intermediate $W[R_addr_27_resized] : $int<11>
    $intermediate $W[R_addr_27_scaled] : $int<11>
    $intermediate $W[array_obj_ref_28_final_offset] : $int<11>
    $intermediate $W[array_obj_ref_28_root_address] : $int<11>
    $W[array_obj_ref_28_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_28_data_0] : $int<16>
    // t_read_data0
    $W[t_read_data0_29] : $int<16>
    // 	$guard (read_write_bar) addr1 := (addr + 1 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 33
    // addr1
    $W[addr1_35] : $int<12>
    // 	read_write_bar_36_delayed_1_0 := read_write_bar// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 34
    // read_write_bar_36_delayed_1_0
    $W[read_write_bar_36_delayed_1_0_38] : $int<1>
    // 	$guard (read_write_bar_36_delayed_1_0) t_read_data1 := mem_array[addr1]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 35
    // mem_array[addr1]
    $intermediate $W[R_addr1_41_resized] : $int<11>
    $intermediate $W[R_addr1_41_scaled] : $int<11>
    $intermediate $W[array_obj_ref_42_final_offset] : $int<11>
    $intermediate $W[array_obj_ref_42_root_address] : $int<11>
    $W[array_obj_ref_42_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_42_data_0] : $int<16>
    // t_read_data1
    $W[t_read_data1_43] : $int<16>
    // 	$guard (read_write_bar) addr2 := (addr + 2 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 36
    // addr2
    $W[addr2_49] : $int<12>
    // 	read_write_bar_47_delayed_1_0 := read_write_bar// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 37
    // read_write_bar_47_delayed_1_0
    $W[read_write_bar_47_delayed_1_0_52] : $int<1>
    // 	$guard (read_write_bar_47_delayed_1_0) t_read_data2 := mem_array[addr2]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 38
    // mem_array[addr2]
    $intermediate $W[R_addr2_55_resized] : $int<11>
    $intermediate $W[R_addr2_55_scaled] : $int<11>
    $intermediate $W[array_obj_ref_56_final_offset] : $int<11>
    $intermediate $W[array_obj_ref_56_root_address] : $int<11>
    $W[array_obj_ref_56_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_56_data_0] : $int<16>
    // t_read_data2
    $W[t_read_data2_57] : $int<16>
    // 	$guard (read_write_bar) addr3 := (addr + 3 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 39
    // addr3
    $W[addr3_63] : $int<12>
    // 	read_write_bar_58_delayed_1_0 := read_write_bar// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 40
    // read_write_bar_58_delayed_1_0
    $W[read_write_bar_58_delayed_1_0_66] : $int<1>
    // 	$guard (read_write_bar_58_delayed_1_0) t_read_data3 := mem_array[addr3]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 41
    // mem_array[addr3]
    $intermediate $W[R_addr3_69_resized] : $int<11>
    $intermediate $W[R_addr3_69_scaled] : $int<11>
    $intermediate $W[array_obj_ref_70_final_offset] : $int<11>
    $intermediate $W[array_obj_ref_70_root_address] : $int<11>
    $W[array_obj_ref_70_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_70_data_0] : $int<16>
    // t_read_data3
    $W[t_read_data3_71] : $int<16>
    // 	t_read_data0_69_delayed_1_0 := t_read_data0// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 42
    // t_read_data0_69_delayed_1_0
    $W[t_read_data0_69_delayed_1_0_74] : $int<16>
    // 	read_write_bar_63_delayed_6_0 := read_write_bar $buffering 6// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 43
    // read_write_bar_63_delayed_6_0
    $W[read_write_bar_63_delayed_6_0_77] : $int<1>
    // 	$guard (read_write_bar_63_delayed_6_0) t_read_datal := ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_69_delayed_1_0))// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 44
    // (t_read_data3 && t_read_data2)
    $intermediate $W[CONCAT_u16_u32_82_wire] : $int<32>
    // (t_read_data1 && t_read_data0_69_delayed_1_0)
    $intermediate $W[CONCAT_u16_u32_85_wire] : $int<32>
    // t_read_datal
    $W[t_read_datal_87] : $int<64>
    // 	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 45
    // mem_array[addr]
    $intermediate $W[R_addr_89_resized] : $int<11>
    $intermediate $W[R_addr_89_scaled] : $int<11>
    $intermediate $W[array_obj_ref_90_final_offset] : $int<11>
    $intermediate $W[array_obj_ref_90_root_address] : $int<11>
    $W[array_obj_ref_90_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_90_data_0] : $int<16>
    // 	read_write_bar_79_delayed_7_0 := read_write_bar $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 46
    // read_write_bar_79_delayed_7_0
    $W[read_write_bar_79_delayed_7_0_95] : $int<1>
    // 	read_datal := ( $mux read_write_bar_79_delayed_7_0 t_read_datal  0  ) // bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 47
    // read_datal
    // 	$guard (read_write_bar) t_read_data0 := mem_array[addr]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 32
    // mem_array[addr]
    &/ [array_obj_ref_28_index_0_resize] (addr) (R_addr_27_resized) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_28_index_0_rename] (R_addr_27_resized) (R_addr_27_scaled) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_28_index_offset] (R_addr_27_scaled) (array_obj_ref_28_final_offset) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_28_root_address_inst] (array_obj_ref_28_final_offset) (array_obj_ref_28_root_address) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_28_addr_0] (array_obj_ref_28_root_address) (array_obj_ref_28_word_address_0) $guard ( read_write_bar ) 
    $flowthrough 
    $load [array_obj_ref_28_load_0] $from memory_space_5 (array_obj_ref_28_word_address_0) (array_obj_ref_28_data_0) $guard ( read_write_bar ) 
    $delay array_obj_ref_28_load_0 5
    &/ [array_obj_ref_28_gather_scatter] (array_obj_ref_28_data_0) (t_read_data0_29) $guard ( read_write_bar ) 
    $flowthrough 
    // 	$guard (read_write_bar) addr1 := (addr + 1 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 33
    // (addr + 1 )
    +[ADD_u12_u12_34_inst] (addr konst_33_wire_constant) (addr1_35) $guard ( read_write_bar )   
    $buffering  $out ADD_u12_u12_34_inst addr1_35 1
    $delay ADD_u12_u12_34_inst 1
    // 	read_write_bar_36_delayed_1_0 := read_write_bar// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 34
    # := [W_read_write_bar_36_delayed_1_0_36_inst] (read_write_bar) (read_write_bar_36_delayed_1_0_38)   
    // 	$guard (read_write_bar_36_delayed_1_0) t_read_data1 := mem_array[addr1]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 35
    // mem_array[addr1]
    &/ [array_obj_ref_42_index_0_resize] (addr1_35) (R_addr1_41_resized) $guard ( read_write_bar_36_delayed_1_0_38 ) 
    $flowthrough 
    &/ [array_obj_ref_42_index_0_rename] (R_addr1_41_resized) (R_addr1_41_scaled) $guard ( read_write_bar_36_delayed_1_0_38 ) 
    $flowthrough 
    &/ [array_obj_ref_42_index_offset] (R_addr1_41_scaled) (array_obj_ref_42_final_offset) $guard ( read_write_bar_36_delayed_1_0_38 ) 
    $flowthrough 
    &/ [array_obj_ref_42_root_address_inst] (array_obj_ref_42_final_offset) (array_obj_ref_42_root_address) $guard ( read_write_bar_36_delayed_1_0_38 ) 
    $flowthrough 
    &/ [array_obj_ref_42_addr_0] (array_obj_ref_42_root_address) (array_obj_ref_42_word_address_0) $guard ( read_write_bar_36_delayed_1_0_38 ) 
    $flowthrough 
    $load [array_obj_ref_42_load_0] $from memory_space_5 (array_obj_ref_42_word_address_0) (array_obj_ref_42_data_0) $guard ( read_write_bar_36_delayed_1_0_38 ) 
    $delay array_obj_ref_42_load_0 5
    &/ [array_obj_ref_42_gather_scatter] (array_obj_ref_42_data_0) (t_read_data1_43) $guard ( read_write_bar_36_delayed_1_0_38 ) 
    $flowthrough 
    // 	$guard (read_write_bar) addr2 := (addr + 2 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 36
    // (addr + 2 )
    +[ADD_u12_u12_48_inst] (addr konst_47_wire_constant) (addr2_49) $guard ( read_write_bar )   
    $buffering  $out ADD_u12_u12_48_inst addr2_49 1
    $delay ADD_u12_u12_48_inst 1
    // 	read_write_bar_47_delayed_1_0 := read_write_bar// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 37
    # := [W_read_write_bar_47_delayed_1_0_50_inst] (read_write_bar) (read_write_bar_47_delayed_1_0_52)   
    // 	$guard (read_write_bar_47_delayed_1_0) t_read_data2 := mem_array[addr2]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 38
    // mem_array[addr2]
    &/ [array_obj_ref_56_index_0_resize] (addr2_49) (R_addr2_55_resized) $guard ( read_write_bar_47_delayed_1_0_52 ) 
    $flowthrough 
    &/ [array_obj_ref_56_index_0_rename] (R_addr2_55_resized) (R_addr2_55_scaled) $guard ( read_write_bar_47_delayed_1_0_52 ) 
    $flowthrough 
    &/ [array_obj_ref_56_index_offset] (R_addr2_55_scaled) (array_obj_ref_56_final_offset) $guard ( read_write_bar_47_delayed_1_0_52 ) 
    $flowthrough 
    &/ [array_obj_ref_56_root_address_inst] (array_obj_ref_56_final_offset) (array_obj_ref_56_root_address) $guard ( read_write_bar_47_delayed_1_0_52 ) 
    $flowthrough 
    &/ [array_obj_ref_56_addr_0] (array_obj_ref_56_root_address) (array_obj_ref_56_word_address_0) $guard ( read_write_bar_47_delayed_1_0_52 ) 
    $flowthrough 
    $load [array_obj_ref_56_load_0] $from memory_space_5 (array_obj_ref_56_word_address_0) (array_obj_ref_56_data_0) $guard ( read_write_bar_47_delayed_1_0_52 ) 
    $delay array_obj_ref_56_load_0 5
    &/ [array_obj_ref_56_gather_scatter] (array_obj_ref_56_data_0) (t_read_data2_57) $guard ( read_write_bar_47_delayed_1_0_52 ) 
    $flowthrough 
    // 	$guard (read_write_bar) addr3 := (addr + 3 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 39
    // (addr + 3 )
    +[ADD_u12_u12_62_inst] (addr konst_61_wire_constant) (addr3_63) $guard ( read_write_bar )   
    $buffering  $out ADD_u12_u12_62_inst addr3_63 1
    $delay ADD_u12_u12_62_inst 1
    // 	read_write_bar_58_delayed_1_0 := read_write_bar// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 40
    # := [W_read_write_bar_58_delayed_1_0_64_inst] (read_write_bar) (read_write_bar_58_delayed_1_0_66)   
    // 	$guard (read_write_bar_58_delayed_1_0) t_read_data3 := mem_array[addr3]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 41
    // mem_array[addr3]
    &/ [array_obj_ref_70_index_0_resize] (addr3_63) (R_addr3_69_resized) $guard ( read_write_bar_58_delayed_1_0_66 ) 
    $flowthrough 
    &/ [array_obj_ref_70_index_0_rename] (R_addr3_69_resized) (R_addr3_69_scaled) $guard ( read_write_bar_58_delayed_1_0_66 ) 
    $flowthrough 
    &/ [array_obj_ref_70_index_offset] (R_addr3_69_scaled) (array_obj_ref_70_final_offset) $guard ( read_write_bar_58_delayed_1_0_66 ) 
    $flowthrough 
    &/ [array_obj_ref_70_root_address_inst] (array_obj_ref_70_final_offset) (array_obj_ref_70_root_address) $guard ( read_write_bar_58_delayed_1_0_66 ) 
    $flowthrough 
    &/ [array_obj_ref_70_addr_0] (array_obj_ref_70_root_address) (array_obj_ref_70_word_address_0) $guard ( read_write_bar_58_delayed_1_0_66 ) 
    $flowthrough 
    $load [array_obj_ref_70_load_0] $from memory_space_5 (array_obj_ref_70_word_address_0) (array_obj_ref_70_data_0) $guard ( read_write_bar_58_delayed_1_0_66 ) 
    $delay array_obj_ref_70_load_0 5
    &/ [array_obj_ref_70_gather_scatter] (array_obj_ref_70_data_0) (t_read_data3_71) $guard ( read_write_bar_58_delayed_1_0_66 ) 
    $flowthrough 
    // 	t_read_data0_69_delayed_1_0 := t_read_data0// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 42
    # := [W_t_read_data0_69_delayed_1_0_72_inst] (t_read_data0_29) (t_read_data0_69_delayed_1_0_74)   
    // 	read_write_bar_63_delayed_6_0 := read_write_bar $buffering 6// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 43
    # := [W_read_write_bar_63_delayed_6_0_75_inst] (read_write_bar) (read_write_bar_63_delayed_6_0_77)   
    $buffering  $out W_read_write_bar_63_delayed_6_0_75_inst read_write_bar_63_delayed_6_0_77 6
    // 	$guard (read_write_bar_63_delayed_6_0) t_read_datal := ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_69_delayed_1_0))// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 44
    // (t_read_data3 && t_read_data2)
    &&[CONCAT_u16_u32_82_inst] (t_read_data3_71 t_read_data2_57) (CONCAT_u16_u32_82_wire) $guard ( read_write_bar_63_delayed_6_0_77 )   $flowthrough 
    $delay CONCAT_u16_u32_82_inst 0
    // (t_read_data1 && t_read_data0_69_delayed_1_0)
    &&[CONCAT_u16_u32_85_inst] (t_read_data1_43 t_read_data0_69_delayed_1_0_74) (CONCAT_u16_u32_85_wire) $guard ( read_write_bar_63_delayed_6_0_77 )   $flowthrough 
    $delay CONCAT_u16_u32_85_inst 0
    // ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_69_delayed_1_0))
    &&[CONCAT_u32_u64_86_inst] (CONCAT_u16_u32_82_wire CONCAT_u16_u32_85_wire) (t_read_datal_87) $guard ( read_write_bar_63_delayed_6_0_77 )   
    $buffering  $out CONCAT_u32_u64_86_inst t_read_datal_87 1
    $delay CONCAT_u32_u64_86_inst 1
    // 	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 45
    // mem_array[addr]
    &/ [array_obj_ref_90_index_0_resize] (addr) (R_addr_89_resized) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_90_index_0_rename] (R_addr_89_resized) (R_addr_89_scaled) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_90_index_offset] (R_addr_89_scaled) (array_obj_ref_90_final_offset) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_90_root_address_inst] (array_obj_ref_90_final_offset) (array_obj_ref_90_root_address) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_90_addr_0] (array_obj_ref_90_root_address) (array_obj_ref_90_word_address_0) $guard ( ~ read_write_bar ) 
    $flowthrough 
    $store [array_obj_ref_90_store_0] $to memory_space_5 (array_obj_ref_90_word_address_0 array_obj_ref_90_data_0) $guard ( ~ read_write_bar ) 
    $delay array_obj_ref_90_store_0 5
    &/ [array_obj_ref_90_gather_scatter] (write_data) (array_obj_ref_90_data_0) $guard ( ~ read_write_bar ) 
    $flowthrough 
    // 	read_write_bar_79_delayed_7_0 := read_write_bar $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 46
    # := [W_read_write_bar_79_delayed_7_0_93_inst] (read_write_bar) (read_write_bar_79_delayed_7_0_95)   
    $buffering  $out W_read_write_bar_79_delayed_7_0_93_inst read_write_bar_79_delayed_7_0_95 7
    // 	read_datal := ( $mux read_write_bar_79_delayed_7_0 t_read_datal  0  ) // bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 47
    // ( $mux read_write_bar_79_delayed_7_0 t_read_datal  0  ) 
    ? [MUX_100_inst] (read_write_bar_79_delayed_7_0_95 t_read_datal_87 konst_99_wire_constant) (read_datal) 
    $buffering  $out MUX_100_inst read_datal 1
  }
  // end data-path
  // 	$guard (read_write_bar) t_read_data0 := mem_array[addr]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 32
  // mem_array[addr]
  // addr
  array_obj_ref_28_index_0_resize <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_index_resize_0/index_resize_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_index_resize_0/index_resize_ack)
  array_obj_ref_28_index_0_rename <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_index_scale_0/scale_rename_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_index_scale_0/scale_rename_ack)
  array_obj_ref_28_index_offset <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_final_index_sum_regn/req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_final_index_sum_regn/ack)
  array_obj_ref_28_root_address_inst <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_base_plus_offset/sum_rename_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_base_plus_offset/sum_rename_ack)
  array_obj_ref_28_addr_0 <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_word_addrgen/root_register_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_word_addrgen/root_register_ack)
  array_obj_ref_28_gather_scatter <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_Update/array_obj_ref_28_Merge/merge_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_Update/array_obj_ref_28_Merge/merge_ack)
  array_obj_ref_28_load_0 <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_Sample/word_access_start/word_0/rr assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_Update/word_access_complete/word_0/cr) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_Sample/word_access_start/word_0/ra assign_stmt_29_to_assign_stmt_101/array_obj_ref_28_Update/word_access_complete/word_0/ca)
  // 	$guard (read_write_bar) addr1 := (addr + 1 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 33
  // (addr + 1 )
  // addr
  ADD_u12_u12_34_inst <=> (assign_stmt_29_to_assign_stmt_101/ADD_u12_u12_34_Sample/rr assign_stmt_29_to_assign_stmt_101/ADD_u12_u12_34_Update/cr) (assign_stmt_29_to_assign_stmt_101/ADD_u12_u12_34_Sample/ra assign_stmt_29_to_assign_stmt_101/ADD_u12_u12_34_Update/ca)
  // 	read_write_bar_36_delayed_1_0 := read_write_bar// bits of buffering = 1. 
  //  file prog.linked.opt.aa, line 34
  // read_write_bar
  W_read_write_bar_36_delayed_1_0_36_inst <=> (assign_stmt_29_to_assign_stmt_101/assign_stmt_38_Sample/req assign_stmt_29_to_assign_stmt_101/assign_stmt_38_Update/req) (assign_stmt_29_to_assign_stmt_101/assign_stmt_38_Sample/ack assign_stmt_29_to_assign_stmt_101/assign_stmt_38_Update/ack)
  // 	$guard (read_write_bar_36_delayed_1_0) t_read_data1 := mem_array[addr1]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 35
  // mem_array[addr1]
  // addr1
  array_obj_ref_42_index_0_resize <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_index_resize_0/index_resize_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_index_resize_0/index_resize_ack)
  array_obj_ref_42_index_0_rename <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_index_scale_0/scale_rename_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_index_scale_0/scale_rename_ack)
  array_obj_ref_42_index_offset <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_final_index_sum_regn/req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_final_index_sum_regn/ack)
  array_obj_ref_42_root_address_inst <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_base_plus_offset/sum_rename_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_base_plus_offset/sum_rename_ack)
  array_obj_ref_42_addr_0 <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_word_addrgen/root_register_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_word_addrgen/root_register_ack)
  array_obj_ref_42_gather_scatter <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_Update/array_obj_ref_42_Merge/merge_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_Update/array_obj_ref_42_Merge/merge_ack)
  array_obj_ref_42_load_0 <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_Sample/word_access_start/word_0/rr assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_Update/word_access_complete/word_0/cr) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_Sample/word_access_start/word_0/ra assign_stmt_29_to_assign_stmt_101/array_obj_ref_42_Update/word_access_complete/word_0/ca)
  // 	$guard (read_write_bar) addr2 := (addr + 2 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 36
  // (addr + 2 )
  // addr
  ADD_u12_u12_48_inst <=> (assign_stmt_29_to_assign_stmt_101/ADD_u12_u12_48_Sample/rr assign_stmt_29_to_assign_stmt_101/ADD_u12_u12_48_Update/cr) (assign_stmt_29_to_assign_stmt_101/ADD_u12_u12_48_Sample/ra assign_stmt_29_to_assign_stmt_101/ADD_u12_u12_48_Update/ca)
  // 	read_write_bar_47_delayed_1_0 := read_write_bar// bits of buffering = 1. 
  //  file prog.linked.opt.aa, line 37
  // read_write_bar
  W_read_write_bar_47_delayed_1_0_50_inst <=> (assign_stmt_29_to_assign_stmt_101/assign_stmt_52_Sample/req assign_stmt_29_to_assign_stmt_101/assign_stmt_52_Update/req) (assign_stmt_29_to_assign_stmt_101/assign_stmt_52_Sample/ack assign_stmt_29_to_assign_stmt_101/assign_stmt_52_Update/ack)
  // 	$guard (read_write_bar_47_delayed_1_0) t_read_data2 := mem_array[addr2]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 38
  // mem_array[addr2]
  // addr2
  array_obj_ref_56_index_0_resize <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_index_resize_0/index_resize_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_index_resize_0/index_resize_ack)
  array_obj_ref_56_index_0_rename <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_index_scale_0/scale_rename_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_index_scale_0/scale_rename_ack)
  array_obj_ref_56_index_offset <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_final_index_sum_regn/req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_final_index_sum_regn/ack)
  array_obj_ref_56_root_address_inst <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_base_plus_offset/sum_rename_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_base_plus_offset/sum_rename_ack)
  array_obj_ref_56_addr_0 <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_word_addrgen/root_register_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_word_addrgen/root_register_ack)
  array_obj_ref_56_gather_scatter <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_Update/array_obj_ref_56_Merge/merge_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_Update/array_obj_ref_56_Merge/merge_ack)
  array_obj_ref_56_load_0 <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_Sample/word_access_start/word_0/rr assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_Update/word_access_complete/word_0/cr) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_Sample/word_access_start/word_0/ra assign_stmt_29_to_assign_stmt_101/array_obj_ref_56_Update/word_access_complete/word_0/ca)
  // 	$guard (read_write_bar) addr3 := (addr + 3 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 39
  // (addr + 3 )
  // addr
  ADD_u12_u12_62_inst <=> (assign_stmt_29_to_assign_stmt_101/ADD_u12_u12_62_Sample/rr assign_stmt_29_to_assign_stmt_101/ADD_u12_u12_62_Update/cr) (assign_stmt_29_to_assign_stmt_101/ADD_u12_u12_62_Sample/ra assign_stmt_29_to_assign_stmt_101/ADD_u12_u12_62_Update/ca)
  // 	read_write_bar_58_delayed_1_0 := read_write_bar// bits of buffering = 1. 
  //  file prog.linked.opt.aa, line 40
  // read_write_bar
  W_read_write_bar_58_delayed_1_0_64_inst <=> (assign_stmt_29_to_assign_stmt_101/assign_stmt_66_Sample/req assign_stmt_29_to_assign_stmt_101/assign_stmt_66_Update/req) (assign_stmt_29_to_assign_stmt_101/assign_stmt_66_Sample/ack assign_stmt_29_to_assign_stmt_101/assign_stmt_66_Update/ack)
  // 	$guard (read_write_bar_58_delayed_1_0) t_read_data3 := mem_array[addr3]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 41
  // mem_array[addr3]
  // addr3
  array_obj_ref_70_index_0_resize <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_index_resize_0/index_resize_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_index_resize_0/index_resize_ack)
  array_obj_ref_70_index_0_rename <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_index_scale_0/scale_rename_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_index_scale_0/scale_rename_ack)
  array_obj_ref_70_index_offset <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_final_index_sum_regn/req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_final_index_sum_regn/ack)
  array_obj_ref_70_root_address_inst <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_base_plus_offset/sum_rename_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_base_plus_offset/sum_rename_ack)
  array_obj_ref_70_addr_0 <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_word_addrgen/root_register_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_word_addrgen/root_register_ack)
  array_obj_ref_70_gather_scatter <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_Update/array_obj_ref_70_Merge/merge_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_Update/array_obj_ref_70_Merge/merge_ack)
  array_obj_ref_70_load_0 <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_Sample/word_access_start/word_0/rr assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_Update/word_access_complete/word_0/cr) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_Sample/word_access_start/word_0/ra assign_stmt_29_to_assign_stmt_101/array_obj_ref_70_Update/word_access_complete/word_0/ca)
  // 	t_read_data0_69_delayed_1_0 := t_read_data0// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 42
  // t_read_data0
  W_t_read_data0_69_delayed_1_0_72_inst <=> (assign_stmt_29_to_assign_stmt_101/assign_stmt_74_Sample/req assign_stmt_29_to_assign_stmt_101/assign_stmt_74_Update/req) (assign_stmt_29_to_assign_stmt_101/assign_stmt_74_Sample/ack assign_stmt_29_to_assign_stmt_101/assign_stmt_74_Update/ack)
  // 	read_write_bar_63_delayed_6_0 := read_write_bar $buffering 6// bits of buffering = 6. 
  //  file prog.linked.opt.aa, line 43
  // read_write_bar
  W_read_write_bar_63_delayed_6_0_75_inst <=> (assign_stmt_29_to_assign_stmt_101/assign_stmt_77_Sample/req assign_stmt_29_to_assign_stmt_101/assign_stmt_77_Update/req) (assign_stmt_29_to_assign_stmt_101/assign_stmt_77_Sample/ack assign_stmt_29_to_assign_stmt_101/assign_stmt_77_Update/ack)
  // 	$guard (read_write_bar_63_delayed_6_0) t_read_datal := ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_69_delayed_1_0))// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 44
  // ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_69_delayed_1_0))
  // (t_read_data3 && t_read_data2)
  // t_read_data3
  // t_read_data2
  // (t_read_data1 && t_read_data0_69_delayed_1_0)
  // t_read_data1
  // t_read_data0_69_delayed_1_0
  CONCAT_u32_u64_86_inst <=> (assign_stmt_29_to_assign_stmt_101/CONCAT_u32_u64_86_Sample/rr assign_stmt_29_to_assign_stmt_101/CONCAT_u32_u64_86_Update/cr) (assign_stmt_29_to_assign_stmt_101/CONCAT_u32_u64_86_Sample/ra assign_stmt_29_to_assign_stmt_101/CONCAT_u32_u64_86_Update/ca)
  // 	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 45
  // write_data
  // addr
  array_obj_ref_90_index_0_resize <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_index_resize_0/index_resize_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_index_resize_0/index_resize_ack)
  array_obj_ref_90_index_0_rename <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_index_scale_0/scale_rename_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_index_scale_0/scale_rename_ack)
  array_obj_ref_90_index_offset <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_final_index_sum_regn/req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_final_index_sum_regn/ack)
  array_obj_ref_90_root_address_inst <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_base_plus_offset/sum_rename_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_base_plus_offset/sum_rename_ack)
  array_obj_ref_90_addr_0 <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_word_addrgen/root_register_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_word_addrgen/root_register_ack)
  array_obj_ref_90_gather_scatter <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_Sample/array_obj_ref_90_Split/split_req) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_Sample/array_obj_ref_90_Split/split_ack)
  array_obj_ref_90_store_0 <=> (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_Sample/word_access_start/word_0/rr assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_Update/word_access_complete/word_0/cr) (assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_Sample/word_access_start/word_0/ra assign_stmt_29_to_assign_stmt_101/array_obj_ref_90_Update/word_access_complete/word_0/ca)
  // 	read_write_bar_79_delayed_7_0 := read_write_bar $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 46
  // read_write_bar
  W_read_write_bar_79_delayed_7_0_93_inst <=> (assign_stmt_29_to_assign_stmt_101/assign_stmt_95_Sample/req assign_stmt_29_to_assign_stmt_101/assign_stmt_95_Update/req) (assign_stmt_29_to_assign_stmt_101/assign_stmt_95_Sample/ack assign_stmt_29_to_assign_stmt_101/assign_stmt_95_Update/ack)
  // 	read_datal := ( $mux read_write_bar_79_delayed_7_0 t_read_datal  0  ) // bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 47
  // read_write_bar_79_delayed_7_0
  // t_read_datal
  // ( $mux read_write_bar_79_delayed_7_0 t_read_datal  0  ) 
  MUX_100_inst <=> (assign_stmt_29_to_assign_stmt_101/MUX_100_start/req assign_stmt_29_to_assign_stmt_101/MUX_100_complete/req) (assign_stmt_29_to_assign_stmt_101/MUX_100_start/ack assign_stmt_29_to_assign_stmt_101/MUX_100_complete/ack)
  $attribute delay => "10"
}
$module [accMemAccessDaemon] 
{
  $in acc_mem_request:$int<32>
  // can point into 
  $out acc_mem_responsel:$int<32>
  // can point into 
  acc_mem_responseh:$int<32>
  // can point into 
  // pipe-declarations for block %accMemAccessDaemon
  //  file prog.linked.opt.aa, line 50
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_110_to_assign_stmt_141] 
    {
      // start:  	cmd := acc_mem_request// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 55
      $T[assign_stmt_110_sample_start_] 
      $T[assign_stmt_110_sample_completed_] 
      $T[assign_stmt_110_update_start_] 
      $T[assign_stmt_110_update_completed_] 
      // Source expression
      // acc_mem_request
      // Target expression
      // (as target) cmd
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_110_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_110_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_110_sample_start_ &-> (assign_stmt_110_Sample)
      assign_stmt_110_sample_completed_ <-& (assign_stmt_110_Sample)
      assign_stmt_110_sample_completed_ &-> ($null)
      assign_stmt_110_update_start_ &-> (assign_stmt_110_Update)
      assign_stmt_110_update_completed_ <-& (assign_stmt_110_Update)
      // start: Forward dependencies from acc_mem_request to transition assign_stmt_110_sample_start_
      // done: Forward dependencies from acc_mem_request to transition assign_stmt_110_sample_start_
      // start: WAR dependencies for cmd
      // done: WAR dependencies for cmd
      // end:  	cmd := acc_mem_request// bits of buffering = 32. 
      // start: WAR dependencies for rwbar
      // done: WAR dependencies for rwbar
      // start:  	$volatile rwbar := ( $slice cmd 31 31 ) 
      //  file prog.linked.opt.aa, line 56
      // volatile! 
      // Source expression
      // ( $slice cmd 31 31 ) 
      // cmd
      // Target expression
      // (as target) rwbar
      // start: WAR dependencies for rwbar
      // done: WAR dependencies for rwbar
      // end:  	$volatile rwbar := ( $slice cmd 31 31 ) 
      // start: WAR dependencies for wdata
      // done: WAR dependencies for wdata
      // start:  	$volatile wdata := ( $slice cmd 27 12 ) 
      //  file prog.linked.opt.aa, line 57
      // volatile! 
      // Source expression
      // ( $slice cmd 27 12 ) 
      // cmd
      // Target expression
      // (as target) wdata
      // start: WAR dependencies for wdata
      // done: WAR dependencies for wdata
      // end:  	$volatile wdata := ( $slice cmd 27 12 ) 
      // start: WAR dependencies for addr
      // done: WAR dependencies for addr
      // start:  	$volatile addr := ( $slice cmd 11 0 ) 
      //  file prog.linked.opt.aa, line 58
      // volatile! 
      // Source expression
      // ( $slice cmd 11 0 ) 
      // cmd
      // Target expression
      // (as target) addr
      // start: WAR dependencies for addr
      // done: WAR dependencies for addr
      // end:  	$volatile addr := ( $slice cmd 11 0 ) 
      // start: 	$call accessMem (rwbar addr wdata ) (rdatal ) 
      //  file prog.linked.opt.aa, line 59
      $T[call_stmt_127_sample_start_] 
      $T[call_stmt_127_sample_completed_] 
      $T[call_stmt_127_update_start_] 
      $T[call_stmt_127_update_completed_] 
      // Call input argument 0
      // rwbar
      // Call input argument 1
      // addr
      // Call input argument 2
      // wdata
      // start: Forward dependencies from rwbar to transition call_stmt_127_sample_start_
      call_stmt_127_sample_start_ <-& (assign_stmt_110_update_completed_)
      // done: Forward dependencies from rwbar to transition call_stmt_127_sample_start_
      // start: Forward dependencies from addr to transition call_stmt_127_sample_start_
      call_stmt_127_sample_start_ <-& (assign_stmt_110_update_completed_)
      // done: Forward dependencies from addr to transition call_stmt_127_sample_start_
      // start: Forward dependencies from wdata to transition call_stmt_127_sample_start_
      call_stmt_127_sample_start_ <-& (assign_stmt_110_update_completed_)
      // done: Forward dependencies from wdata to transition call_stmt_127_sample_start_
      ;;[call_stmt_127_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_127_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_127_sample_start_ &-> (call_stmt_127_Sample)
      call_stmt_127_sample_completed_ <-& (call_stmt_127_Sample)
      call_stmt_127_sample_completed_ &-> ($null)
      call_stmt_127_update_start_ &-> (call_stmt_127_Update)
      call_stmt_127_update_completed_ <-& (call_stmt_127_Update)
      // Call output argument 0
      // (as target) rdatal
      // start: WAR dependencies for rdatal
      // done: WAR dependencies for rdatal
      // end: 	$call accessMem (rwbar addr wdata ) (rdatal ) 
      // start: WAR dependencies for rdata1
      // done: WAR dependencies for rdata1
      // start:  	$volatile rdata1 := ( $slice rdatal 63 32 ) 
      //  file prog.linked.opt.aa, line 60
      // volatile! 
      // Source expression
      // ( $slice rdatal 63 32 ) 
      // rdatal
      // Target expression
      // (as target) rdata1
      // start: WAR dependencies for rdata1
      // done: WAR dependencies for rdata1
      // end:  	$volatile rdata1 := ( $slice rdatal 63 32 ) 
      // start: WAR dependencies for rdata0
      // done: WAR dependencies for rdata0
      // start:  	$volatile rdata0 := ( $slice rdatal 31 0 ) 
      //  file prog.linked.opt.aa, line 61
      // volatile! 
      // Source expression
      // ( $slice rdatal 31 0 ) 
      // rdatal
      // Target expression
      // (as target) rdata0
      // start: WAR dependencies for rdata0
      // done: WAR dependencies for rdata0
      // end:  	$volatile rdata0 := ( $slice rdatal 31 0 ) 
      // start:  	acc_mem_responsel := rdata0// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 62
      $T[assign_stmt_138_sample_start_] 
      $T[assign_stmt_138_sample_completed_] 
      $T[assign_stmt_138_update_start_] 
      $T[assign_stmt_138_update_completed_] 
      // Source expression
      // rdata0
      // Target expression
      // (as target) acc_mem_responsel
      // acc_mem_responsel
      // write to interface object
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_138_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_138_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_138_sample_start_ &-> (assign_stmt_138_Sample)
      assign_stmt_138_sample_completed_ <-& (assign_stmt_138_Sample)
      assign_stmt_138_sample_completed_ &-> ($null)
      assign_stmt_138_update_start_ &-> (assign_stmt_138_Update)
      assign_stmt_138_update_completed_ <-& (assign_stmt_138_Update)
      // start: Forward dependencies from rdata0 to transition assign_stmt_138_sample_start_
      assign_stmt_138_sample_start_ <-& (call_stmt_127_update_completed_)
      // done: Forward dependencies from rdata0 to transition assign_stmt_138_sample_start_
      // start: WAR dependencies for acc_mem_responsel
      // done: WAR dependencies for acc_mem_responsel
      // acc_mem_responsel
      // write to interface object
      // end:  	acc_mem_responsel := rdata0// bits of buffering = 32. 
      // start:  	acc_mem_responseh := rdata1// bits of buffering = 32. 
      //  file prog.linked.opt.aa, line 63
      $T[assign_stmt_141_sample_start_] 
      $T[assign_stmt_141_sample_completed_] 
      $T[assign_stmt_141_update_start_] 
      $T[assign_stmt_141_update_completed_] 
      // Source expression
      // rdata1
      // Target expression
      // (as target) acc_mem_responseh
      // acc_mem_responseh
      // write to interface object
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_141_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_141_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_141_sample_start_ &-> (assign_stmt_141_Sample)
      assign_stmt_141_sample_completed_ <-& (assign_stmt_141_Sample)
      assign_stmt_141_sample_completed_ &-> ($null)
      assign_stmt_141_update_start_ &-> (assign_stmt_141_Update)
      assign_stmt_141_update_completed_ <-& (assign_stmt_141_Update)
      // start: Forward dependencies from rdata1 to transition assign_stmt_141_sample_start_
      assign_stmt_141_sample_start_ <-& (call_stmt_127_update_completed_)
      // done: Forward dependencies from rdata1 to transition assign_stmt_141_sample_start_
      // start: WAR dependencies for acc_mem_responseh
      // done: WAR dependencies for acc_mem_responseh
      // acc_mem_responseh
      // write to interface object
      // end:  	acc_mem_responseh := rdata1// bits of buffering = 32. 
      // load-store dependencies..
      // memory-space  memory_space_5
      //  call_stmt_127 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %accMemAccessDaemon
    //  file prog.linked.opt.aa, line 50
    // 	$call accessMem (rwbar addr wdata ) (rdatal ) 
    //  file prog.linked.opt.aa, line 59
    // 	cmd := acc_mem_request// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 55
    // cmd
    $W[cmd_110] : $int<32>
    // 	$volatile rwbar := ( $slice cmd 31 31 ) 
    //  file prog.linked.opt.aa, line 56
    // rwbar
    $W[rwbar_114] : $int<1>
    // 	$volatile wdata := ( $slice cmd 27 12 ) 
    //  file prog.linked.opt.aa, line 57
    // wdata
    $W[wdata_118] : $int<16>
    // 	$volatile addr := ( $slice cmd 11 0 ) 
    //  file prog.linked.opt.aa, line 58
    // addr
    $W[addr_122] : $int<12>
    // 	$call accessMem (rwbar addr wdata ) (rdatal ) 
    //  file prog.linked.opt.aa, line 59
    // rdatal
    $W[rdatal_127] : $int<64>
    // 	$volatile rdata1 := ( $slice rdatal 63 32 ) 
    //  file prog.linked.opt.aa, line 60
    // rdata1
    $W[rdata1_131] : $int<32>
    // 	$volatile rdata0 := ( $slice rdatal 31 0 ) 
    //  file prog.linked.opt.aa, line 61
    // rdata0
    $W[rdata0_135] : $int<32>
    // 	acc_mem_responsel := rdata0// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 62
    // acc_mem_responsel
    // 	acc_mem_responseh := rdata1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 63
    // acc_mem_responseh
    // 	cmd := acc_mem_request// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 55
    # := [W_cmd_108_inst] (acc_mem_request) (cmd_110)   
    // 	$volatile rwbar := ( $slice cmd 31 31 ) 
    //  file prog.linked.opt.aa, line 56
    // ( $slice cmd 31 31 ) 
    [:] [slice_113_inst] (cmd_110 31 31) (rwbar_114)  $flowthrough
    $delay slice_113_inst 0
    // 	$volatile wdata := ( $slice cmd 27 12 ) 
    //  file prog.linked.opt.aa, line 57
    // ( $slice cmd 27 12 ) 
    [:] [slice_117_inst] (cmd_110 27 12) (wdata_118)  $flowthrough
    $delay slice_117_inst 0
    // 	$volatile addr := ( $slice cmd 11 0 ) 
    //  file prog.linked.opt.aa, line 58
    // ( $slice cmd 11 0 ) 
    [:] [slice_121_inst] (cmd_110 11 0) (addr_122)  $flowthrough
    $delay slice_121_inst 0
    // 	$call accessMem (rwbar addr wdata ) (rdatal ) 
    //  file prog.linked.opt.aa, line 59
    $call [call_stmt_127_call] $module accessMem(rwbar_114 addr_122 wdata_118) (rdatal_127)  
    $delay call_stmt_127_call 10
    $buffering  $in call_stmt_127_call rwbar_114 1
    $buffering  $in call_stmt_127_call addr_122 1
    $buffering  $in call_stmt_127_call wdata_118 1
    $buffering  $out call_stmt_127_call rdatal_127 1
    // 	$volatile rdata1 := ( $slice rdatal 63 32 ) 
    //  file prog.linked.opt.aa, line 60
    // ( $slice rdatal 63 32 ) 
    [:] [slice_130_inst] (rdatal_127 63 32) (rdata1_131)  $flowthrough
    $delay slice_130_inst 0
    // 	$volatile rdata0 := ( $slice rdatal 31 0 ) 
    //  file prog.linked.opt.aa, line 61
    // ( $slice rdatal 31 0 ) 
    [:] [slice_134_inst] (rdatal_127 31 0) (rdata0_135)  $flowthrough
    $delay slice_134_inst 0
    // 	acc_mem_responsel := rdata0// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 62
    # := [W_acc_mem_responsel_136_inst] (rdata0_135) (acc_mem_responsel)   
    // 	acc_mem_responseh := rdata1// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 63
    # := [W_acc_mem_responseh_139_inst] (rdata1_131) (acc_mem_responseh)   
  }
  // end data-path
  // 	cmd := acc_mem_request// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 55
  // acc_mem_request
  W_cmd_108_inst <=> (assign_stmt_110_to_assign_stmt_141/assign_stmt_110_Sample/req assign_stmt_110_to_assign_stmt_141/assign_stmt_110_Update/req) (assign_stmt_110_to_assign_stmt_141/assign_stmt_110_Sample/ack assign_stmt_110_to_assign_stmt_141/assign_stmt_110_Update/ack)
  // 	$volatile rwbar := ( $slice cmd 31 31 ) 
  //  file prog.linked.opt.aa, line 56
  // cmd
  // 	$volatile wdata := ( $slice cmd 27 12 ) 
  //  file prog.linked.opt.aa, line 57
  // cmd
  // 	$volatile addr := ( $slice cmd 11 0 ) 
  //  file prog.linked.opt.aa, line 58
  // cmd
  // 	$call accessMem (rwbar addr wdata ) (rdatal ) 
  //  file prog.linked.opt.aa, line 59
  // rwbar
  // addr
  // wdata
  call_stmt_127_call <=> (assign_stmt_110_to_assign_stmt_141/call_stmt_127_Sample/crr assign_stmt_110_to_assign_stmt_141/call_stmt_127_Update/ccr) (assign_stmt_110_to_assign_stmt_141/call_stmt_127_Sample/cra assign_stmt_110_to_assign_stmt_141/call_stmt_127_Update/cca)
  // 	$volatile rdata1 := ( $slice rdatal 63 32 ) 
  //  file prog.linked.opt.aa, line 60
  // rdatal
  // 	$volatile rdata0 := ( $slice rdatal 31 0 ) 
  //  file prog.linked.opt.aa, line 61
  // rdatal
  // 	acc_mem_responsel := rdata0// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 62
  // rdata0
  W_acc_mem_responsel_136_inst <=> (assign_stmt_110_to_assign_stmt_141/assign_stmt_138_Sample/req assign_stmt_110_to_assign_stmt_141/assign_stmt_138_Update/req) (assign_stmt_110_to_assign_stmt_141/assign_stmt_138_Sample/ack assign_stmt_110_to_assign_stmt_141/assign_stmt_138_Update/ack)
  // 	acc_mem_responseh := rdata1// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 63
  // rdata1
  W_acc_mem_responseh_139_inst <=> (assign_stmt_110_to_assign_stmt_141/assign_stmt_141_Sample/req assign_stmt_110_to_assign_stmt_141/assign_stmt_141_Update/req) (assign_stmt_110_to_assign_stmt_141/assign_stmt_141_Sample/ack assign_stmt_110_to_assign_stmt_141/assign_stmt_141_Update/ack)
}
$pipeline $depth 14 $buffering 1 $module [accessMem_v] 
{
  $in read_write_bar:$int<1>
  // can point into 
  addr:$int<12>
  // can point into 
  write_data:$int<16>
  // can point into 
  $out read_datal:$int<64>
  // can point into 
  // pipe-declarations for block %accessMem_v
  //  file prog.linked.opt.aa, line 65
  // memory-space 5 is written into.
  // memory-space 5 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_152_to_assign_stmt_224] 
    {
      $T [read_write_bar_update_enable] 
      $T [read_write_bar_update_enable_out] 
      read_write_bar_update_enable &-> (read_write_bar_update_enable_out)
      $null &-> (read_write_bar_update_enable)
      $T [addr_update_enable] 
      $T [addr_update_enable_out] 
      addr_update_enable &-> (addr_update_enable_out)
      $null &-> (addr_update_enable)
      $T [write_data_update_enable] 
      $T [write_data_update_enable_out] 
      write_data_update_enable &-> (write_data_update_enable_out)
      $null &-> (write_data_update_enable)
      $T [read_datal_update_enable] 
      $T [read_datal_update_enable_in] 
      $null &-> (read_datal_update_enable)
      $null <-& (read_datal_update_enable_in) 
      $null &-> (read_datal_update_enable)
      read_datal_update_enable <-& (read_datal_update_enable_in) 
      // start:  	$guard (read_write_bar) t_read_data0 := mem_array[addr]// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 70
      // Guard expression 
      // read_write_bar
      // Source expression
      // mem_array[addr]
      $T[array_obj_ref_151_base_address_calculated] 
      $T[array_obj_ref_151_sample_start_] 
      $T[array_obj_ref_151_sample_completed_] 
      $T[array_obj_ref_151_update_start_] 
      $T[array_obj_ref_151_update_completed_] 
      $T[array_obj_ref_151_word_address_calculated] 
      $T[array_obj_ref_151_root_address_calculated] 
      $T[array_obj_ref_151_offset_calculated] 
      $T[array_obj_ref_151_index_resized_0] 
      $T[array_obj_ref_151_index_scaled_0] 
      $T[array_obj_ref_151_index_computed_0] 
      // addr
      // start: Forward dependencies from addr to transition array_obj_ref_151_index_computed_0
      array_obj_ref_151_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr to transition array_obj_ref_151_index_computed_0
      ;;[array_obj_ref_151_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_151_index_computed_0 &-> (array_obj_ref_151_index_resize_0)
      array_obj_ref_151_index_resized_0 <-& (array_obj_ref_151_index_resize_0)
      ;;[array_obj_ref_151_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_151_index_resized_0 &-> (array_obj_ref_151_index_scale_0)
      array_obj_ref_151_index_scaled_0 <-& (array_obj_ref_151_index_scale_0)
      ;;[array_obj_ref_151_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_151_index_scaled_0 &-> (array_obj_ref_151_final_index_sum_regn)
      array_obj_ref_151_offset_calculated <-& (array_obj_ref_151_final_index_sum_regn)
      ;;[array_obj_ref_151_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_151_offset_calculated &-> (array_obj_ref_151_base_plus_offset)
      array_obj_ref_151_root_address_calculated <-& (array_obj_ref_151_base_plus_offset)
      ;;[array_obj_ref_151_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_151_root_address_calculated &-> (array_obj_ref_151_word_addrgen)
      array_obj_ref_151_word_address_calculated <-& (array_obj_ref_151_word_addrgen)
      ;;[array_obj_ref_151_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_151_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_151_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_151_sample_start_ <-& (array_obj_ref_151_word_address_calculated)
      // reenable-joins
      addr_update_enable o<-& (array_obj_ref_151_sample_completed_ 0)
      array_obj_ref_151_sample_start_ &-> (array_obj_ref_151_Sample)
      array_obj_ref_151_sample_completed_ <-& (array_obj_ref_151_Sample)
      array_obj_ref_151_sample_completed_ &-> ($null)
      array_obj_ref_151_update_start_ &-> (array_obj_ref_151_Update)
      array_obj_ref_151_update_completed_ <-& (array_obj_ref_151_Update)
      // self-release: 
      array_obj_ref_151_sample_start_ o<-& (array_obj_ref_151_sample_completed_ 1)
      $null &-> (array_obj_ref_151_update_start_)
      array_obj_ref_151_update_start_ o<-& (array_obj_ref_151_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_151 with guard R_read_write_bar_148
      array_obj_ref_151_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (array_obj_ref_151_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data0
      // start: WAR dependencies for t_read_data0
      // done: WAR dependencies for t_read_data0
      // end:  	$guard (read_write_bar) t_read_data0 := mem_array[addr]// bits of buffering = 16. 
      // start:  	$guard (read_write_bar) addr1 := (addr + 32 )// bits of buffering = 12. 
      //  file prog.linked.opt.aa, line 71
      // Guard expression 
      // read_write_bar
      // Source expression
      // (addr + 32 )
      $T[ADD_u12_u12_157_sample_start_] 
      $T[ADD_u12_u12_157_sample_completed_] 
      $T[ADD_u12_u12_157_update_start_] 
      $T[ADD_u12_u12_157_update_completed_] 
      // Guard dependency for expression ADD_u12_u12_157 with guard R_read_write_bar_153
      ADD_u12_u12_157_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (ADD_u12_u12_157_sample_completed_ 0)
      // addr
      // start: Forward dependencies from addr to transition ADD_u12_u12_157_sample_start_
      ADD_u12_u12_157_sample_start_ <-& ($entry)
      // done: Forward dependencies from addr to transition ADD_u12_u12_157_sample_start_
      ;;[ADD_u12_u12_157_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u12_u12_157_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u12_u12_157_sample_start_ &-> (ADD_u12_u12_157_Sample)
      ADD_u12_u12_157_sample_completed_ <-& (ADD_u12_u12_157_Sample)
      ADD_u12_u12_157_sample_completed_ &-> ($null)
      ADD_u12_u12_157_update_start_ &-> (ADD_u12_u12_157_Update)
      ADD_u12_u12_157_update_completed_ <-& (ADD_u12_u12_157_Update)
      // RAW reenables for addr
      addr_update_enable o<-& (ADD_u12_u12_157_sample_completed_ 0)
      // self-release: 
      ADD_u12_u12_157_sample_start_ o<-& (ADD_u12_u12_157_sample_completed_ 1)
      $null &-> (ADD_u12_u12_157_update_start_)
      ADD_u12_u12_157_update_start_ o<-& (ADD_u12_u12_157_update_completed_ 0)
      // Target expression
      // (as target) addr1
      // start: WAR dependencies for addr1
      // done: WAR dependencies for addr1
      // end:  	$guard (read_write_bar) addr1 := (addr + 32 )// bits of buffering = 12. 
      // start:  	read_write_bar_146_delayed_1_0 := read_write_bar// bits of buffering = 1. 
      //  file prog.linked.opt.aa, line 72
      $T[assign_stmt_161_sample_start_] 
      $T[assign_stmt_161_sample_completed_] 
      $T[assign_stmt_161_update_start_] 
      $T[assign_stmt_161_update_completed_] 
      // Source expression
      // read_write_bar
      // Target expression
      // (as target) read_write_bar_146_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_161_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_161_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_161_sample_start_ &-> (assign_stmt_161_Sample)
      assign_stmt_161_sample_completed_ <-& (assign_stmt_161_Sample)
      assign_stmt_161_sample_completed_ &-> ($null)
      assign_stmt_161_update_start_ &-> (assign_stmt_161_Update)
      assign_stmt_161_update_completed_ <-& (assign_stmt_161_Update)
      // start: Forward dependencies from read_write_bar to transition assign_stmt_161_sample_start_
      assign_stmt_161_sample_start_ <-& ($entry)
      // done: Forward dependencies from read_write_bar to transition assign_stmt_161_sample_start_
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (assign_stmt_161_sample_completed_ 0)
      // self-release: 
      assign_stmt_161_sample_start_ o<-& (assign_stmt_161_sample_completed_ 1)
      $null &-> (assign_stmt_161_update_start_)
      assign_stmt_161_update_start_ o<-& (assign_stmt_161_update_completed_ 0)
      // start: WAR dependencies for read_write_bar_146_delayed_1_0
      // done: WAR dependencies for read_write_bar_146_delayed_1_0
      // end:  	read_write_bar_146_delayed_1_0 := read_write_bar// bits of buffering = 1. 
      // start:  	$guard (read_write_bar_146_delayed_1_0) t_read_data1 := mem_array[addr1]// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 73
      // Guard expression 
      // read_write_bar_146_delayed_1_0
      // Source expression
      // mem_array[addr1]
      $T[array_obj_ref_165_base_address_calculated] 
      $T[array_obj_ref_165_sample_start_] 
      $T[array_obj_ref_165_sample_completed_] 
      $T[array_obj_ref_165_update_start_] 
      $T[array_obj_ref_165_update_completed_] 
      $T[array_obj_ref_165_word_address_calculated] 
      $T[array_obj_ref_165_root_address_calculated] 
      $T[array_obj_ref_165_offset_calculated] 
      $T[array_obj_ref_165_index_resized_0] 
      $T[array_obj_ref_165_index_scaled_0] 
      $T[array_obj_ref_165_index_computed_0] 
      // addr1
      // start: Forward dependencies from addr1 to transition array_obj_ref_165_index_computed_0
      array_obj_ref_165_index_computed_0 <-& (ADD_u12_u12_157_update_completed_)
      // done: Forward dependencies from addr1 to transition array_obj_ref_165_index_computed_0
      ;;[array_obj_ref_165_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_165_index_computed_0 &-> (array_obj_ref_165_index_resize_0)
      array_obj_ref_165_index_resized_0 <-& (array_obj_ref_165_index_resize_0)
      ;;[array_obj_ref_165_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_165_index_resized_0 &-> (array_obj_ref_165_index_scale_0)
      array_obj_ref_165_index_scaled_0 <-& (array_obj_ref_165_index_scale_0)
      ;;[array_obj_ref_165_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_165_index_scaled_0 &-> (array_obj_ref_165_final_index_sum_regn)
      array_obj_ref_165_offset_calculated <-& (array_obj_ref_165_final_index_sum_regn)
      ;;[array_obj_ref_165_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_165_offset_calculated &-> (array_obj_ref_165_base_plus_offset)
      array_obj_ref_165_root_address_calculated <-& (array_obj_ref_165_base_plus_offset)
      ;;[array_obj_ref_165_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_165_root_address_calculated &-> (array_obj_ref_165_word_addrgen)
      array_obj_ref_165_word_address_calculated <-& (array_obj_ref_165_word_addrgen)
      ;;[array_obj_ref_165_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_165_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_165_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_165_sample_start_ <-& (array_obj_ref_165_word_address_calculated)
      // reenable-joins
      ADD_u12_u12_157_update_start_ o<-& (array_obj_ref_165_sample_completed_ 0)
      array_obj_ref_165_sample_start_ &-> (array_obj_ref_165_Sample)
      array_obj_ref_165_sample_completed_ <-& (array_obj_ref_165_Sample)
      array_obj_ref_165_sample_completed_ &-> ($null)
      array_obj_ref_165_update_start_ &-> (array_obj_ref_165_Update)
      array_obj_ref_165_update_completed_ <-& (array_obj_ref_165_Update)
      // self-release: 
      array_obj_ref_165_sample_start_ o<-& (array_obj_ref_165_sample_completed_ 1)
      $null &-> (array_obj_ref_165_update_start_)
      array_obj_ref_165_update_start_ o<-& (array_obj_ref_165_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_165 with guard R_read_write_bar_146_delayed_1_0_162
      array_obj_ref_165_sample_start_ <-& (assign_stmt_161_update_completed_)
      // RAW reenables for read_write_bar_146_delayed_1_0
      assign_stmt_161_update_start_ o<-& (array_obj_ref_165_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data1
      // start: WAR dependencies for t_read_data1
      // done: WAR dependencies for t_read_data1
      // end:  	$guard (read_write_bar_146_delayed_1_0) t_read_data1 := mem_array[addr1]// bits of buffering = 16. 
      // start:  	$guard (read_write_bar) addr2 := (addr + 64 )// bits of buffering = 12. 
      //  file prog.linked.opt.aa, line 74
      // Guard expression 
      // read_write_bar
      // Source expression
      // (addr + 64 )
      $T[ADD_u12_u12_171_sample_start_] 
      $T[ADD_u12_u12_171_sample_completed_] 
      $T[ADD_u12_u12_171_update_start_] 
      $T[ADD_u12_u12_171_update_completed_] 
      // Guard dependency for expression ADD_u12_u12_171 with guard R_read_write_bar_167
      ADD_u12_u12_171_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (ADD_u12_u12_171_sample_completed_ 0)
      // addr
      // start: Forward dependencies from addr to transition ADD_u12_u12_171_sample_start_
      ADD_u12_u12_171_sample_start_ <-& ($entry)
      // done: Forward dependencies from addr to transition ADD_u12_u12_171_sample_start_
      ;;[ADD_u12_u12_171_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u12_u12_171_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u12_u12_171_sample_start_ &-> (ADD_u12_u12_171_Sample)
      ADD_u12_u12_171_sample_completed_ <-& (ADD_u12_u12_171_Sample)
      ADD_u12_u12_171_sample_completed_ &-> ($null)
      ADD_u12_u12_171_update_start_ &-> (ADD_u12_u12_171_Update)
      ADD_u12_u12_171_update_completed_ <-& (ADD_u12_u12_171_Update)
      // RAW reenables for addr
      addr_update_enable o<-& (ADD_u12_u12_171_sample_completed_ 0)
      // self-release: 
      ADD_u12_u12_171_sample_start_ o<-& (ADD_u12_u12_171_sample_completed_ 1)
      $null &-> (ADD_u12_u12_171_update_start_)
      ADD_u12_u12_171_update_start_ o<-& (ADD_u12_u12_171_update_completed_ 0)
      // Target expression
      // (as target) addr2
      // start: WAR dependencies for addr2
      // done: WAR dependencies for addr2
      // end:  	$guard (read_write_bar) addr2 := (addr + 64 )// bits of buffering = 12. 
      // start:  	read_write_bar_157_delayed_1_0 := read_write_bar// bits of buffering = 1. 
      //  file prog.linked.opt.aa, line 75
      $T[assign_stmt_175_sample_start_] 
      $T[assign_stmt_175_sample_completed_] 
      $T[assign_stmt_175_update_start_] 
      $T[assign_stmt_175_update_completed_] 
      // Source expression
      // read_write_bar
      // Target expression
      // (as target) read_write_bar_157_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_175_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_175_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_175_sample_start_ &-> (assign_stmt_175_Sample)
      assign_stmt_175_sample_completed_ <-& (assign_stmt_175_Sample)
      assign_stmt_175_sample_completed_ &-> ($null)
      assign_stmt_175_update_start_ &-> (assign_stmt_175_Update)
      assign_stmt_175_update_completed_ <-& (assign_stmt_175_Update)
      // start: Forward dependencies from read_write_bar to transition assign_stmt_175_sample_start_
      assign_stmt_175_sample_start_ <-& ($entry)
      // done: Forward dependencies from read_write_bar to transition assign_stmt_175_sample_start_
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (assign_stmt_175_sample_completed_ 0)
      // self-release: 
      assign_stmt_175_sample_start_ o<-& (assign_stmt_175_sample_completed_ 1)
      $null &-> (assign_stmt_175_update_start_)
      assign_stmt_175_update_start_ o<-& (assign_stmt_175_update_completed_ 0)
      // start: WAR dependencies for read_write_bar_157_delayed_1_0
      // done: WAR dependencies for read_write_bar_157_delayed_1_0
      // end:  	read_write_bar_157_delayed_1_0 := read_write_bar// bits of buffering = 1. 
      // start:  	$guard (read_write_bar_157_delayed_1_0) t_read_data2 := mem_array[addr2]// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 76
      // Guard expression 
      // read_write_bar_157_delayed_1_0
      // Source expression
      // mem_array[addr2]
      $T[array_obj_ref_179_base_address_calculated] 
      $T[array_obj_ref_179_sample_start_] 
      $T[array_obj_ref_179_sample_completed_] 
      $T[array_obj_ref_179_update_start_] 
      $T[array_obj_ref_179_update_completed_] 
      $T[array_obj_ref_179_word_address_calculated] 
      $T[array_obj_ref_179_root_address_calculated] 
      $T[array_obj_ref_179_offset_calculated] 
      $T[array_obj_ref_179_index_resized_0] 
      $T[array_obj_ref_179_index_scaled_0] 
      $T[array_obj_ref_179_index_computed_0] 
      // addr2
      // start: Forward dependencies from addr2 to transition array_obj_ref_179_index_computed_0
      array_obj_ref_179_index_computed_0 <-& (ADD_u12_u12_171_update_completed_)
      // done: Forward dependencies from addr2 to transition array_obj_ref_179_index_computed_0
      ;;[array_obj_ref_179_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_179_index_computed_0 &-> (array_obj_ref_179_index_resize_0)
      array_obj_ref_179_index_resized_0 <-& (array_obj_ref_179_index_resize_0)
      ;;[array_obj_ref_179_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_179_index_resized_0 &-> (array_obj_ref_179_index_scale_0)
      array_obj_ref_179_index_scaled_0 <-& (array_obj_ref_179_index_scale_0)
      ;;[array_obj_ref_179_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_179_index_scaled_0 &-> (array_obj_ref_179_final_index_sum_regn)
      array_obj_ref_179_offset_calculated <-& (array_obj_ref_179_final_index_sum_regn)
      ;;[array_obj_ref_179_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_179_offset_calculated &-> (array_obj_ref_179_base_plus_offset)
      array_obj_ref_179_root_address_calculated <-& (array_obj_ref_179_base_plus_offset)
      ;;[array_obj_ref_179_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_179_root_address_calculated &-> (array_obj_ref_179_word_addrgen)
      array_obj_ref_179_word_address_calculated <-& (array_obj_ref_179_word_addrgen)
      ;;[array_obj_ref_179_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_179_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_179_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_179_sample_start_ <-& (array_obj_ref_179_word_address_calculated)
      // reenable-joins
      ADD_u12_u12_171_update_start_ o<-& (array_obj_ref_179_sample_completed_ 0)
      array_obj_ref_179_sample_start_ &-> (array_obj_ref_179_Sample)
      array_obj_ref_179_sample_completed_ <-& (array_obj_ref_179_Sample)
      array_obj_ref_179_sample_completed_ &-> ($null)
      array_obj_ref_179_update_start_ &-> (array_obj_ref_179_Update)
      array_obj_ref_179_update_completed_ <-& (array_obj_ref_179_Update)
      // self-release: 
      array_obj_ref_179_sample_start_ o<-& (array_obj_ref_179_sample_completed_ 1)
      $null &-> (array_obj_ref_179_update_start_)
      array_obj_ref_179_update_start_ o<-& (array_obj_ref_179_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_179 with guard R_read_write_bar_157_delayed_1_0_176
      array_obj_ref_179_sample_start_ <-& (assign_stmt_175_update_completed_)
      // RAW reenables for read_write_bar_157_delayed_1_0
      assign_stmt_175_update_start_ o<-& (array_obj_ref_179_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data2
      // start: WAR dependencies for t_read_data2
      // done: WAR dependencies for t_read_data2
      // end:  	$guard (read_write_bar_157_delayed_1_0) t_read_data2 := mem_array[addr2]// bits of buffering = 16. 
      // start:  	$guard (read_write_bar) addr3 := (addr + 96 )// bits of buffering = 12. 
      //  file prog.linked.opt.aa, line 77
      // Guard expression 
      // read_write_bar
      // Source expression
      // (addr + 96 )
      $T[ADD_u12_u12_185_sample_start_] 
      $T[ADD_u12_u12_185_sample_completed_] 
      $T[ADD_u12_u12_185_update_start_] 
      $T[ADD_u12_u12_185_update_completed_] 
      // Guard dependency for expression ADD_u12_u12_185 with guard R_read_write_bar_181
      ADD_u12_u12_185_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (ADD_u12_u12_185_sample_completed_ 0)
      // addr
      // start: Forward dependencies from addr to transition ADD_u12_u12_185_sample_start_
      ADD_u12_u12_185_sample_start_ <-& ($entry)
      // done: Forward dependencies from addr to transition ADD_u12_u12_185_sample_start_
      ;;[ADD_u12_u12_185_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[ADD_u12_u12_185_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      ADD_u12_u12_185_sample_start_ &-> (ADD_u12_u12_185_Sample)
      ADD_u12_u12_185_sample_completed_ <-& (ADD_u12_u12_185_Sample)
      ADD_u12_u12_185_sample_completed_ &-> ($null)
      ADD_u12_u12_185_update_start_ &-> (ADD_u12_u12_185_Update)
      ADD_u12_u12_185_update_completed_ <-& (ADD_u12_u12_185_Update)
      // RAW reenables for addr
      addr_update_enable o<-& (ADD_u12_u12_185_sample_completed_ 0)
      // self-release: 
      ADD_u12_u12_185_sample_start_ o<-& (ADD_u12_u12_185_sample_completed_ 1)
      $null &-> (ADD_u12_u12_185_update_start_)
      ADD_u12_u12_185_update_start_ o<-& (ADD_u12_u12_185_update_completed_ 0)
      // Target expression
      // (as target) addr3
      // start: WAR dependencies for addr3
      // done: WAR dependencies for addr3
      // end:  	$guard (read_write_bar) addr3 := (addr + 96 )// bits of buffering = 12. 
      // start:  	read_write_bar_168_delayed_1_0 := read_write_bar// bits of buffering = 1. 
      //  file prog.linked.opt.aa, line 78
      $T[assign_stmt_189_sample_start_] 
      $T[assign_stmt_189_sample_completed_] 
      $T[assign_stmt_189_update_start_] 
      $T[assign_stmt_189_update_completed_] 
      // Source expression
      // read_write_bar
      // Target expression
      // (as target) read_write_bar_168_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_189_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_189_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_189_sample_start_ &-> (assign_stmt_189_Sample)
      assign_stmt_189_sample_completed_ <-& (assign_stmt_189_Sample)
      assign_stmt_189_sample_completed_ &-> ($null)
      assign_stmt_189_update_start_ &-> (assign_stmt_189_Update)
      assign_stmt_189_update_completed_ <-& (assign_stmt_189_Update)
      // start: Forward dependencies from read_write_bar to transition assign_stmt_189_sample_start_
      assign_stmt_189_sample_start_ <-& ($entry)
      // done: Forward dependencies from read_write_bar to transition assign_stmt_189_sample_start_
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (assign_stmt_189_sample_completed_ 0)
      // self-release: 
      assign_stmt_189_sample_start_ o<-& (assign_stmt_189_sample_completed_ 1)
      $null &-> (assign_stmt_189_update_start_)
      assign_stmt_189_update_start_ o<-& (assign_stmt_189_update_completed_ 0)
      // start: WAR dependencies for read_write_bar_168_delayed_1_0
      // done: WAR dependencies for read_write_bar_168_delayed_1_0
      // end:  	read_write_bar_168_delayed_1_0 := read_write_bar// bits of buffering = 1. 
      // start:  	$guard (read_write_bar_168_delayed_1_0) t_read_data3 := mem_array[addr3]// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 79
      // Guard expression 
      // read_write_bar_168_delayed_1_0
      // Source expression
      // mem_array[addr3]
      $T[array_obj_ref_193_base_address_calculated] 
      $T[array_obj_ref_193_sample_start_] 
      $T[array_obj_ref_193_sample_completed_] 
      $T[array_obj_ref_193_update_start_] 
      $T[array_obj_ref_193_update_completed_] 
      $T[array_obj_ref_193_word_address_calculated] 
      $T[array_obj_ref_193_root_address_calculated] 
      $T[array_obj_ref_193_offset_calculated] 
      $T[array_obj_ref_193_index_resized_0] 
      $T[array_obj_ref_193_index_scaled_0] 
      $T[array_obj_ref_193_index_computed_0] 
      // addr3
      // start: Forward dependencies from addr3 to transition array_obj_ref_193_index_computed_0
      array_obj_ref_193_index_computed_0 <-& (ADD_u12_u12_185_update_completed_)
      // done: Forward dependencies from addr3 to transition array_obj_ref_193_index_computed_0
      ;;[array_obj_ref_193_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_193_index_computed_0 &-> (array_obj_ref_193_index_resize_0)
      array_obj_ref_193_index_resized_0 <-& (array_obj_ref_193_index_resize_0)
      ;;[array_obj_ref_193_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_193_index_resized_0 &-> (array_obj_ref_193_index_scale_0)
      array_obj_ref_193_index_scaled_0 <-& (array_obj_ref_193_index_scale_0)
      ;;[array_obj_ref_193_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_193_index_scaled_0 &-> (array_obj_ref_193_final_index_sum_regn)
      array_obj_ref_193_offset_calculated <-& (array_obj_ref_193_final_index_sum_regn)
      ;;[array_obj_ref_193_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_193_offset_calculated &-> (array_obj_ref_193_base_plus_offset)
      array_obj_ref_193_root_address_calculated <-& (array_obj_ref_193_base_plus_offset)
      ;;[array_obj_ref_193_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_193_root_address_calculated &-> (array_obj_ref_193_word_addrgen)
      array_obj_ref_193_word_address_calculated <-& (array_obj_ref_193_word_addrgen)
      ;;[array_obj_ref_193_Sample] 
      {
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_193_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
        ;;[array_obj_ref_193_Merge] 
        {
          $T [merge_req] $T [merge_ack]
        }
      }
      array_obj_ref_193_sample_start_ <-& (array_obj_ref_193_word_address_calculated)
      // reenable-joins
      ADD_u12_u12_185_update_start_ o<-& (array_obj_ref_193_sample_completed_ 0)
      array_obj_ref_193_sample_start_ &-> (array_obj_ref_193_Sample)
      array_obj_ref_193_sample_completed_ <-& (array_obj_ref_193_Sample)
      array_obj_ref_193_sample_completed_ &-> ($null)
      array_obj_ref_193_update_start_ &-> (array_obj_ref_193_Update)
      array_obj_ref_193_update_completed_ <-& (array_obj_ref_193_Update)
      // self-release: 
      array_obj_ref_193_sample_start_ o<-& (array_obj_ref_193_sample_completed_ 1)
      $null &-> (array_obj_ref_193_update_start_)
      array_obj_ref_193_update_start_ o<-& (array_obj_ref_193_update_completed_ 0)
      // Guard dependency for expression array_obj_ref_193 with guard R_read_write_bar_168_delayed_1_0_190
      array_obj_ref_193_sample_start_ <-& (assign_stmt_189_update_completed_)
      // RAW reenables for read_write_bar_168_delayed_1_0
      assign_stmt_189_update_start_ o<-& (array_obj_ref_193_sample_completed_ 0)
      // Target expression
      // (as target) t_read_data3
      // start: WAR dependencies for t_read_data3
      // done: WAR dependencies for t_read_data3
      // end:  	$guard (read_write_bar_168_delayed_1_0) t_read_data3 := mem_array[addr3]// bits of buffering = 16. 
      // start:  	read_write_bar_173_delayed_6_0 := read_write_bar $buffering 6// bits of buffering = 6. 
      //  file prog.linked.opt.aa, line 80
      $T[assign_stmt_197_sample_start_] 
      $T[assign_stmt_197_sample_completed_] 
      $T[assign_stmt_197_update_start_] 
      $T[assign_stmt_197_update_completed_] 
      // Source expression
      // read_write_bar
      // Target expression
      // (as target) read_write_bar_173_delayed_6_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_197_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_197_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_197_sample_start_ &-> (assign_stmt_197_Sample)
      assign_stmt_197_sample_completed_ <-& (assign_stmt_197_Sample)
      assign_stmt_197_sample_completed_ &-> ($null)
      assign_stmt_197_update_start_ &-> (assign_stmt_197_Update)
      assign_stmt_197_update_completed_ <-& (assign_stmt_197_Update)
      // start: Forward dependencies from read_write_bar to transition assign_stmt_197_sample_start_
      assign_stmt_197_sample_start_ <-& ($entry)
      // done: Forward dependencies from read_write_bar to transition assign_stmt_197_sample_start_
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (assign_stmt_197_sample_completed_ 0)
      // self-release: 
      assign_stmt_197_sample_start_ o<-& (assign_stmt_197_sample_completed_ 1)
      $null &-> (assign_stmt_197_update_start_)
      assign_stmt_197_update_start_ o<-& (assign_stmt_197_update_completed_ 0)
      // start: WAR dependencies for read_write_bar_173_delayed_6_0
      // done: WAR dependencies for read_write_bar_173_delayed_6_0
      // end:  	read_write_bar_173_delayed_6_0 := read_write_bar $buffering 6// bits of buffering = 6. 
      // start:  	t_read_data0_179_delayed_1_0 := t_read_data0// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 81
      $T[assign_stmt_200_sample_start_] 
      $T[assign_stmt_200_sample_completed_] 
      $T[assign_stmt_200_update_start_] 
      $T[assign_stmt_200_update_completed_] 
      // Source expression
      // t_read_data0
      // Target expression
      // (as target) t_read_data0_179_delayed_1_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_200_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_200_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_200_sample_start_ &-> (assign_stmt_200_Sample)
      assign_stmt_200_sample_completed_ <-& (assign_stmt_200_Sample)
      assign_stmt_200_sample_completed_ &-> ($null)
      assign_stmt_200_update_start_ &-> (assign_stmt_200_Update)
      assign_stmt_200_update_completed_ <-& (assign_stmt_200_Update)
      // start: Forward dependencies from t_read_data0 to transition assign_stmt_200_sample_start_
      assign_stmt_200_sample_start_ <-& (array_obj_ref_151_update_completed_)
      // done: Forward dependencies from t_read_data0 to transition assign_stmt_200_sample_start_
      // RAW reenables for t_read_data0
      array_obj_ref_151_update_start_ o<-& (assign_stmt_200_sample_completed_ 0)
      // self-release: 
      assign_stmt_200_sample_start_ o<-& (assign_stmt_200_sample_completed_ 1)
      $null &-> (assign_stmt_200_update_start_)
      assign_stmt_200_update_start_ o<-& (assign_stmt_200_update_completed_ 0)
      // start: WAR dependencies for t_read_data0_179_delayed_1_0
      // done: WAR dependencies for t_read_data0_179_delayed_1_0
      // end:  	t_read_data0_179_delayed_1_0 := t_read_data0// bits of buffering = 16. 
      // start:  	$guard (read_write_bar_173_delayed_6_0) t_read_datal := ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_179_delayed_1_0))// bits of buffering = 64. 
      //  file prog.linked.opt.aa, line 82
      // Guard expression 
      // read_write_bar_173_delayed_6_0
      // Source expression
      // ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_179_delayed_1_0))
      $T[CONCAT_u32_u64_209_sample_start_] 
      $T[CONCAT_u32_u64_209_sample_completed_] 
      $T[CONCAT_u32_u64_209_update_start_] 
      $T[CONCAT_u32_u64_209_update_completed_] 
      // Guard dependency for expression CONCAT_u32_u64_209 with guard R_read_write_bar_173_delayed_6_0_201
      CONCAT_u32_u64_209_sample_start_ <-& (assign_stmt_197_update_completed_)
      // RAW reenables for read_write_bar_173_delayed_6_0
      assign_stmt_197_update_start_ o<-& (CONCAT_u32_u64_209_sample_completed_ 0)
      // (t_read_data3 && t_read_data2)
      // t_read_data3
      // t_read_data2
      // (t_read_data1 && t_read_data0_179_delayed_1_0)
      // t_read_data1
      // t_read_data0_179_delayed_1_0
      // start: Forward dependencies from (t_read_data3 && t_read_data2) to transition CONCAT_u32_u64_209_sample_start_
      CONCAT_u32_u64_209_sample_start_ <-& (array_obj_ref_179_update_completed_)
      CONCAT_u32_u64_209_sample_start_ <-& (array_obj_ref_193_update_completed_)
      // done: Forward dependencies from (t_read_data3 && t_read_data2) to transition CONCAT_u32_u64_209_sample_start_
      // start: Forward dependencies from (t_read_data1 && t_read_data0_179_delayed_1_0) to transition CONCAT_u32_u64_209_sample_start_
      CONCAT_u32_u64_209_sample_start_ <-& (array_obj_ref_165_update_completed_)
      CONCAT_u32_u64_209_sample_start_ <-& (assign_stmt_200_update_completed_)
      // done: Forward dependencies from (t_read_data1 && t_read_data0_179_delayed_1_0) to transition CONCAT_u32_u64_209_sample_start_
      ;;[CONCAT_u32_u64_209_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[CONCAT_u32_u64_209_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      CONCAT_u32_u64_209_sample_start_ &-> (CONCAT_u32_u64_209_Sample)
      CONCAT_u32_u64_209_sample_completed_ <-& (CONCAT_u32_u64_209_Sample)
      CONCAT_u32_u64_209_sample_completed_ &-> ($null)
      CONCAT_u32_u64_209_update_start_ &-> (CONCAT_u32_u64_209_Update)
      CONCAT_u32_u64_209_update_completed_ <-& (CONCAT_u32_u64_209_Update)
      // RAW reenables for (t_read_data3 && t_read_data2)
      array_obj_ref_179_update_start_ o<-& (CONCAT_u32_u64_209_sample_completed_ 0)
      array_obj_ref_193_update_start_ o<-& (CONCAT_u32_u64_209_sample_completed_ 0)
      // RAW reenables for (t_read_data1 && t_read_data0_179_delayed_1_0)
      array_obj_ref_165_update_start_ o<-& (CONCAT_u32_u64_209_sample_completed_ 0)
      assign_stmt_200_update_start_ o<-& (CONCAT_u32_u64_209_sample_completed_ 0)
      // self-release: 
      CONCAT_u32_u64_209_sample_start_ o<-& (CONCAT_u32_u64_209_sample_completed_ 1)
      $null &-> (CONCAT_u32_u64_209_update_start_)
      CONCAT_u32_u64_209_update_start_ o<-& (CONCAT_u32_u64_209_update_completed_ 0)
      // Target expression
      // (as target) t_read_datal
      // start: WAR dependencies for t_read_datal
      // done: WAR dependencies for t_read_datal
      // end:  	$guard (read_write_bar_173_delayed_6_0) t_read_datal := ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_179_delayed_1_0))// bits of buffering = 64. 
      // start:  	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 83
      // Guard expression 
      // read_write_bar
      // Source expression
      // write_data
      // Target expression
      // mem_array[addr]
      $T[array_obj_ref_213_sample_start_] 
      $T[array_obj_ref_213_sample_completed_] 
      $T[array_obj_ref_213_update_start_] 
      $T[array_obj_ref_213_update_completed_] 
      $T[array_obj_ref_213_word_address_calculated] 
      $T[array_obj_ref_213_root_address_calculated] 
      $T[array_obj_ref_213_offset_calculated] 
      $T[array_obj_ref_213_index_resized_0] 
      $T[array_obj_ref_213_index_scaled_0] 
      $T[array_obj_ref_213_index_computed_0] 
      // addr
      // start: Forward dependencies from addr to transition array_obj_ref_213_index_computed_0
      array_obj_ref_213_index_computed_0 <-& ($entry)
      // done: Forward dependencies from addr to transition array_obj_ref_213_index_computed_0
      ;;[array_obj_ref_213_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_213_index_computed_0 &-> (array_obj_ref_213_index_resize_0)
      array_obj_ref_213_index_resized_0 <-& (array_obj_ref_213_index_resize_0)
      ;;[array_obj_ref_213_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_213_index_resized_0 &-> (array_obj_ref_213_index_scale_0)
      array_obj_ref_213_index_scaled_0 <-& (array_obj_ref_213_index_scale_0)
      ;;[array_obj_ref_213_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_213_index_scaled_0 &-> (array_obj_ref_213_final_index_sum_regn)
      array_obj_ref_213_offset_calculated <-& (array_obj_ref_213_final_index_sum_regn)
      ;;[array_obj_ref_213_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_213_offset_calculated &-> (array_obj_ref_213_base_plus_offset)
      array_obj_ref_213_root_address_calculated <-& (array_obj_ref_213_base_plus_offset)
      ;;[array_obj_ref_213_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_213_root_address_calculated &-> (array_obj_ref_213_word_addrgen)
      array_obj_ref_213_word_address_calculated <-& (array_obj_ref_213_word_addrgen)
      ;;[array_obj_ref_213_Sample] 
      {
        ;;[array_obj_ref_213_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_213_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_213_sample_start_ <-& (array_obj_ref_213_word_address_calculated)
      // reenable-joins
      addr_update_enable o<-& (array_obj_ref_213_sample_completed_ 0)
      array_obj_ref_213_sample_start_ &-> (array_obj_ref_213_Sample)
      array_obj_ref_213_sample_completed_ <-& (array_obj_ref_213_Sample)
      array_obj_ref_213_sample_completed_ &-> ($null)
      array_obj_ref_213_update_start_ &-> (array_obj_ref_213_Update)
      array_obj_ref_213_update_completed_ <-& (array_obj_ref_213_Update)
      // Guard dependency for expression array_obj_ref_213 with guard R_read_write_bar_211
      array_obj_ref_213_sample_start_ <-& ($entry)
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (array_obj_ref_213_sample_completed_ 0)
      // self-release: 
      array_obj_ref_213_sample_start_ o<-& (array_obj_ref_213_sample_completed_ 1)
      $null &-> (array_obj_ref_213_update_start_)
      array_obj_ref_213_update_start_ o<-& (array_obj_ref_213_update_completed_ 0)
      // start: Forward dependencies from write_data to transition array_obj_ref_213_sample_start_
      array_obj_ref_213_sample_start_ <-& ($entry)
      // done: Forward dependencies from write_data to transition array_obj_ref_213_sample_start_
      // RAW reenables for write_data
      write_data_update_enable o<-& (array_obj_ref_213_sample_completed_ 0)
      // end:  	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 16. 
      // start:  	read_write_bar_189_delayed_7_0 := read_write_bar $buffering 7// bits of buffering = 7. 
      //  file prog.linked.opt.aa, line 84
      $T[assign_stmt_218_sample_start_] 
      $T[assign_stmt_218_sample_completed_] 
      $T[assign_stmt_218_update_start_] 
      $T[assign_stmt_218_update_completed_] 
      // Source expression
      // read_write_bar
      // Target expression
      // (as target) read_write_bar_189_delayed_7_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_218_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_218_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_218_sample_start_ &-> (assign_stmt_218_Sample)
      assign_stmt_218_sample_completed_ <-& (assign_stmt_218_Sample)
      assign_stmt_218_sample_completed_ &-> ($null)
      assign_stmt_218_update_start_ &-> (assign_stmt_218_Update)
      assign_stmt_218_update_completed_ <-& (assign_stmt_218_Update)
      // start: Forward dependencies from read_write_bar to transition assign_stmt_218_sample_start_
      assign_stmt_218_sample_start_ <-& ($entry)
      // done: Forward dependencies from read_write_bar to transition assign_stmt_218_sample_start_
      // RAW reenables for read_write_bar
      read_write_bar_update_enable o<-& (assign_stmt_218_sample_completed_ 0)
      // self-release: 
      assign_stmt_218_sample_start_ o<-& (assign_stmt_218_sample_completed_ 1)
      $null &-> (assign_stmt_218_update_start_)
      assign_stmt_218_update_start_ o<-& (assign_stmt_218_update_completed_ 0)
      // start: WAR dependencies for read_write_bar_189_delayed_7_0
      // done: WAR dependencies for read_write_bar_189_delayed_7_0
      // end:  	read_write_bar_189_delayed_7_0 := read_write_bar $buffering 7// bits of buffering = 7. 
      // start:  	read_datal := ( $mux read_write_bar_189_delayed_7_0 t_read_datal  0  ) // bits of buffering = 64. 
      //  file prog.linked.opt.aa, line 85
      // Source expression
      // ( $mux read_write_bar_189_delayed_7_0 t_read_datal  0  ) 
      $T[MUX_223_sample_start_] 
      $T[MUX_223_sample_completed_] 
      $T[MUX_223_update_start_] 
      $T[MUX_223_update_completed_] 
      // read_write_bar_189_delayed_7_0
      // t_read_datal
      // start: Forward dependencies from read_write_bar_189_delayed_7_0 to transition MUX_223_sample_start_
      MUX_223_sample_start_ <-& (assign_stmt_218_update_completed_)
      // done: Forward dependencies from read_write_bar_189_delayed_7_0 to transition MUX_223_sample_start_
      // start: Forward dependencies from t_read_datal to transition MUX_223_sample_start_
      MUX_223_sample_start_ <-& (CONCAT_u32_u64_209_update_completed_)
      // done: Forward dependencies from t_read_datal to transition MUX_223_sample_start_
      ;;[MUX_223_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_223_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_223_sample_start_ &-> (MUX_223_start)
      MUX_223_sample_completed_ <-& (MUX_223_start)
      MUX_223_sample_completed_ &-> ($null)
      MUX_223_update_start_ &-> (MUX_223_complete)
      MUX_223_update_completed_ <-& (MUX_223_complete)
      // RAW reenables for read_write_bar_189_delayed_7_0
      assign_stmt_218_update_start_ o<-& (MUX_223_sample_completed_ 0)
      // RAW reenables for t_read_datal
      CONCAT_u32_u64_209_update_start_ o<-& (MUX_223_sample_completed_ 0)
      // self-release: 
      MUX_223_sample_start_ o<-& (MUX_223_sample_completed_ 1)
      $null &-> (MUX_223_update_start_)
      MUX_223_update_start_ o<-& (MUX_223_update_completed_ 0)
      // Target expression
      // (as target) read_datal
      // read_datal
      // write to interface object
      // start: WAR dependencies for read_datal
      // done: WAR dependencies for read_datal
      // read_datal
      // write to interface object
      MUX_223_update_start_ <-& (read_datal_update_enable)
      // end:  	read_datal := ( $mux read_write_bar_189_delayed_7_0 t_read_datal  0  ) // bits of buffering = 64. 
      // load-store dependencies..
      // memory-space  memory_space_5
      //  array_obj_ref_151 load
      //  array_obj_ref_165 load
      //  array_obj_ref_179 load
      //  array_obj_ref_193 load
      //  array_obj_ref_213 store
      $T [array_obj_ref_151_array_obj_ref_213_delay] $delay
      // array_obj_ref_151(load) -> array_obj_ref_213(store)
      array_obj_ref_213_sample_start_ <-& (array_obj_ref_151_array_obj_ref_213_delay)
      array_obj_ref_151_array_obj_ref_213_delay <-& (array_obj_ref_151_sample_completed_)
      $T [array_obj_ref_165_array_obj_ref_213_delay] $delay
      // array_obj_ref_165(load) -> array_obj_ref_213(store)
      array_obj_ref_213_sample_start_ <-& (array_obj_ref_165_array_obj_ref_213_delay)
      array_obj_ref_165_array_obj_ref_213_delay <-& (array_obj_ref_165_sample_completed_)
      $T [array_obj_ref_179_array_obj_ref_213_delay] $delay
      // array_obj_ref_179(load) -> array_obj_ref_213(store)
      array_obj_ref_213_sample_start_ <-& (array_obj_ref_179_array_obj_ref_213_delay)
      array_obj_ref_179_array_obj_ref_213_delay <-& (array_obj_ref_179_sample_completed_)
      $T [array_obj_ref_193_array_obj_ref_213_delay] $delay
      // array_obj_ref_193(load) -> array_obj_ref_213(store)
      array_obj_ref_213_sample_start_ <-& (array_obj_ref_193_array_obj_ref_213_delay)
      array_obj_ref_193_array_obj_ref_213_delay <-& (array_obj_ref_193_sample_completed_)
      // reenable across ring for memory space memory_space_5
      $T[ring_reenable_memory_space_5] 
      // ordered memory-subsystem.
      ring_reenable_memory_space_5 <-& (array_obj_ref_213_sample_completed_)
      array_obj_ref_179_sample_start_ o<-& (ring_reenable_memory_space_5 1)
      array_obj_ref_193_sample_start_ o<-& (ring_reenable_memory_space_5 1)
      array_obj_ref_151_sample_start_ o<-& (ring_reenable_memory_space_5 1)
      array_obj_ref_165_sample_start_ o<-& (ring_reenable_memory_space_5 1)
    }
    ( read_datal_update_enable_in)
    ( read_write_bar_update_enable_out addr_update_enable_out write_data_update_enable_out)
    $P [read_write_bar_update_enable] 
    $P [addr_update_enable] 
    $P [write_data_update_enable] 
    $P [read_datal_update_enable] 
    $bind read_write_bar_update_enable <= assign_stmt_152_to_assign_stmt_224 : read_write_bar_update_enable_out
    $bind addr_update_enable <= assign_stmt_152_to_assign_stmt_224 : addr_update_enable_out
    $bind write_data_update_enable <= assign_stmt_152_to_assign_stmt_224 : write_data_update_enable_out
    $bind read_datal_update_enable => assign_stmt_152_to_assign_stmt_224 : read_datal_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %accessMem_v
    //  file prog.linked.opt.aa, line 65
    // mem_array[addr]
    $constant $W[array_obj_ref_151_resized_base_address] : $int<11> := _b00000000000// 0
    $constant $W[array_obj_ref_151_offset_scale_factor_0] : $int<11> := _b00000000001// 1
    $constant $W[array_obj_ref_151_word_offset_0] : $int<11> := _b00000000000// 0
    // 32 
    $constant $W[konst_156_wire_constant] : $int<12> := _b000000100000// 32
    // mem_array[addr1]
    $constant $W[array_obj_ref_165_resized_base_address] : $int<11> := _b00000000000// 0
    $constant $W[array_obj_ref_165_offset_scale_factor_0] : $int<11> := _b00000000001// 1
    $constant $W[array_obj_ref_165_word_offset_0] : $int<11> := _b00000000000// 0
    // 64 
    $constant $W[konst_170_wire_constant] : $int<12> := _b000001000000// 64
    // mem_array[addr2]
    $constant $W[array_obj_ref_179_resized_base_address] : $int<11> := _b00000000000// 0
    $constant $W[array_obj_ref_179_offset_scale_factor_0] : $int<11> := _b00000000001// 1
    $constant $W[array_obj_ref_179_word_offset_0] : $int<11> := _b00000000000// 0
    // 96 
    $constant $W[konst_184_wire_constant] : $int<12> := _b000001100000// 96
    // mem_array[addr3]
    $constant $W[array_obj_ref_193_resized_base_address] : $int<11> := _b00000000000// 0
    $constant $W[array_obj_ref_193_offset_scale_factor_0] : $int<11> := _b00000000001// 1
    $constant $W[array_obj_ref_193_word_offset_0] : $int<11> := _b00000000000// 0
    // mem_array[addr]
    $constant $W[array_obj_ref_213_resized_base_address] : $int<11> := _b00000000000// 0
    $constant $W[array_obj_ref_213_offset_scale_factor_0] : $int<11> := _b00000000001// 1
    $constant $W[array_obj_ref_213_word_offset_0] : $int<11> := _b00000000000// 0
    // ( $mux read_write_bar_189_delayed_7_0 t_read_datal  0  ) 
    // 0 
    $constant $W[konst_222_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 	$guard (read_write_bar) t_read_data0 := mem_array[addr]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 70
    // mem_array[addr]
    $intermediate $W[R_addr_150_resized] : $int<11>
    $intermediate $W[R_addr_150_scaled] : $int<11>
    $intermediate $W[array_obj_ref_151_final_offset] : $int<11>
    $intermediate $W[array_obj_ref_151_root_address] : $int<11>
    $W[array_obj_ref_151_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_151_data_0] : $int<16>
    // t_read_data0
    $W[t_read_data0_152] : $int<16>
    // 	$guard (read_write_bar) addr1 := (addr + 32 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 71
    // addr1
    $W[addr1_158] : $int<12>
    // 	read_write_bar_146_delayed_1_0 := read_write_bar// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 72
    // read_write_bar_146_delayed_1_0
    $W[read_write_bar_146_delayed_1_0_161] : $int<1>
    // 	$guard (read_write_bar_146_delayed_1_0) t_read_data1 := mem_array[addr1]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 73
    // mem_array[addr1]
    $intermediate $W[R_addr1_164_resized] : $int<11>
    $intermediate $W[R_addr1_164_scaled] : $int<11>
    $intermediate $W[array_obj_ref_165_final_offset] : $int<11>
    $intermediate $W[array_obj_ref_165_root_address] : $int<11>
    $W[array_obj_ref_165_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_165_data_0] : $int<16>
    // t_read_data1
    $W[t_read_data1_166] : $int<16>
    // 	$guard (read_write_bar) addr2 := (addr + 64 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 74
    // addr2
    $W[addr2_172] : $int<12>
    // 	read_write_bar_157_delayed_1_0 := read_write_bar// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 75
    // read_write_bar_157_delayed_1_0
    $W[read_write_bar_157_delayed_1_0_175] : $int<1>
    // 	$guard (read_write_bar_157_delayed_1_0) t_read_data2 := mem_array[addr2]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 76
    // mem_array[addr2]
    $intermediate $W[R_addr2_178_resized] : $int<11>
    $intermediate $W[R_addr2_178_scaled] : $int<11>
    $intermediate $W[array_obj_ref_179_final_offset] : $int<11>
    $intermediate $W[array_obj_ref_179_root_address] : $int<11>
    $W[array_obj_ref_179_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_179_data_0] : $int<16>
    // t_read_data2
    $W[t_read_data2_180] : $int<16>
    // 	$guard (read_write_bar) addr3 := (addr + 96 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 77
    // addr3
    $W[addr3_186] : $int<12>
    // 	read_write_bar_168_delayed_1_0 := read_write_bar// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 78
    // read_write_bar_168_delayed_1_0
    $W[read_write_bar_168_delayed_1_0_189] : $int<1>
    // 	$guard (read_write_bar_168_delayed_1_0) t_read_data3 := mem_array[addr3]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 79
    // mem_array[addr3]
    $intermediate $W[R_addr3_192_resized] : $int<11>
    $intermediate $W[R_addr3_192_scaled] : $int<11>
    $intermediate $W[array_obj_ref_193_final_offset] : $int<11>
    $intermediate $W[array_obj_ref_193_root_address] : $int<11>
    $W[array_obj_ref_193_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_193_data_0] : $int<16>
    // t_read_data3
    $W[t_read_data3_194] : $int<16>
    // 	read_write_bar_173_delayed_6_0 := read_write_bar $buffering 6// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 80
    // read_write_bar_173_delayed_6_0
    $W[read_write_bar_173_delayed_6_0_197] : $int<1>
    // 	t_read_data0_179_delayed_1_0 := t_read_data0// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 81
    // t_read_data0_179_delayed_1_0
    $W[t_read_data0_179_delayed_1_0_200] : $int<16>
    // 	$guard (read_write_bar_173_delayed_6_0) t_read_datal := ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_179_delayed_1_0))// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 82
    // (t_read_data3 && t_read_data2)
    $intermediate $W[CONCAT_u16_u32_205_wire] : $int<32>
    // (t_read_data1 && t_read_data0_179_delayed_1_0)
    $intermediate $W[CONCAT_u16_u32_208_wire] : $int<32>
    // t_read_datal
    $W[t_read_datal_210] : $int<64>
    // 	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 83
    // mem_array[addr]
    $intermediate $W[R_addr_212_resized] : $int<11>
    $intermediate $W[R_addr_212_scaled] : $int<11>
    $intermediate $W[array_obj_ref_213_final_offset] : $int<11>
    $intermediate $W[array_obj_ref_213_root_address] : $int<11>
    $W[array_obj_ref_213_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_213_data_0] : $int<16>
    // 	read_write_bar_189_delayed_7_0 := read_write_bar $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 84
    // read_write_bar_189_delayed_7_0
    $W[read_write_bar_189_delayed_7_0_218] : $int<1>
    // 	read_datal := ( $mux read_write_bar_189_delayed_7_0 t_read_datal  0  ) // bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 85
    // read_datal
    // 	$guard (read_write_bar) t_read_data0 := mem_array[addr]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 70
    // mem_array[addr]
    &/ [array_obj_ref_151_index_0_resize] (addr) (R_addr_150_resized) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_151_index_0_rename] (R_addr_150_resized) (R_addr_150_scaled) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_151_index_offset] (R_addr_150_scaled) (array_obj_ref_151_final_offset) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_151_root_address_inst] (array_obj_ref_151_final_offset) (array_obj_ref_151_root_address) $guard ( read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_151_addr_0] (array_obj_ref_151_root_address) (array_obj_ref_151_word_address_0) $guard ( read_write_bar ) 
    $flowthrough 
    $load [array_obj_ref_151_load_0] $from memory_space_5 (array_obj_ref_151_word_address_0) (array_obj_ref_151_data_0) $guard ( read_write_bar ) 
    $delay array_obj_ref_151_load_0 5
    &/ [array_obj_ref_151_gather_scatter] (array_obj_ref_151_data_0) (t_read_data0_152) $guard ( read_write_bar ) 
    $flowthrough 
    // 	$guard (read_write_bar) addr1 := (addr + 32 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 71
    // (addr + 32 )
    +[ADD_u12_u12_157_inst] (addr konst_156_wire_constant) (addr1_158) $guard ( read_write_bar )   
    $buffering  $out ADD_u12_u12_157_inst addr1_158 1
    $delay ADD_u12_u12_157_inst 1
    // 	read_write_bar_146_delayed_1_0 := read_write_bar// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 72
    # := [W_read_write_bar_146_delayed_1_0_159_inst] (read_write_bar) (read_write_bar_146_delayed_1_0_161)   
    // 	$guard (read_write_bar_146_delayed_1_0) t_read_data1 := mem_array[addr1]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 73
    // mem_array[addr1]
    &/ [array_obj_ref_165_index_0_resize] (addr1_158) (R_addr1_164_resized) $guard ( read_write_bar_146_delayed_1_0_161 ) 
    $flowthrough 
    &/ [array_obj_ref_165_index_0_rename] (R_addr1_164_resized) (R_addr1_164_scaled) $guard ( read_write_bar_146_delayed_1_0_161 ) 
    $flowthrough 
    &/ [array_obj_ref_165_index_offset] (R_addr1_164_scaled) (array_obj_ref_165_final_offset) $guard ( read_write_bar_146_delayed_1_0_161 ) 
    $flowthrough 
    &/ [array_obj_ref_165_root_address_inst] (array_obj_ref_165_final_offset) (array_obj_ref_165_root_address) $guard ( read_write_bar_146_delayed_1_0_161 ) 
    $flowthrough 
    &/ [array_obj_ref_165_addr_0] (array_obj_ref_165_root_address) (array_obj_ref_165_word_address_0) $guard ( read_write_bar_146_delayed_1_0_161 ) 
    $flowthrough 
    $load [array_obj_ref_165_load_0] $from memory_space_5 (array_obj_ref_165_word_address_0) (array_obj_ref_165_data_0) $guard ( read_write_bar_146_delayed_1_0_161 ) 
    $delay array_obj_ref_165_load_0 5
    &/ [array_obj_ref_165_gather_scatter] (array_obj_ref_165_data_0) (t_read_data1_166) $guard ( read_write_bar_146_delayed_1_0_161 ) 
    $flowthrough 
    // 	$guard (read_write_bar) addr2 := (addr + 64 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 74
    // (addr + 64 )
    +[ADD_u12_u12_171_inst] (addr konst_170_wire_constant) (addr2_172) $guard ( read_write_bar )   
    $buffering  $out ADD_u12_u12_171_inst addr2_172 1
    $delay ADD_u12_u12_171_inst 1
    // 	read_write_bar_157_delayed_1_0 := read_write_bar// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 75
    # := [W_read_write_bar_157_delayed_1_0_173_inst] (read_write_bar) (read_write_bar_157_delayed_1_0_175)   
    // 	$guard (read_write_bar_157_delayed_1_0) t_read_data2 := mem_array[addr2]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 76
    // mem_array[addr2]
    &/ [array_obj_ref_179_index_0_resize] (addr2_172) (R_addr2_178_resized) $guard ( read_write_bar_157_delayed_1_0_175 ) 
    $flowthrough 
    &/ [array_obj_ref_179_index_0_rename] (R_addr2_178_resized) (R_addr2_178_scaled) $guard ( read_write_bar_157_delayed_1_0_175 ) 
    $flowthrough 
    &/ [array_obj_ref_179_index_offset] (R_addr2_178_scaled) (array_obj_ref_179_final_offset) $guard ( read_write_bar_157_delayed_1_0_175 ) 
    $flowthrough 
    &/ [array_obj_ref_179_root_address_inst] (array_obj_ref_179_final_offset) (array_obj_ref_179_root_address) $guard ( read_write_bar_157_delayed_1_0_175 ) 
    $flowthrough 
    &/ [array_obj_ref_179_addr_0] (array_obj_ref_179_root_address) (array_obj_ref_179_word_address_0) $guard ( read_write_bar_157_delayed_1_0_175 ) 
    $flowthrough 
    $load [array_obj_ref_179_load_0] $from memory_space_5 (array_obj_ref_179_word_address_0) (array_obj_ref_179_data_0) $guard ( read_write_bar_157_delayed_1_0_175 ) 
    $delay array_obj_ref_179_load_0 5
    &/ [array_obj_ref_179_gather_scatter] (array_obj_ref_179_data_0) (t_read_data2_180) $guard ( read_write_bar_157_delayed_1_0_175 ) 
    $flowthrough 
    // 	$guard (read_write_bar) addr3 := (addr + 96 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 77
    // (addr + 96 )
    +[ADD_u12_u12_185_inst] (addr konst_184_wire_constant) (addr3_186) $guard ( read_write_bar )   
    $buffering  $out ADD_u12_u12_185_inst addr3_186 1
    $delay ADD_u12_u12_185_inst 1
    // 	read_write_bar_168_delayed_1_0 := read_write_bar// bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 78
    # := [W_read_write_bar_168_delayed_1_0_187_inst] (read_write_bar) (read_write_bar_168_delayed_1_0_189)   
    // 	$guard (read_write_bar_168_delayed_1_0) t_read_data3 := mem_array[addr3]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 79
    // mem_array[addr3]
    &/ [array_obj_ref_193_index_0_resize] (addr3_186) (R_addr3_192_resized) $guard ( read_write_bar_168_delayed_1_0_189 ) 
    $flowthrough 
    &/ [array_obj_ref_193_index_0_rename] (R_addr3_192_resized) (R_addr3_192_scaled) $guard ( read_write_bar_168_delayed_1_0_189 ) 
    $flowthrough 
    &/ [array_obj_ref_193_index_offset] (R_addr3_192_scaled) (array_obj_ref_193_final_offset) $guard ( read_write_bar_168_delayed_1_0_189 ) 
    $flowthrough 
    &/ [array_obj_ref_193_root_address_inst] (array_obj_ref_193_final_offset) (array_obj_ref_193_root_address) $guard ( read_write_bar_168_delayed_1_0_189 ) 
    $flowthrough 
    &/ [array_obj_ref_193_addr_0] (array_obj_ref_193_root_address) (array_obj_ref_193_word_address_0) $guard ( read_write_bar_168_delayed_1_0_189 ) 
    $flowthrough 
    $load [array_obj_ref_193_load_0] $from memory_space_5 (array_obj_ref_193_word_address_0) (array_obj_ref_193_data_0) $guard ( read_write_bar_168_delayed_1_0_189 ) 
    $delay array_obj_ref_193_load_0 5
    &/ [array_obj_ref_193_gather_scatter] (array_obj_ref_193_data_0) (t_read_data3_194) $guard ( read_write_bar_168_delayed_1_0_189 ) 
    $flowthrough 
    // 	read_write_bar_173_delayed_6_0 := read_write_bar $buffering 6// bits of buffering = 6. 
    //  file prog.linked.opt.aa, line 80
    # := [W_read_write_bar_173_delayed_6_0_195_inst] (read_write_bar) (read_write_bar_173_delayed_6_0_197)   
    $buffering  $out W_read_write_bar_173_delayed_6_0_195_inst read_write_bar_173_delayed_6_0_197 6
    // 	t_read_data0_179_delayed_1_0 := t_read_data0// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 81
    # := [W_t_read_data0_179_delayed_1_0_198_inst] (t_read_data0_152) (t_read_data0_179_delayed_1_0_200)   
    // 	$guard (read_write_bar_173_delayed_6_0) t_read_datal := ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_179_delayed_1_0))// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 82
    // (t_read_data3 && t_read_data2)
    &&[CONCAT_u16_u32_205_inst] (t_read_data3_194 t_read_data2_180) (CONCAT_u16_u32_205_wire) $guard ( read_write_bar_173_delayed_6_0_197 )   $flowthrough 
    $delay CONCAT_u16_u32_205_inst 0
    // (t_read_data1 && t_read_data0_179_delayed_1_0)
    &&[CONCAT_u16_u32_208_inst] (t_read_data1_166 t_read_data0_179_delayed_1_0_200) (CONCAT_u16_u32_208_wire) $guard ( read_write_bar_173_delayed_6_0_197 )   $flowthrough 
    $delay CONCAT_u16_u32_208_inst 0
    // ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_179_delayed_1_0))
    &&[CONCAT_u32_u64_209_inst] (CONCAT_u16_u32_205_wire CONCAT_u16_u32_208_wire) (t_read_datal_210) $guard ( read_write_bar_173_delayed_6_0_197 )   
    $buffering  $out CONCAT_u32_u64_209_inst t_read_datal_210 1
    $delay CONCAT_u32_u64_209_inst 1
    // 	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 83
    // mem_array[addr]
    &/ [array_obj_ref_213_index_0_resize] (addr) (R_addr_212_resized) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_213_index_0_rename] (R_addr_212_resized) (R_addr_212_scaled) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_213_index_offset] (R_addr_212_scaled) (array_obj_ref_213_final_offset) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_213_root_address_inst] (array_obj_ref_213_final_offset) (array_obj_ref_213_root_address) $guard ( ~ read_write_bar ) 
    $flowthrough 
    &/ [array_obj_ref_213_addr_0] (array_obj_ref_213_root_address) (array_obj_ref_213_word_address_0) $guard ( ~ read_write_bar ) 
    $flowthrough 
    $store [array_obj_ref_213_store_0] $to memory_space_5 (array_obj_ref_213_word_address_0 array_obj_ref_213_data_0) $guard ( ~ read_write_bar ) 
    $delay array_obj_ref_213_store_0 5
    &/ [array_obj_ref_213_gather_scatter] (write_data) (array_obj_ref_213_data_0) $guard ( ~ read_write_bar ) 
    $flowthrough 
    // 	read_write_bar_189_delayed_7_0 := read_write_bar $buffering 7// bits of buffering = 7. 
    //  file prog.linked.opt.aa, line 84
    # := [W_read_write_bar_189_delayed_7_0_216_inst] (read_write_bar) (read_write_bar_189_delayed_7_0_218)   
    $buffering  $out W_read_write_bar_189_delayed_7_0_216_inst read_write_bar_189_delayed_7_0_218 7
    // 	read_datal := ( $mux read_write_bar_189_delayed_7_0 t_read_datal  0  ) // bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 85
    // ( $mux read_write_bar_189_delayed_7_0 t_read_datal  0  ) 
    ? [MUX_223_inst] (read_write_bar_189_delayed_7_0_218 t_read_datal_210 konst_222_wire_constant) (read_datal) 
    $buffering  $out MUX_223_inst read_datal 1
  }
  // end data-path
  // 	$guard (read_write_bar) t_read_data0 := mem_array[addr]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 70
  // mem_array[addr]
  // addr
  array_obj_ref_151_index_0_resize <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_index_resize_0/index_resize_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_index_resize_0/index_resize_ack)
  array_obj_ref_151_index_0_rename <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_index_scale_0/scale_rename_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_index_scale_0/scale_rename_ack)
  array_obj_ref_151_index_offset <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_final_index_sum_regn/req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_final_index_sum_regn/ack)
  array_obj_ref_151_root_address_inst <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_base_plus_offset/sum_rename_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_base_plus_offset/sum_rename_ack)
  array_obj_ref_151_addr_0 <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_word_addrgen/root_register_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_word_addrgen/root_register_ack)
  array_obj_ref_151_gather_scatter <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_Update/array_obj_ref_151_Merge/merge_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_Update/array_obj_ref_151_Merge/merge_ack)
  array_obj_ref_151_load_0 <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_Sample/word_access_start/word_0/rr assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_Update/word_access_complete/word_0/cr) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_Sample/word_access_start/word_0/ra assign_stmt_152_to_assign_stmt_224/array_obj_ref_151_Update/word_access_complete/word_0/ca)
  // 	$guard (read_write_bar) addr1 := (addr + 32 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 71
  // (addr + 32 )
  // addr
  ADD_u12_u12_157_inst <=> (assign_stmt_152_to_assign_stmt_224/ADD_u12_u12_157_Sample/rr assign_stmt_152_to_assign_stmt_224/ADD_u12_u12_157_Update/cr) (assign_stmt_152_to_assign_stmt_224/ADD_u12_u12_157_Sample/ra assign_stmt_152_to_assign_stmt_224/ADD_u12_u12_157_Update/ca)
  // 	read_write_bar_146_delayed_1_0 := read_write_bar// bits of buffering = 1. 
  //  file prog.linked.opt.aa, line 72
  // read_write_bar
  W_read_write_bar_146_delayed_1_0_159_inst <=> (assign_stmt_152_to_assign_stmt_224/assign_stmt_161_Sample/req assign_stmt_152_to_assign_stmt_224/assign_stmt_161_Update/req) (assign_stmt_152_to_assign_stmt_224/assign_stmt_161_Sample/ack assign_stmt_152_to_assign_stmt_224/assign_stmt_161_Update/ack)
  // 	$guard (read_write_bar_146_delayed_1_0) t_read_data1 := mem_array[addr1]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 73
  // mem_array[addr1]
  // addr1
  array_obj_ref_165_index_0_resize <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_index_resize_0/index_resize_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_index_resize_0/index_resize_ack)
  array_obj_ref_165_index_0_rename <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_index_scale_0/scale_rename_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_index_scale_0/scale_rename_ack)
  array_obj_ref_165_index_offset <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_final_index_sum_regn/req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_final_index_sum_regn/ack)
  array_obj_ref_165_root_address_inst <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_base_plus_offset/sum_rename_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_base_plus_offset/sum_rename_ack)
  array_obj_ref_165_addr_0 <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_word_addrgen/root_register_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_word_addrgen/root_register_ack)
  array_obj_ref_165_gather_scatter <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_Update/array_obj_ref_165_Merge/merge_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_Update/array_obj_ref_165_Merge/merge_ack)
  array_obj_ref_165_load_0 <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_Sample/word_access_start/word_0/rr assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_Update/word_access_complete/word_0/cr) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_Sample/word_access_start/word_0/ra assign_stmt_152_to_assign_stmt_224/array_obj_ref_165_Update/word_access_complete/word_0/ca)
  // 	$guard (read_write_bar) addr2 := (addr + 64 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 74
  // (addr + 64 )
  // addr
  ADD_u12_u12_171_inst <=> (assign_stmt_152_to_assign_stmt_224/ADD_u12_u12_171_Sample/rr assign_stmt_152_to_assign_stmt_224/ADD_u12_u12_171_Update/cr) (assign_stmt_152_to_assign_stmt_224/ADD_u12_u12_171_Sample/ra assign_stmt_152_to_assign_stmt_224/ADD_u12_u12_171_Update/ca)
  // 	read_write_bar_157_delayed_1_0 := read_write_bar// bits of buffering = 1. 
  //  file prog.linked.opt.aa, line 75
  // read_write_bar
  W_read_write_bar_157_delayed_1_0_173_inst <=> (assign_stmt_152_to_assign_stmt_224/assign_stmt_175_Sample/req assign_stmt_152_to_assign_stmt_224/assign_stmt_175_Update/req) (assign_stmt_152_to_assign_stmt_224/assign_stmt_175_Sample/ack assign_stmt_152_to_assign_stmt_224/assign_stmt_175_Update/ack)
  // 	$guard (read_write_bar_157_delayed_1_0) t_read_data2 := mem_array[addr2]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 76
  // mem_array[addr2]
  // addr2
  array_obj_ref_179_index_0_resize <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_index_resize_0/index_resize_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_index_resize_0/index_resize_ack)
  array_obj_ref_179_index_0_rename <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_index_scale_0/scale_rename_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_index_scale_0/scale_rename_ack)
  array_obj_ref_179_index_offset <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_final_index_sum_regn/req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_final_index_sum_regn/ack)
  array_obj_ref_179_root_address_inst <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_base_plus_offset/sum_rename_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_base_plus_offset/sum_rename_ack)
  array_obj_ref_179_addr_0 <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_word_addrgen/root_register_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_word_addrgen/root_register_ack)
  array_obj_ref_179_gather_scatter <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_Update/array_obj_ref_179_Merge/merge_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_Update/array_obj_ref_179_Merge/merge_ack)
  array_obj_ref_179_load_0 <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_Sample/word_access_start/word_0/rr assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_Update/word_access_complete/word_0/cr) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_Sample/word_access_start/word_0/ra assign_stmt_152_to_assign_stmt_224/array_obj_ref_179_Update/word_access_complete/word_0/ca)
  // 	$guard (read_write_bar) addr3 := (addr + 96 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 77
  // (addr + 96 )
  // addr
  ADD_u12_u12_185_inst <=> (assign_stmt_152_to_assign_stmt_224/ADD_u12_u12_185_Sample/rr assign_stmt_152_to_assign_stmt_224/ADD_u12_u12_185_Update/cr) (assign_stmt_152_to_assign_stmt_224/ADD_u12_u12_185_Sample/ra assign_stmt_152_to_assign_stmt_224/ADD_u12_u12_185_Update/ca)
  // 	read_write_bar_168_delayed_1_0 := read_write_bar// bits of buffering = 1. 
  //  file prog.linked.opt.aa, line 78
  // read_write_bar
  W_read_write_bar_168_delayed_1_0_187_inst <=> (assign_stmt_152_to_assign_stmt_224/assign_stmt_189_Sample/req assign_stmt_152_to_assign_stmt_224/assign_stmt_189_Update/req) (assign_stmt_152_to_assign_stmt_224/assign_stmt_189_Sample/ack assign_stmt_152_to_assign_stmt_224/assign_stmt_189_Update/ack)
  // 	$guard (read_write_bar_168_delayed_1_0) t_read_data3 := mem_array[addr3]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 79
  // mem_array[addr3]
  // addr3
  array_obj_ref_193_index_0_resize <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_index_resize_0/index_resize_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_index_resize_0/index_resize_ack)
  array_obj_ref_193_index_0_rename <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_index_scale_0/scale_rename_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_index_scale_0/scale_rename_ack)
  array_obj_ref_193_index_offset <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_final_index_sum_regn/req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_final_index_sum_regn/ack)
  array_obj_ref_193_root_address_inst <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_base_plus_offset/sum_rename_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_base_plus_offset/sum_rename_ack)
  array_obj_ref_193_addr_0 <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_word_addrgen/root_register_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_word_addrgen/root_register_ack)
  array_obj_ref_193_gather_scatter <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_Update/array_obj_ref_193_Merge/merge_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_Update/array_obj_ref_193_Merge/merge_ack)
  array_obj_ref_193_load_0 <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_Sample/word_access_start/word_0/rr assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_Update/word_access_complete/word_0/cr) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_Sample/word_access_start/word_0/ra assign_stmt_152_to_assign_stmt_224/array_obj_ref_193_Update/word_access_complete/word_0/ca)
  // 	read_write_bar_173_delayed_6_0 := read_write_bar $buffering 6// bits of buffering = 6. 
  //  file prog.linked.opt.aa, line 80
  // read_write_bar
  W_read_write_bar_173_delayed_6_0_195_inst <=> (assign_stmt_152_to_assign_stmt_224/assign_stmt_197_Sample/req assign_stmt_152_to_assign_stmt_224/assign_stmt_197_Update/req) (assign_stmt_152_to_assign_stmt_224/assign_stmt_197_Sample/ack assign_stmt_152_to_assign_stmt_224/assign_stmt_197_Update/ack)
  // 	t_read_data0_179_delayed_1_0 := t_read_data0// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 81
  // t_read_data0
  W_t_read_data0_179_delayed_1_0_198_inst <=> (assign_stmt_152_to_assign_stmt_224/assign_stmt_200_Sample/req assign_stmt_152_to_assign_stmt_224/assign_stmt_200_Update/req) (assign_stmt_152_to_assign_stmt_224/assign_stmt_200_Sample/ack assign_stmt_152_to_assign_stmt_224/assign_stmt_200_Update/ack)
  // 	$guard (read_write_bar_173_delayed_6_0) t_read_datal := ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_179_delayed_1_0))// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 82
  // ((t_read_data3 && t_read_data2) && (t_read_data1 && t_read_data0_179_delayed_1_0))
  // (t_read_data3 && t_read_data2)
  // t_read_data3
  // t_read_data2
  // (t_read_data1 && t_read_data0_179_delayed_1_0)
  // t_read_data1
  // t_read_data0_179_delayed_1_0
  CONCAT_u32_u64_209_inst <=> (assign_stmt_152_to_assign_stmt_224/CONCAT_u32_u64_209_Sample/rr assign_stmt_152_to_assign_stmt_224/CONCAT_u32_u64_209_Update/cr) (assign_stmt_152_to_assign_stmt_224/CONCAT_u32_u64_209_Sample/ra assign_stmt_152_to_assign_stmt_224/CONCAT_u32_u64_209_Update/ca)
  // 	$guard (~read_write_bar) mem_array[addr] := write_data// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 83
  // write_data
  // addr
  array_obj_ref_213_index_0_resize <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_index_resize_0/index_resize_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_index_resize_0/index_resize_ack)
  array_obj_ref_213_index_0_rename <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_index_scale_0/scale_rename_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_index_scale_0/scale_rename_ack)
  array_obj_ref_213_index_offset <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_final_index_sum_regn/req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_final_index_sum_regn/ack)
  array_obj_ref_213_root_address_inst <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_base_plus_offset/sum_rename_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_base_plus_offset/sum_rename_ack)
  array_obj_ref_213_addr_0 <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_word_addrgen/root_register_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_word_addrgen/root_register_ack)
  array_obj_ref_213_gather_scatter <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_Sample/array_obj_ref_213_Split/split_req) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_Sample/array_obj_ref_213_Split/split_ack)
  array_obj_ref_213_store_0 <=> (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_Sample/word_access_start/word_0/rr assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_Update/word_access_complete/word_0/cr) (assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_Sample/word_access_start/word_0/ra assign_stmt_152_to_assign_stmt_224/array_obj_ref_213_Update/word_access_complete/word_0/ca)
  // 	read_write_bar_189_delayed_7_0 := read_write_bar $buffering 7// bits of buffering = 7. 
  //  file prog.linked.opt.aa, line 84
  // read_write_bar
  W_read_write_bar_189_delayed_7_0_216_inst <=> (assign_stmt_152_to_assign_stmt_224/assign_stmt_218_Sample/req assign_stmt_152_to_assign_stmt_224/assign_stmt_218_Update/req) (assign_stmt_152_to_assign_stmt_224/assign_stmt_218_Sample/ack assign_stmt_152_to_assign_stmt_224/assign_stmt_218_Update/ack)
  // 	read_datal := ( $mux read_write_bar_189_delayed_7_0 t_read_datal  0  ) // bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 85
  // read_write_bar_189_delayed_7_0
  // t_read_datal
  // ( $mux read_write_bar_189_delayed_7_0 t_read_datal  0  ) 
  MUX_223_inst <=> (assign_stmt_152_to_assign_stmt_224/MUX_223_start/req assign_stmt_152_to_assign_stmt_224/MUX_223_complete/req) (assign_stmt_152_to_assign_stmt_224/MUX_223_start/ack assign_stmt_152_to_assign_stmt_224/MUX_223_complete/ack)
  $attribute delay => "10"
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file prog.linked.opt.aa, line 88
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file prog.linked.opt.aa, line 88
  }
  // end data-path
}
$module [initial] 
{
  // pipe-declarations for block %initial
  //  file prog.linked.opt.aa, line 95
  // pipe-declarations for block %initial%init1
  //  file prog.linked.opt.aa, line 101
  // pipe-declarations for block %initial%init1%
  //  file prog.linked.opt.aa, line 103
  // pipe-declarations for block %initial%init1%init2
  //  file prog.linked.opt.aa, line 108
  // pipe-declarations for block %initial%init3
  //  file prog.linked.opt.aa, line 130
  // memory-space 1 is written into.
  // memory-space 1 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_232] 
    {
      // start:  	ZJ := 0 // bits of buffering = 12. 
      //  file prog.linked.opt.aa, line 100
      // Target expression
      // (as target) ZJ
      $T[STORE_ZJ_230_sample_start_] 
      $T[STORE_ZJ_230_sample_completed_] 
      $T[STORE_ZJ_230_update_start_] 
      $T[STORE_ZJ_230_update_completed_] 
      // ZJ
      $T[STORE_ZJ_230_word_address_calculated] 
      $T[STORE_ZJ_230_root_address_calculated] 
      STORE_ZJ_230_word_address_calculated <-& (STORE_ZJ_230_root_address_calculated)
      ;;[STORE_ZJ_230_Sample] 
      {
        ;;[STORE_ZJ_230_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_ZJ_230_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_ZJ_230_sample_start_ <-& (STORE_ZJ_230_word_address_calculated)
      STORE_ZJ_230_sample_start_ &-> (STORE_ZJ_230_Sample)
      STORE_ZJ_230_sample_completed_ <-& (STORE_ZJ_230_Sample)
      STORE_ZJ_230_sample_completed_ &-> ($null)
      STORE_ZJ_230_update_start_ &-> (STORE_ZJ_230_Update)
      STORE_ZJ_230_update_completed_ <-& (STORE_ZJ_230_Update)
      // end:  	ZJ := 0 // bits of buffering = 12. 
      // load-store dependencies..
      // memory-space  memory_space_1
      //  STORE_ZJ_230 store
    }
    <>[branch_block_stmt_233] // Branch Block  file prog.linked.opt.aa, line 101
    {
      $P [branch_block_stmt_233__entry__]
      branch_block_stmt_233__entry__ <-| ($entry)
      $P [branch_block_stmt_233__exit__]
      branch_block_stmt_233__exit__ |-> ($exit)
      $P [merge_stmt_234__entry__] 
      $P [merge_stmt_234__exit__] 
      $P [assign_stmt_245__entry__] 
      $P [assign_stmt_245__exit__] 
      $P [branch_block_stmt_246__entry__] 
      $P [branch_block_stmt_246__exit__] 
      $P [assign_stmt_290__entry__] 
      $P [assign_stmt_290__exit__] 
      $P [if_stmt_291__entry__] 
      $P [if_stmt_291__exit__] 
      ::[assign_stmt_245] 
      {
        // start:  		ZJ := (Y * 128 )// bits of buffering = 12. 
        //  file prog.linked.opt.aa, line 107
        // Source expression
        // (Y * 128 )
        $T[MUL_u12_u12_244_sample_start_] 
        $T[MUL_u12_u12_244_sample_completed_] 
        $T[MUL_u12_u12_244_update_start_] 
        $T[MUL_u12_u12_244_update_completed_] 
        // Y
        // start: Forward dependencies from Y to transition MUL_u12_u12_244_sample_start_
        // done: Forward dependencies from Y to transition MUL_u12_u12_244_sample_start_
        ;;[MUL_u12_u12_244_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[MUL_u12_u12_244_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        MUL_u12_u12_244_sample_start_ &-> (MUL_u12_u12_244_Sample)
        MUL_u12_u12_244_sample_completed_ <-& (MUL_u12_u12_244_Sample)
        MUL_u12_u12_244_sample_completed_ &-> ($null)
        MUL_u12_u12_244_update_start_ &-> (MUL_u12_u12_244_Update)
        MUL_u12_u12_244_update_completed_ <-& (MUL_u12_u12_244_Update)
        // Target expression
        // (as target) ZJ
        $T[STORE_ZJ_241_sample_start_] 
        $T[STORE_ZJ_241_sample_completed_] 
        $T[STORE_ZJ_241_update_start_] 
        $T[STORE_ZJ_241_update_completed_] 
        // ZJ
        $T[STORE_ZJ_241_word_address_calculated] 
        $T[STORE_ZJ_241_root_address_calculated] 
        STORE_ZJ_241_word_address_calculated <-& (STORE_ZJ_241_root_address_calculated)
        ;;[STORE_ZJ_241_Sample] 
        {
          ;;[STORE_ZJ_241_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_ZJ_241_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_ZJ_241_sample_start_ <-& (STORE_ZJ_241_word_address_calculated)
        STORE_ZJ_241_sample_start_ &-> (STORE_ZJ_241_Sample)
        STORE_ZJ_241_sample_completed_ <-& (STORE_ZJ_241_Sample)
        STORE_ZJ_241_sample_completed_ &-> ($null)
        STORE_ZJ_241_update_start_ &-> (STORE_ZJ_241_Update)
        STORE_ZJ_241_update_completed_ <-& (STORE_ZJ_241_Update)
        // start: Forward dependencies from (Y * 128 ) to transition STORE_ZJ_241_sample_start_
        STORE_ZJ_241_sample_start_ <-& (MUL_u12_u12_244_update_completed_)
        // done: Forward dependencies from (Y * 128 ) to transition STORE_ZJ_241_sample_start_
        // end:  		ZJ := (Y * 128 )// bits of buffering = 12. 
        // load-store dependencies..
        // memory-space  memory_space_1
        //  STORE_ZJ_241 store
      }
      assign_stmt_245__entry__ |-> (assign_stmt_245)
      assign_stmt_245__exit__ <-| (assign_stmt_245)
      <>[branch_block_stmt_246] // Branch Block  file prog.linked.opt.aa, line 108
      {
        $P [branch_block_stmt_246__entry__]
        branch_block_stmt_246__entry__ <-| ($entry)
        $P [branch_block_stmt_246__exit__]
        branch_block_stmt_246__exit__ |-> ($exit)
        $P [do_while_stmt_247__entry__] 
        $P [do_while_stmt_247__exit__] 
        // do-while-statement  
        //  file prog.linked.opt.aa, line 110
        <o> [do_while_stmt_247]  $depth 7 $buffering 2 
        {
          $P[do_while_stmt_247__entry__] 
          $P[do_while_stmt_247__exit__] 
          $P[loop_back] 
          $P[condition_done] 
          $P[loop_body_done] 
          $pipeline [do_while_stmt_247_loop_body] 
          {
            // Pipelined!
            $T[back_edge_to_loop_body] 
            $T[first_time_through_loop_body] 
            $T[loop_body_start] 
            $T[condition_evaluated] 
            $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
            $entry <-& (loop_body_start)
            $T[aggregated_phi_sample_req] 
            $T[aggregated_phi_sample_ack] 
            $T[aggregated_phi_update_req] 
            $T[aggregated_phi_update_ack] 
            // do not loop-back unless all phi's have used up their triggering tokens.
            condition_evaluated <-& (aggregated_phi_update_ack)
            aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
            // start:  PHI statement phi_stmt_249
            // 				$phi I := 				  ($bitcast ($uint<12>) 0  ) $on   $entry 				  NI $on   $loopback 
            // type of target is $uint<12>
            $T[phi_stmt_249_sample_start_] 
            $T[phi_stmt_249_sample_completed_] 
            $T[phi_stmt_249_update_start_] 
            $T[phi_stmt_249_update_completed_] 
            $T[phi_stmt_249_sample_start__ps] 
            phi_stmt_249_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_249_sample_completed__ps] 
            phi_stmt_249_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_249_update_start__ps] 
            phi_stmt_249_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_249_update_completed__ps] 
            phi_stmt_249_update_completed_ <-& (phi_stmt_249_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_249_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_249_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_249_update_start_)
            $T[phi_stmt_249_loopback_trigger] 
            phi_stmt_249_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_249_loopback_sample_req] 
            $T[phi_stmt_249_loopback_sample_req_ps] 
            phi_stmt_249_loopback_sample_req <-& (phi_stmt_249_loopback_sample_req_ps)
            phi_stmt_249_loopback_sample_req &-> ($null)
            $T[phi_stmt_249_entry_trigger] 
            phi_stmt_249_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_249_entry_sample_req] 
            $T[phi_stmt_249_entry_sample_req_ps] 
            phi_stmt_249_entry_sample_req <-& (phi_stmt_249_entry_sample_req_ps)
            phi_stmt_249_entry_sample_req &-> ($null)
            phi_stmt_249_update_start_ o<-& (phi_stmt_249_update_completed_ 0)
            phi_stmt_249_sample_start_ o<-& (phi_stmt_249_sample_completed_ 1)
            $T[phi_stmt_249_merged_reqs] 
            $T[phi_stmt_249_phi_mux_ack] 
            $T[phi_stmt_249_phi_mux_ack_ps] 
            phi_stmt_249_phi_mux_ack_ps <-& (phi_stmt_249_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_249_update_completed_)
            $T[type_cast_252_sample_start__ps] 
            $T[type_cast_252_sample_completed__ps] 
            $T[type_cast_252_update_start__ps] 
            $T[type_cast_252_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_252_sample_start_] 
            $T[type_cast_252_sample_completed_] 
            type_cast_252_sample_completed_ <-& (type_cast_252_sample_start_)
            $T[type_cast_252_update_start_] 
            $T [type_cast_252_update_completed_] $delay 
            type_cast_252_update_completed_ <-& (type_cast_252_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_252_sample_start_ <-& (type_cast_252_sample_start__ps)
            type_cast_252_update_start_ <-& (type_cast_252_update_start__ps)
            // Phi complete dependency.
            type_cast_252_sample_completed__ps <-& (type_cast_252_sample_completed_)
            type_cast_252_update_completed__ps <-& (type_cast_252_update_completed_)
            $T[R_NI_253_sample_start__ps] 
            $T[R_NI_253_sample_completed__ps] 
            $T[R_NI_253_update_start__ps] 
            $T[R_NI_253_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_NI_253_sample_start_] 
            $T[R_NI_253_sample_completed_] 
            $T[R_NI_253_update_start_] 
            $T[R_NI_253_update_completed_] 
            ;;[R_NI_253_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_NI_253_sample_start_ &-> (R_NI_253_Sample)
            R_NI_253_sample_completed_ <-& (R_NI_253_Sample)
            ;;[R_NI_253_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_NI_253_update_start_ &-> (R_NI_253_Update)
            R_NI_253_update_completed_ <-& (R_NI_253_Update)
            // RAW reenables for NI
            // Phi start dependency for implicit/constant alternative.
            R_NI_253_sample_start_ <-& (R_NI_253_sample_start__ps)
            R_NI_253_update_start_ <-& (R_NI_253_update_start__ps)
            // Phi complete dependency.
            R_NI_253_sample_completed__ps <-& (R_NI_253_sample_completed_)
            R_NI_253_update_completed__ps <-& (R_NI_253_update_completed_)
            $phisequencer [ phi_stmt_249_phi_seq] : 
            phi_stmt_249_entry_trigger type_cast_252_sample_start__ps type_cast_252_sample_completed__ps type_cast_252_update_start__ps type_cast_252_update_completed__ps phi_stmt_249_loopback_trigger R_NI_253_sample_start__ps R_NI_253_sample_completed__ps R_NI_253_update_start__ps R_NI_253_update_completed__ps :
            phi_stmt_249_sample_start__ps phi_stmt_249_sample_completed__ps phi_stmt_249_update_start__ps phi_stmt_249_update_completed__ps :
            phi_stmt_249_entry_sample_req_ps phi_stmt_249_loopback_sample_req_ps : 
            phi_stmt_249_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_249
            // start:  				wdata := ($cast ($uint<16>) I )// bits of buffering = 16. 
            //  file prog.linked.opt.aa, line 116
            // Source expression
            // ($cast ($uint<16>) I )
            $T[type_cast_257_sample_start_] 
            $T[type_cast_257_sample_completed_] 
            $T[type_cast_257_update_start_] 
            $T[type_cast_257_update_completed_] 
            // I
            // start: Forward dependencies from I to transition type_cast_257_sample_start_
            type_cast_257_sample_start_ <-& (phi_stmt_249_update_completed_)
            // done: Forward dependencies from I to transition type_cast_257_sample_start_
            ;;[type_cast_257_Sample] 
            {
              // unary expression 
              $T [rr] $T [ra] // (split) unary operation
            }
            ;;[type_cast_257_Update] 
            {
              // unary expression 
              $T [cr] $T [ca] //(split) unary operation
            }
            type_cast_257_sample_start_ &-> (type_cast_257_Sample)
            type_cast_257_sample_completed_ <-& (type_cast_257_Sample)
            type_cast_257_sample_completed_ &-> ($null)
            type_cast_257_update_start_ &-> (type_cast_257_Update)
            type_cast_257_update_completed_ <-& (type_cast_257_Update)
            // RAW reenables for I
            phi_stmt_249_update_start_ o<-& (type_cast_257_sample_completed_ 0)
            // self-release: 
            type_cast_257_sample_start_ o<-& (type_cast_257_sample_completed_ 1)
            $null &-> (type_cast_257_update_start_)
            type_cast_257_update_start_ o<-& (type_cast_257_update_completed_ 0)
            // Target expression
            // (as target) wdata
            // start: WAR dependencies for wdata
            // done: WAR dependencies for wdata
            // end:  				wdata := ($cast ($uint<16>) I )// bits of buffering = 16. 
            // start:  				I_230_delayed_4_0 := I $buffering 4// bits of buffering = 48. 
            //  file prog.linked.opt.aa, line 117
            $T[assign_stmt_261_sample_start_] 
            $T[assign_stmt_261_sample_completed_] 
            $T[assign_stmt_261_update_start_] 
            $T[assign_stmt_261_update_completed_] 
            // Source expression
            // I
            // Target expression
            // (as target) I_230_delayed_4_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_261_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_261_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_261_sample_start_ &-> (assign_stmt_261_Sample)
            assign_stmt_261_sample_completed_ <-& (assign_stmt_261_Sample)
            assign_stmt_261_sample_completed_ &-> ($null)
            assign_stmt_261_update_start_ &-> (assign_stmt_261_Update)
            assign_stmt_261_update_completed_ <-& (assign_stmt_261_Update)
            // start: Forward dependencies from I to transition assign_stmt_261_sample_start_
            assign_stmt_261_sample_start_ <-& (phi_stmt_249_update_completed_)
            // done: Forward dependencies from I to transition assign_stmt_261_sample_start_
            // RAW reenables for I
            phi_stmt_249_update_start_ o<-& (assign_stmt_261_sample_completed_ 0)
            // self-release: 
            assign_stmt_261_sample_start_ o<-& (assign_stmt_261_sample_completed_ 1)
            $null &-> (assign_stmt_261_update_start_)
            assign_stmt_261_update_start_ o<-& (assign_stmt_261_update_completed_ 0)
            // start: WAR dependencies for I_230_delayed_4_0
            // done: WAR dependencies for I_230_delayed_4_0
            // end:  				I_230_delayed_4_0 := I $buffering 4// bits of buffering = 48. 
            // start:  				addr := ($cast ($uint<12>) (ZJ + I_230_delayed_4_0) )// bits of buffering = 12. 
            //  file prog.linked.opt.aa, line 118
            // Source expression
            // ($cast ($uint<12>) (ZJ + I_230_delayed_4_0) )
            $T[type_cast_266_sample_start_] 
            $T[type_cast_266_sample_completed_] 
            $T[type_cast_266_update_start_] 
            $T[type_cast_266_update_completed_] 
            // (ZJ + I_230_delayed_4_0)
            // ZJ
            $T[LOAD_ZJ_263_sample_start_] 
            $T[LOAD_ZJ_263_sample_completed_] 
            $T[LOAD_ZJ_263_update_start_] 
            $T[LOAD_ZJ_263_update_completed_] 
            $T[LOAD_ZJ_263_word_address_calculated] 
            $T[LOAD_ZJ_263_root_address_calculated] 
            LOAD_ZJ_263_word_address_calculated <-& (LOAD_ZJ_263_root_address_calculated)
            ;;[LOAD_ZJ_263_Sample] 
            {
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[LOAD_ZJ_263_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
              ;;[LOAD_ZJ_263_Merge] 
              {
                $T [merge_req] $T [merge_ack]
              }
            }
            LOAD_ZJ_263_sample_start_ <-& (LOAD_ZJ_263_word_address_calculated)
            // reenable-joins
            LOAD_ZJ_263_sample_start_ &-> (LOAD_ZJ_263_Sample)
            LOAD_ZJ_263_sample_completed_ <-& (LOAD_ZJ_263_Sample)
            LOAD_ZJ_263_sample_completed_ &-> ($null)
            LOAD_ZJ_263_update_start_ &-> (LOAD_ZJ_263_Update)
            LOAD_ZJ_263_update_completed_ <-& (LOAD_ZJ_263_Update)
            // self-release: 
            LOAD_ZJ_263_sample_start_ o<-& (LOAD_ZJ_263_sample_completed_ 1)
            $null &-> (LOAD_ZJ_263_update_start_)
            LOAD_ZJ_263_update_start_ o<-& (LOAD_ZJ_263_update_completed_ 0)
            // I_230_delayed_4_0
            // start: Forward dependencies from (ZJ + I_230_delayed_4_0) to transition type_cast_266_sample_start_
            type_cast_266_sample_start_ <-& (assign_stmt_261_update_completed_)
            type_cast_266_sample_start_ <-& (LOAD_ZJ_263_update_completed_)
            // done: Forward dependencies from (ZJ + I_230_delayed_4_0) to transition type_cast_266_sample_start_
            ;;[type_cast_266_Sample] 
            {
              // unary expression 
              $T [rr] $T [ra] // (split) unary operation
            }
            ;;[type_cast_266_Update] 
            {
              // unary expression 
              $T [cr] $T [ca] //(split) unary operation
            }
            type_cast_266_sample_start_ &-> (type_cast_266_Sample)
            type_cast_266_sample_completed_ <-& (type_cast_266_Sample)
            type_cast_266_sample_completed_ &-> ($null)
            type_cast_266_update_start_ &-> (type_cast_266_Update)
            type_cast_266_update_completed_ <-& (type_cast_266_Update)
            // RAW reenables for (ZJ + I_230_delayed_4_0)
            assign_stmt_261_update_start_ o<-& (type_cast_266_sample_completed_ 0)
            LOAD_ZJ_263_update_start_ o<-& (type_cast_266_sample_completed_ 0)
            // self-release: 
            type_cast_266_sample_start_ o<-& (type_cast_266_sample_completed_ 1)
            $null &-> (type_cast_266_update_start_)
            type_cast_266_update_start_ o<-& (type_cast_266_update_completed_ 0)
            // Target expression
            // (as target) addr
            // start: WAR dependencies for addr
            // done: WAR dependencies for addr
            // end:  				addr := ($cast ($uint<12>) (ZJ + I_230_delayed_4_0) )// bits of buffering = 12. 
            // start:  				wdata_236_delayed_4_0 := wdata $buffering 4// bits of buffering = 64. 
            //  file prog.linked.opt.aa, line 119
            $T[assign_stmt_270_sample_start_] 
            $T[assign_stmt_270_sample_completed_] 
            $T[assign_stmt_270_update_start_] 
            $T[assign_stmt_270_update_completed_] 
            // Source expression
            // wdata
            // Target expression
            // (as target) wdata_236_delayed_4_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_270_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_270_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_270_sample_start_ &-> (assign_stmt_270_Sample)
            assign_stmt_270_sample_completed_ <-& (assign_stmt_270_Sample)
            assign_stmt_270_sample_completed_ &-> ($null)
            assign_stmt_270_update_start_ &-> (assign_stmt_270_Update)
            assign_stmt_270_update_completed_ <-& (assign_stmt_270_Update)
            // start: Forward dependencies from wdata to transition assign_stmt_270_sample_start_
            assign_stmt_270_sample_start_ <-& (type_cast_257_update_completed_)
            // done: Forward dependencies from wdata to transition assign_stmt_270_sample_start_
            // RAW reenables for wdata
            type_cast_257_update_start_ o<-& (assign_stmt_270_sample_completed_ 0)
            // self-release: 
            assign_stmt_270_sample_start_ o<-& (assign_stmt_270_sample_completed_ 1)
            $null &-> (assign_stmt_270_update_start_)
            assign_stmt_270_update_start_ o<-& (assign_stmt_270_update_completed_ 0)
            // start: WAR dependencies for wdata_236_delayed_4_0
            // done: WAR dependencies for wdata_236_delayed_4_0
            // end:  				wdata_236_delayed_4_0 := wdata $buffering 4// bits of buffering = 64. 
            // start: 				$call accessMem (0  addr wdata_236_delayed_4_0 ) (rdata ) 
            //  file prog.linked.opt.aa, line 120
            $T[call_stmt_275_sample_start_] 
            $T[call_stmt_275_sample_completed_] 
            $T[call_stmt_275_update_start_] 
            $T[call_stmt_275_update_completed_] 
            // Call input argument 0
            // Call input argument 1
            // addr
            // Call input argument 2
            // wdata_236_delayed_4_0
            // start: Forward dependencies from addr to transition call_stmt_275_sample_start_
            call_stmt_275_sample_start_ <-& (type_cast_266_update_completed_)
            // done: Forward dependencies from addr to transition call_stmt_275_sample_start_
            // RAW reenables for addr
            type_cast_266_update_start_ o<-& (call_stmt_275_sample_completed_ 0)
            // start: Forward dependencies from wdata_236_delayed_4_0 to transition call_stmt_275_sample_start_
            call_stmt_275_sample_start_ <-& (assign_stmt_270_update_completed_)
            // done: Forward dependencies from wdata_236_delayed_4_0 to transition call_stmt_275_sample_start_
            // RAW reenables for wdata_236_delayed_4_0
            assign_stmt_270_update_start_ o<-& (call_stmt_275_sample_completed_ 0)
            ;;[call_stmt_275_Sample] 
            {
              $T [crr] $T [cra] 
            }
            ;;[call_stmt_275_Update] 
            {
              $T [ccr] $T [cca] 
            }
            call_stmt_275_sample_start_ &-> (call_stmt_275_Sample)
            call_stmt_275_sample_completed_ <-& (call_stmt_275_Sample)
            call_stmt_275_sample_completed_ &-> ($null)
            call_stmt_275_update_start_ &-> (call_stmt_275_Update)
            call_stmt_275_update_completed_ <-& (call_stmt_275_Update)
            // Call output argument 0
            // (as target) rdata
            // self-release: 
            call_stmt_275_sample_start_ o<-& (call_stmt_275_sample_completed_ 1)
            $null &-> (call_stmt_275_update_start_)
            call_stmt_275_update_start_ o<-& (call_stmt_275_update_completed_ 0)
            // start: WAR dependencies for rdata
            // done: WAR dependencies for rdata
            // end: 				$call accessMem (0  addr wdata_236_delayed_4_0 ) (rdata ) 
            // start:  				NI := (I + 1 )// bits of buffering = 12. 
            //  file prog.linked.opt.aa, line 121
            // Source expression
            // (I + 1 )
            $T[ADD_u12_u12_279_sample_start_] 
            $T[ADD_u12_u12_279_sample_completed_] 
            $T[ADD_u12_u12_279_update_start_] 
            $T[ADD_u12_u12_279_update_completed_] 
            // I
            // start: Forward dependencies from I to transition ADD_u12_u12_279_sample_start_
            ADD_u12_u12_279_sample_start_ <-& (phi_stmt_249_update_completed_)
            // done: Forward dependencies from I to transition ADD_u12_u12_279_sample_start_
            ;;[ADD_u12_u12_279_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[ADD_u12_u12_279_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            ADD_u12_u12_279_sample_start_ &-> (ADD_u12_u12_279_Sample)
            ADD_u12_u12_279_sample_completed_ <-& (ADD_u12_u12_279_Sample)
            ADD_u12_u12_279_sample_completed_ &-> ($null)
            ADD_u12_u12_279_update_start_ &-> (ADD_u12_u12_279_Update)
            ADD_u12_u12_279_update_completed_ <-& (ADD_u12_u12_279_Update)
            // RAW reenables for I
            phi_stmt_249_update_start_ o<-& (ADD_u12_u12_279_sample_completed_ 0)
            // self-release: 
            ADD_u12_u12_279_sample_start_ o<-& (ADD_u12_u12_279_sample_completed_ 1)
            $null &-> (ADD_u12_u12_279_update_start_)
            ADD_u12_u12_279_update_start_ o<-& (ADD_u12_u12_279_update_completed_ 0)
            // Target expression
            // (as target) NI
            // start: WAR dependencies for NI
            // WAR dependency: Read: NI before Write: 				NI := (I + 1 )// bits of buffering = 12. 
            ADD_u12_u12_279_update_start_ <-& (phi_stmt_249_sample_completed_)
            phi_stmt_249_sample_start_ o<-& (ADD_u12_u12_279_update_completed_ 0)
            // WAR dependency: release  Read: NI with Write: 				NI := (I + 1 )// bits of buffering = 12. 
            // done: WAR dependencies for NI
            // end:  				NI := (I + 1 ) $buffering 2// bits of buffering = 24. 
            // (NI < 128 )
            // NI
            $T [loop_body_delay_to_condition_start] $delay
            loop_body_start &-> (loop_body_delay_to_condition_start)
            loop_body_delay_to_condition_start &-> (condition_evaluated)
            // start: Forward dependencies from (NI < 128 ) to transition condition_evaluated
            condition_evaluated <-& (ADD_u12_u12_279_update_completed_)
            // done: Forward dependencies from (NI < 128 ) to transition condition_evaluated
            condition_evaluated &-> ($null)
            // load-store dependencies..
            // memory-space  memory_space_5
            //  call_stmt_275 store
            // reenable across ring for memory space memory_space_5
            // leading and trailing sets are the same... no ring dependency
            // memory-space  memory_space_1
            //  LOAD_ZJ_263 load
            // reenable across ring for memory space memory_space_1
            // leading and trailing sets are the same... no ring dependency
          }
          ( first_time_through_loop_body  back_edge_to_loop_body) 
          ( condition_evaluated )
          ;; [loop_exit] 
          {
            $T [ack] 
          }
          ;; [loop_taken] 
          {
            $T [ack] 
          }
          do_while_stmt_247__entry__ <-| ($entry)
          loop_body_done <-| ( do_while_stmt_247_loop_body ) 
          condition_done |-> (loop_exit loop_taken)
          do_while_stmt_247__exit__ |-> ($exit)
          $bind condition_done <= do_while_stmt_247_loop_body : condition_evaluated
          $bind do_while_stmt_247__entry__  => do_while_stmt_247_loop_body : first_time_through_loop_body 
          $bind loop_back  => do_while_stmt_247_loop_body : back_edge_to_loop_body 
          $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_247__exit__)
        }
        do_while_stmt_247__entry__ |-> (do_while_stmt_247)
        do_while_stmt_247__exit__ <-| (do_while_stmt_247)
        do_while_stmt_247__entry__ <-| (branch_block_stmt_246__entry__)
        do_while_stmt_247__exit__ |-> (branch_block_stmt_246__exit__)
      }
      branch_block_stmt_246__entry__ |-> (branch_block_stmt_246)
      branch_block_stmt_246__exit__ <-| (branch_block_stmt_246)
      ::[assign_stmt_290] 
      {
        // start:  		YI := (Y + 1 )// bits of buffering = 12. 
        //  file prog.linked.opt.aa, line 124
        // Source expression
        // (Y + 1 )
        $T[ADD_u12_u12_289_sample_start_] 
        $T[ADD_u12_u12_289_sample_completed_] 
        $T[ADD_u12_u12_289_update_start_] 
        $T[ADD_u12_u12_289_update_completed_] 
        // Y
        // start: Forward dependencies from Y to transition ADD_u12_u12_289_sample_start_
        // done: Forward dependencies from Y to transition ADD_u12_u12_289_sample_start_
        ;;[ADD_u12_u12_289_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u12_u12_289_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u12_u12_289_sample_start_ &-> (ADD_u12_u12_289_Sample)
        ADD_u12_u12_289_sample_completed_ <-& (ADD_u12_u12_289_Sample)
        ADD_u12_u12_289_sample_completed_ &-> ($null)
        ADD_u12_u12_289_update_start_ &-> (ADD_u12_u12_289_Update)
        ADD_u12_u12_289_update_completed_ <-& (ADD_u12_u12_289_Update)
        // Target expression
        // (as target) YI
        // start: WAR dependencies for YI
        // done: WAR dependencies for YI
        // end:  		YI := (Y + 1 )// bits of buffering = 12. 
        // load-store dependencies..
      }
      assign_stmt_290__entry__ |-> (assign_stmt_290)
      assign_stmt_290__exit__ <-| (assign_stmt_290)
      // if-statement  
      //  file prog.linked.opt.aa, line 0
      ;;[if_stmt_291_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_291__entry__ |-> (if_stmt_291_dead_link)
      if_stmt_291__exit__ <-| (if_stmt_291_dead_link)
      ;;[if_stmt_291_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (YI < 8 )
        ;;[ULT_u12_u1_294] 
        {
          // binary expression 
          ||[ULT_u12_u1_294_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_291__entry__ |-> (if_stmt_291_eval_test)
      $P [ULT_u12_u1_294_place]
      ULT_u12_u1_294_place <-| (if_stmt_291_eval_test)
      ;;[if_stmt_291_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_291_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u12_u1_294_place |-> (if_stmt_291_if_link if_stmt_291_else_link)
      $P [loopback]
      loopback <-| (if_stmt_291_if_link)
      if_stmt_291__exit__ <-| (if_stmt_291_else_link)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 103
      ;;[merge_stmt_234_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_234__entry__ |-> (merge_stmt_234_dead_link)
      merge_stmt_234__exit__ <-| (merge_stmt_234_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 103  --------------------------
      ||[merge_stmt_234__entry___PhiReq] 
      {
        ;;[phi_stmt_235] 
        {
          ||[phi_stmt_235_sources] 
          {
            // sources for 			$phi Y := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  YI $on   loopback 
            // type of target is $uint<12>
            // constant source .... delay transition 
            $T [type_cast_238_konst_delay_trans] $delay
          }
          $T [phi_stmt_235_req] 
        }
      }
      merge_stmt_234__entry__ |-> (merge_stmt_234__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_235] 
        {
          ||[phi_stmt_235_sources] 
          {
            // sources for 			$phi Y := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  YI $on   loopback 
            // type of target is $uint<12>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_235_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_234_PhiReqMerge] 
      merge_stmt_234_PhiReqMerge <-| ( merge_stmt_234__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_234_PhiAck] 
      {
        $T [phi_stmt_235_ack] 
      }
      merge_stmt_234_PhiReqMerge |-> (merge_stmt_234_PhiAck)
      merge_stmt_234__exit__  <-| (merge_stmt_234_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 103  --------------------------
      merge_stmt_234__entry__ <-| (branch_block_stmt_233__entry__)
      assign_stmt_245__entry__ <-| (merge_stmt_234__exit__)
      branch_block_stmt_246__entry__ <-| (assign_stmt_245__exit__)
      assign_stmt_290__entry__ <-| (branch_block_stmt_246__exit__)
      if_stmt_291__entry__ <-| (assign_stmt_290__exit__)
      if_stmt_291__exit__ |-> (branch_block_stmt_233__exit__)
    }
    ::[assign_stmt_300] 
    {
      // start:  	ZJ := 1024 // bits of buffering = 12. 
      //  file prog.linked.opt.aa, line 129
      // Target expression
      // (as target) ZJ
      $T[STORE_ZJ_298_sample_start_] 
      $T[STORE_ZJ_298_sample_completed_] 
      $T[STORE_ZJ_298_update_start_] 
      $T[STORE_ZJ_298_update_completed_] 
      // ZJ
      $T[STORE_ZJ_298_word_address_calculated] 
      $T[STORE_ZJ_298_root_address_calculated] 
      STORE_ZJ_298_word_address_calculated <-& (STORE_ZJ_298_root_address_calculated)
      ;;[STORE_ZJ_298_Sample] 
      {
        ;;[STORE_ZJ_298_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_ZJ_298_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_ZJ_298_sample_start_ <-& (STORE_ZJ_298_word_address_calculated)
      STORE_ZJ_298_sample_start_ &-> (STORE_ZJ_298_Sample)
      STORE_ZJ_298_sample_completed_ <-& (STORE_ZJ_298_Sample)
      STORE_ZJ_298_sample_completed_ &-> ($null)
      STORE_ZJ_298_update_start_ &-> (STORE_ZJ_298_Update)
      STORE_ZJ_298_update_completed_ <-& (STORE_ZJ_298_Update)
      // end:  	ZJ := 1024 // bits of buffering = 12. 
      // load-store dependencies..
      // memory-space  memory_space_1
      //  STORE_ZJ_298 store
    }
    <>[branch_block_stmt_301] // Branch Block  file prog.linked.opt.aa, line 130
    {
      $P [branch_block_stmt_301__entry__]
      branch_block_stmt_301__entry__ <-| ($entry)
      $P [branch_block_stmt_301__exit__]
      branch_block_stmt_301__exit__ |-> ($exit)
      $P [do_while_stmt_302__entry__] 
      $P [do_while_stmt_302__exit__] 
      // do-while-statement  
      //  file prog.linked.opt.aa, line 132
      <o> [do_while_stmt_302]  $depth 7 $buffering 2 
      {
        $P[do_while_stmt_302__entry__] 
        $P[do_while_stmt_302__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_302_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_304
          // 			$phi M := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  NM $on   $loopback 
          // type of target is $uint<12>
          $T[phi_stmt_304_sample_start_] 
          $T[phi_stmt_304_sample_completed_] 
          $T[phi_stmt_304_update_start_] 
          $T[phi_stmt_304_update_completed_] 
          $T[phi_stmt_304_sample_start__ps] 
          phi_stmt_304_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_304_sample_completed__ps] 
          phi_stmt_304_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_304_update_start__ps] 
          phi_stmt_304_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_304_update_completed__ps] 
          phi_stmt_304_update_completed_ <-& (phi_stmt_304_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_304_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_304_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_304_update_start_)
          $T[phi_stmt_304_loopback_trigger] 
          phi_stmt_304_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_304_loopback_sample_req] 
          $T[phi_stmt_304_loopback_sample_req_ps] 
          phi_stmt_304_loopback_sample_req <-& (phi_stmt_304_loopback_sample_req_ps)
          phi_stmt_304_loopback_sample_req &-> ($null)
          $T[phi_stmt_304_entry_trigger] 
          phi_stmt_304_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_304_entry_sample_req] 
          $T[phi_stmt_304_entry_sample_req_ps] 
          phi_stmt_304_entry_sample_req <-& (phi_stmt_304_entry_sample_req_ps)
          phi_stmt_304_entry_sample_req &-> ($null)
          phi_stmt_304_update_start_ o<-& (phi_stmt_304_update_completed_ 0)
          phi_stmt_304_sample_start_ o<-& (phi_stmt_304_sample_completed_ 1)
          $T[phi_stmt_304_merged_reqs] 
          $T[phi_stmt_304_phi_mux_ack] 
          $T[phi_stmt_304_phi_mux_ack_ps] 
          phi_stmt_304_phi_mux_ack_ps <-& (phi_stmt_304_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_304_update_completed_)
          $T[type_cast_307_sample_start__ps] 
          $T[type_cast_307_sample_completed__ps] 
          $T[type_cast_307_update_start__ps] 
          $T[type_cast_307_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_307_sample_start_] 
          $T[type_cast_307_sample_completed_] 
          type_cast_307_sample_completed_ <-& (type_cast_307_sample_start_)
          $T[type_cast_307_update_start_] 
          $T [type_cast_307_update_completed_] $delay 
          type_cast_307_update_completed_ <-& (type_cast_307_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_307_sample_start_ <-& (type_cast_307_sample_start__ps)
          type_cast_307_update_start_ <-& (type_cast_307_update_start__ps)
          // Phi complete dependency.
          type_cast_307_sample_completed__ps <-& (type_cast_307_sample_completed_)
          type_cast_307_update_completed__ps <-& (type_cast_307_update_completed_)
          $T[R_NM_308_sample_start__ps] 
          $T[R_NM_308_sample_completed__ps] 
          $T[R_NM_308_update_start__ps] 
          $T[R_NM_308_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_NM_308_sample_start_] 
          $T[R_NM_308_sample_completed_] 
          $T[R_NM_308_update_start_] 
          $T[R_NM_308_update_completed_] 
          ;;[R_NM_308_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_NM_308_sample_start_ &-> (R_NM_308_Sample)
          R_NM_308_sample_completed_ <-& (R_NM_308_Sample)
          ;;[R_NM_308_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_NM_308_update_start_ &-> (R_NM_308_Update)
          R_NM_308_update_completed_ <-& (R_NM_308_Update)
          // RAW reenables for NM
          // Phi start dependency for implicit/constant alternative.
          R_NM_308_sample_start_ <-& (R_NM_308_sample_start__ps)
          R_NM_308_update_start_ <-& (R_NM_308_update_start__ps)
          // Phi complete dependency.
          R_NM_308_sample_completed__ps <-& (R_NM_308_sample_completed_)
          R_NM_308_update_completed__ps <-& (R_NM_308_update_completed_)
          $phisequencer [ phi_stmt_304_phi_seq] : 
          phi_stmt_304_entry_trigger type_cast_307_sample_start__ps type_cast_307_sample_completed__ps type_cast_307_update_start__ps type_cast_307_update_completed__ps phi_stmt_304_loopback_trigger R_NM_308_sample_start__ps R_NM_308_sample_completed__ps R_NM_308_update_start__ps R_NM_308_update_completed__ps :
          phi_stmt_304_sample_start__ps phi_stmt_304_sample_completed__ps phi_stmt_304_update_start__ps phi_stmt_304_update_completed__ps :
          phi_stmt_304_entry_sample_req_ps phi_stmt_304_loopback_sample_req_ps : 
          phi_stmt_304_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_304
          // start:  			wdata := ($cast ($uint<16>) M )// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 138
          // Source expression
          // ($cast ($uint<16>) M )
          $T[type_cast_312_sample_start_] 
          $T[type_cast_312_sample_completed_] 
          $T[type_cast_312_update_start_] 
          $T[type_cast_312_update_completed_] 
          // M
          // start: Forward dependencies from M to transition type_cast_312_sample_start_
          type_cast_312_sample_start_ <-& (phi_stmt_304_update_completed_)
          // done: Forward dependencies from M to transition type_cast_312_sample_start_
          ;;[type_cast_312_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_312_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_312_sample_start_ &-> (type_cast_312_Sample)
          type_cast_312_sample_completed_ <-& (type_cast_312_Sample)
          type_cast_312_sample_completed_ &-> ($null)
          type_cast_312_update_start_ &-> (type_cast_312_Update)
          type_cast_312_update_completed_ <-& (type_cast_312_Update)
          // RAW reenables for M
          phi_stmt_304_update_start_ o<-& (type_cast_312_sample_completed_ 0)
          // self-release: 
          type_cast_312_sample_start_ o<-& (type_cast_312_sample_completed_ 1)
          $null &-> (type_cast_312_update_start_)
          type_cast_312_update_start_ o<-& (type_cast_312_update_completed_ 0)
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			wdata := ($cast ($uint<16>) M )// bits of buffering = 16. 
          // start:  			M_279_delayed_4_0 := M $buffering 4// bits of buffering = 48. 
          //  file prog.linked.opt.aa, line 139
          $T[assign_stmt_316_sample_start_] 
          $T[assign_stmt_316_sample_completed_] 
          $T[assign_stmt_316_update_start_] 
          $T[assign_stmt_316_update_completed_] 
          // Source expression
          // M
          // Target expression
          // (as target) M_279_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_316_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_316_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_316_sample_start_ &-> (assign_stmt_316_Sample)
          assign_stmt_316_sample_completed_ <-& (assign_stmt_316_Sample)
          assign_stmt_316_sample_completed_ &-> ($null)
          assign_stmt_316_update_start_ &-> (assign_stmt_316_Update)
          assign_stmt_316_update_completed_ <-& (assign_stmt_316_Update)
          // start: Forward dependencies from M to transition assign_stmt_316_sample_start_
          assign_stmt_316_sample_start_ <-& (phi_stmt_304_update_completed_)
          // done: Forward dependencies from M to transition assign_stmt_316_sample_start_
          // RAW reenables for M
          phi_stmt_304_update_start_ o<-& (assign_stmt_316_sample_completed_ 0)
          // self-release: 
          assign_stmt_316_sample_start_ o<-& (assign_stmt_316_sample_completed_ 1)
          $null &-> (assign_stmt_316_update_start_)
          assign_stmt_316_update_start_ o<-& (assign_stmt_316_update_completed_ 0)
          // start: WAR dependencies for M_279_delayed_4_0
          // done: WAR dependencies for M_279_delayed_4_0
          // end:  			M_279_delayed_4_0 := M $buffering 4// bits of buffering = 48. 
          // start:  			addr := ($cast ($uint<12>) (ZJ + M_279_delayed_4_0) )// bits of buffering = 12. 
          //  file prog.linked.opt.aa, line 140
          // Source expression
          // ($cast ($uint<12>) (ZJ + M_279_delayed_4_0) )
          $T[type_cast_321_sample_start_] 
          $T[type_cast_321_sample_completed_] 
          $T[type_cast_321_update_start_] 
          $T[type_cast_321_update_completed_] 
          // (ZJ + M_279_delayed_4_0)
          // ZJ
          $T[LOAD_ZJ_318_sample_start_] 
          $T[LOAD_ZJ_318_sample_completed_] 
          $T[LOAD_ZJ_318_update_start_] 
          $T[LOAD_ZJ_318_update_completed_] 
          $T[LOAD_ZJ_318_word_address_calculated] 
          $T[LOAD_ZJ_318_root_address_calculated] 
          LOAD_ZJ_318_word_address_calculated <-& (LOAD_ZJ_318_root_address_calculated)
          ;;[LOAD_ZJ_318_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[LOAD_ZJ_318_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[LOAD_ZJ_318_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          LOAD_ZJ_318_sample_start_ <-& (LOAD_ZJ_318_word_address_calculated)
          // reenable-joins
          LOAD_ZJ_318_sample_start_ &-> (LOAD_ZJ_318_Sample)
          LOAD_ZJ_318_sample_completed_ <-& (LOAD_ZJ_318_Sample)
          LOAD_ZJ_318_sample_completed_ &-> ($null)
          LOAD_ZJ_318_update_start_ &-> (LOAD_ZJ_318_Update)
          LOAD_ZJ_318_update_completed_ <-& (LOAD_ZJ_318_Update)
          // self-release: 
          LOAD_ZJ_318_sample_start_ o<-& (LOAD_ZJ_318_sample_completed_ 1)
          $null &-> (LOAD_ZJ_318_update_start_)
          LOAD_ZJ_318_update_start_ o<-& (LOAD_ZJ_318_update_completed_ 0)
          // M_279_delayed_4_0
          // start: Forward dependencies from (ZJ + M_279_delayed_4_0) to transition type_cast_321_sample_start_
          type_cast_321_sample_start_ <-& (assign_stmt_316_update_completed_)
          type_cast_321_sample_start_ <-& (LOAD_ZJ_318_update_completed_)
          // done: Forward dependencies from (ZJ + M_279_delayed_4_0) to transition type_cast_321_sample_start_
          ;;[type_cast_321_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_321_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_321_sample_start_ &-> (type_cast_321_Sample)
          type_cast_321_sample_completed_ <-& (type_cast_321_Sample)
          type_cast_321_sample_completed_ &-> ($null)
          type_cast_321_update_start_ &-> (type_cast_321_Update)
          type_cast_321_update_completed_ <-& (type_cast_321_Update)
          // RAW reenables for (ZJ + M_279_delayed_4_0)
          assign_stmt_316_update_start_ o<-& (type_cast_321_sample_completed_ 0)
          LOAD_ZJ_318_update_start_ o<-& (type_cast_321_sample_completed_ 0)
          // self-release: 
          type_cast_321_sample_start_ o<-& (type_cast_321_sample_completed_ 1)
          $null &-> (type_cast_321_update_start_)
          type_cast_321_update_start_ o<-& (type_cast_321_update_completed_ 0)
          // Target expression
          // (as target) addr
          // start: WAR dependencies for addr
          // done: WAR dependencies for addr
          // end:  			addr := ($cast ($uint<12>) (ZJ + M_279_delayed_4_0) )// bits of buffering = 12. 
          // start:  			wdata_285_delayed_4_0 := wdata $buffering 4// bits of buffering = 64. 
          //  file prog.linked.opt.aa, line 141
          $T[assign_stmt_325_sample_start_] 
          $T[assign_stmt_325_sample_completed_] 
          $T[assign_stmt_325_update_start_] 
          $T[assign_stmt_325_update_completed_] 
          // Source expression
          // wdata
          // Target expression
          // (as target) wdata_285_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_325_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_325_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_325_sample_start_ &-> (assign_stmt_325_Sample)
          assign_stmt_325_sample_completed_ <-& (assign_stmt_325_Sample)
          assign_stmt_325_sample_completed_ &-> ($null)
          assign_stmt_325_update_start_ &-> (assign_stmt_325_Update)
          assign_stmt_325_update_completed_ <-& (assign_stmt_325_Update)
          // start: Forward dependencies from wdata to transition assign_stmt_325_sample_start_
          assign_stmt_325_sample_start_ <-& (type_cast_312_update_completed_)
          // done: Forward dependencies from wdata to transition assign_stmt_325_sample_start_
          // RAW reenables for wdata
          type_cast_312_update_start_ o<-& (assign_stmt_325_sample_completed_ 0)
          // self-release: 
          assign_stmt_325_sample_start_ o<-& (assign_stmt_325_sample_completed_ 1)
          $null &-> (assign_stmt_325_update_start_)
          assign_stmt_325_update_start_ o<-& (assign_stmt_325_update_completed_ 0)
          // start: WAR dependencies for wdata_285_delayed_4_0
          // done: WAR dependencies for wdata_285_delayed_4_0
          // end:  			wdata_285_delayed_4_0 := wdata $buffering 4// bits of buffering = 64. 
          // start: 			$call accessMem (0  addr wdata_285_delayed_4_0 ) (rdata ) 
          //  file prog.linked.opt.aa, line 142
          $T[call_stmt_330_sample_start_] 
          $T[call_stmt_330_sample_completed_] 
          $T[call_stmt_330_update_start_] 
          $T[call_stmt_330_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // addr
          // Call input argument 2
          // wdata_285_delayed_4_0
          // start: Forward dependencies from addr to transition call_stmt_330_sample_start_
          call_stmt_330_sample_start_ <-& (type_cast_321_update_completed_)
          // done: Forward dependencies from addr to transition call_stmt_330_sample_start_
          // RAW reenables for addr
          type_cast_321_update_start_ o<-& (call_stmt_330_sample_completed_ 0)
          // start: Forward dependencies from wdata_285_delayed_4_0 to transition call_stmt_330_sample_start_
          call_stmt_330_sample_start_ <-& (assign_stmt_325_update_completed_)
          // done: Forward dependencies from wdata_285_delayed_4_0 to transition call_stmt_330_sample_start_
          // RAW reenables for wdata_285_delayed_4_0
          assign_stmt_325_update_start_ o<-& (call_stmt_330_sample_completed_ 0)
          ;;[call_stmt_330_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_330_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_330_sample_start_ &-> (call_stmt_330_Sample)
          call_stmt_330_sample_completed_ <-& (call_stmt_330_Sample)
          call_stmt_330_sample_completed_ &-> ($null)
          call_stmt_330_update_start_ &-> (call_stmt_330_Update)
          call_stmt_330_update_completed_ <-& (call_stmt_330_Update)
          // Call output argument 0
          // (as target) rdata
          // self-release: 
          call_stmt_330_sample_start_ o<-& (call_stmt_330_sample_completed_ 1)
          $null &-> (call_stmt_330_update_start_)
          call_stmt_330_update_start_ o<-& (call_stmt_330_update_completed_ 0)
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // end: 			$call accessMem (0  addr wdata_285_delayed_4_0 ) (rdata ) 
          // start:  			NM := (M + 1 )// bits of buffering = 12. 
          //  file prog.linked.opt.aa, line 143
          // Source expression
          // (M + 1 )
          $T[ADD_u12_u12_334_sample_start_] 
          $T[ADD_u12_u12_334_sample_completed_] 
          $T[ADD_u12_u12_334_update_start_] 
          $T[ADD_u12_u12_334_update_completed_] 
          // M
          // start: Forward dependencies from M to transition ADD_u12_u12_334_sample_start_
          ADD_u12_u12_334_sample_start_ <-& (phi_stmt_304_update_completed_)
          // done: Forward dependencies from M to transition ADD_u12_u12_334_sample_start_
          ;;[ADD_u12_u12_334_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u12_u12_334_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u12_u12_334_sample_start_ &-> (ADD_u12_u12_334_Sample)
          ADD_u12_u12_334_sample_completed_ <-& (ADD_u12_u12_334_Sample)
          ADD_u12_u12_334_sample_completed_ &-> ($null)
          ADD_u12_u12_334_update_start_ &-> (ADD_u12_u12_334_Update)
          ADD_u12_u12_334_update_completed_ <-& (ADD_u12_u12_334_Update)
          // RAW reenables for M
          phi_stmt_304_update_start_ o<-& (ADD_u12_u12_334_sample_completed_ 0)
          // self-release: 
          ADD_u12_u12_334_sample_start_ o<-& (ADD_u12_u12_334_sample_completed_ 1)
          $null &-> (ADD_u12_u12_334_update_start_)
          ADD_u12_u12_334_update_start_ o<-& (ADD_u12_u12_334_update_completed_ 0)
          // Target expression
          // (as target) NM
          // start: WAR dependencies for NM
          // WAR dependency: Read: NM before Write: 			NM := (M + 1 )// bits of buffering = 12. 
          ADD_u12_u12_334_update_start_ <-& (phi_stmt_304_sample_completed_)
          phi_stmt_304_sample_start_ o<-& (ADD_u12_u12_334_update_completed_ 0)
          // WAR dependency: release  Read: NM with Write: 			NM := (M + 1 )// bits of buffering = 12. 
          // done: WAR dependencies for NM
          // end:  			NM := (M + 1 ) $buffering 2// bits of buffering = 24. 
          // (NM < 16 )
          // NM
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (NM < 16 ) to transition condition_evaluated
          condition_evaluated <-& (ADD_u12_u12_334_update_completed_)
          // done: Forward dependencies from (NM < 16 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_5
          //  call_stmt_330 store
          // reenable across ring for memory space memory_space_5
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_1
          //  LOAD_ZJ_318 load
          // reenable across ring for memory space memory_space_1
          // leading and trailing sets are the same... no ring dependency
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_302__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_302_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_302__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_302_loop_body : condition_evaluated
        $bind do_while_stmt_302__entry__  => do_while_stmt_302_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_302_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_302__exit__)
      }
      do_while_stmt_302__entry__ |-> (do_while_stmt_302)
      do_while_stmt_302__exit__ <-| (do_while_stmt_302)
      do_while_stmt_302__entry__ <-| (branch_block_stmt_301__entry__)
      do_while_stmt_302__exit__ |-> (branch_block_stmt_301__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %initial%init1%
    //  file prog.linked.opt.aa, line 103
    // constant-object-declarations for block %initial%init1%init2%
    //  file prog.linked.opt.aa, line 112
    // constant-object-declarations for block %initial%init1%init2
    //  file prog.linked.opt.aa, line 108
    // constant-object-declarations for block %initial%init1
    //  file prog.linked.opt.aa, line 101
    // constant-object-declarations for block %initial%init3%
    //  file prog.linked.opt.aa, line 134
    // constant-object-declarations for block %initial%init3
    //  file prog.linked.opt.aa, line 130
    // constant-object-declarations for block %initial
    //  file prog.linked.opt.aa, line 95
    // 0 
    $constant $W[konst_231_wire_constant] : $int<12> := _b000000000000// 0
    // ZJ
    $constant $W[STORE_ZJ_230_word_address_0] : $pointer<memory_space_1> := _b0
    // constant-declarations for block %initial%init1
    //  file prog.linked.opt.aa, line 101
    // constant-declarations for block %initial%init1%
    //  file prog.linked.opt.aa, line 103
    // constant-declarations for phi:  			$phi Y := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  YI $on   loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 104
    // ($bitcast ($uint<12>) 0  )
    $constant $W[type_cast_238_wire_constant] : $int<12> := _b000000000000// 0
    // 128 
    $constant $W[konst_243_wire_constant] : $int<12> := _b000010000000// 128
    // ZJ
    $constant $W[STORE_ZJ_241_word_address_0] : $pointer<memory_space_1> := _b0
    // constant-declarations for block %initial%init1%init2
    //  file prog.linked.opt.aa, line 108
    // do-while statement  
    //  file prog.linked.opt.aa, line 110
    // 128 
    $constant $W[konst_283_wire_constant] : $int<12> := _b000010000000// 128
    // constant-declarations for block %initial%init1%init2%
    //  file prog.linked.opt.aa, line 112
    // constant-declarations for phi:  				$phi I := 				  ($bitcast ($uint<12>) 0  ) $on   $entry 				  NI $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 113
    // ($bitcast ($uint<12>) 0  )
    $constant $W[type_cast_252_wire_constant] : $int<12> := _b000000000000// 0
    // ZJ
    $constant $W[LOAD_ZJ_263_word_address_0] : $pointer<memory_space_1> := _b0
    // 				$call accessMem (0  addr wdata_236_delayed_4_0 ) (rdata ) 
    //  file prog.linked.opt.aa, line 120
    // 0 
    $constant $W[konst_271_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_278_wire_constant] : $int<12> := _b000000000001// 1
    // 1 
    $constant $W[konst_288_wire_constant] : $int<12> := _b000000000001// 1
    // if-statement  
    //  file prog.linked.opt.aa, line 0
    // 8 
    $constant $W[konst_293_wire_constant] : $int<12> := _b000000001000// 8
    // 1024 
    $constant $W[konst_299_wire_constant] : $int<12> := _b010000000000// 1024
    // ZJ
    $constant $W[STORE_ZJ_298_word_address_0] : $pointer<memory_space_1> := _b0
    // constant-declarations for block %initial%init3
    //  file prog.linked.opt.aa, line 130
    // do-while statement  
    //  file prog.linked.opt.aa, line 132
    // 16 
    $constant $W[konst_338_wire_constant] : $int<12> := _b000000010000// 16
    // constant-declarations for block %initial%init3%
    //  file prog.linked.opt.aa, line 134
    // constant-declarations for phi:  			$phi M := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  NM $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 135
    // ($bitcast ($uint<12>) 0  )
    $constant $W[type_cast_307_wire_constant] : $int<12> := _b000000000000// 0
    // ZJ
    $constant $W[LOAD_ZJ_318_word_address_0] : $pointer<memory_space_1> := _b0
    // 			$call accessMem (0  addr wdata_285_delayed_4_0 ) (rdata ) 
    //  file prog.linked.opt.aa, line 142
    // 0 
    $constant $W[konst_326_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_333_wire_constant] : $int<12> := _b000000000001// 1
    // 	ZJ := 0 // bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 100
    // ZJ
    $constant $W[STORE_ZJ_230_word_address_0] : $pointer<memory_space_1> := _b0
    $W[STORE_ZJ_230_data_0] : $int<12>
    // block %initial%init1
    //  file prog.linked.opt.aa, line 101
    // merge-statement  
    //  file prog.linked.opt.aa, line 103
    // 			$phi Y := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  YI $on   loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 104
    $W[YI_290_239_buffered] : $int<12>
    // Y
    $W[Y_235] : $int<12>
    // 		ZJ := (Y * 128 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 107
    // (Y * 128 )
    $intermediate $W[MUL_u12_u12_244_wire] : $int<12>
    // ZJ
    $constant $W[STORE_ZJ_241_word_address_0] : $pointer<memory_space_1> := _b0
    $W[STORE_ZJ_241_data_0] : $int<12>
    // block %initial%init1%init2
    //  file prog.linked.opt.aa, line 108
    // do-while statement  
    //  file prog.linked.opt.aa, line 110
    // (NI < 128 )
    $intermediate $W[ULT_u12_u1_284_wire] : $int<1>
    // merge-statement  
    //  file prog.linked.opt.aa, line 112
    // 				$phi I := 				  ($bitcast ($uint<12>) 0  ) $on   $entry 				  NI $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 113
    $W[NI_280_253_buffered] : $int<12>
    // I
    $W[I_249] : $int<12>
    // 				wdata := ($cast ($uint<16>) I )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 116
    // wdata
    $W[wdata_258] : $int<16>
    // 				I_230_delayed_4_0 := I $buffering 4// bits of buffering = 48. 
    //  file prog.linked.opt.aa, line 117
    // I_230_delayed_4_0
    $W[I_230_delayed_4_0_261] : $int<12>
    // 				addr := ($cast ($uint<12>) (ZJ + I_230_delayed_4_0) )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 118
    // ZJ
    $W[LOAD_ZJ_263_wire] : $int<12>
    // ZJ
    $W[LOAD_ZJ_263_data_0] : $int<12>
    // (ZJ + I_230_delayed_4_0)
    $intermediate $W[ADD_u12_u12_265_wire] : $int<12>
    // addr
    $W[addr_267] : $int<12>
    // 				wdata_236_delayed_4_0 := wdata $buffering 4// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 119
    // wdata_236_delayed_4_0
    $W[wdata_236_delayed_4_0_270] : $int<16>
    // 				$call accessMem (0  addr wdata_236_delayed_4_0 ) (rdata ) 
    //  file prog.linked.opt.aa, line 120
    // rdata
    $W[rdata_275] : $int<64>
    // 				NI := (I + 1 ) $buffering 2// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 121
    // NI
    $W[NI_280] : $int<12>
    // 		YI := (Y + 1 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 124
    // YI
    $W[YI_290] : $int<12>
    // if statement  
    //  file prog.linked.opt.aa, line 0
    // (YI < 8 )
    $intermediate $W[ULT_u12_u1_294_wire] : $int<1>
    // 	ZJ := 1024 // bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 129
    // ZJ
    $constant $W[STORE_ZJ_298_word_address_0] : $pointer<memory_space_1> := _b0
    $W[STORE_ZJ_298_data_0] : $int<12>
    // block %initial%init3
    //  file prog.linked.opt.aa, line 130
    // do-while statement  
    //  file prog.linked.opt.aa, line 132
    // (NM < 16 )
    $intermediate $W[ULT_u12_u1_339_wire] : $int<1>
    // merge-statement  
    //  file prog.linked.opt.aa, line 134
    // 			$phi M := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  NM $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 135
    $W[NM_335_308_buffered] : $int<12>
    // M
    $W[M_304] : $int<12>
    // 			wdata := ($cast ($uint<16>) M )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 138
    // wdata
    $W[wdata_313] : $int<16>
    // 			M_279_delayed_4_0 := M $buffering 4// bits of buffering = 48. 
    //  file prog.linked.opt.aa, line 139
    // M_279_delayed_4_0
    $W[M_279_delayed_4_0_316] : $int<12>
    // 			addr := ($cast ($uint<12>) (ZJ + M_279_delayed_4_0) )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 140
    // ZJ
    $W[LOAD_ZJ_318_wire] : $int<12>
    // ZJ
    $W[LOAD_ZJ_318_data_0] : $int<12>
    // (ZJ + M_279_delayed_4_0)
    $intermediate $W[ADD_u12_u12_320_wire] : $int<12>
    // addr
    $W[addr_322] : $int<12>
    // 			wdata_285_delayed_4_0 := wdata $buffering 4// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 141
    // wdata_285_delayed_4_0
    $W[wdata_285_delayed_4_0_325] : $int<16>
    // 			$call accessMem (0  addr wdata_285_delayed_4_0 ) (rdata ) 
    //  file prog.linked.opt.aa, line 142
    // rdata
    $W[rdata_330] : $int<64>
    // 			NM := (M + 1 ) $buffering 2// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 143
    // NM
    $W[NM_335] : $int<12>
    // 	ZJ := 0 // bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 100
    // ZJ
    $store [STORE_ZJ_230_store_0] $to memory_space_1 (STORE_ZJ_230_word_address_0 STORE_ZJ_230_data_0) 
    $delay STORE_ZJ_230_store_0 4
    &/ [STORE_ZJ_230_gather_scatter] (konst_231_wire_constant) (STORE_ZJ_230_data_0) 
    $flowthrough 
    // datapath-instances for block %initial%init1
    //  file prog.linked.opt.aa, line 101
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 103
    // 			$phi Y := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  YI $on   loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 104
    # := [YI_290_239_buf] (YI_290) (YI_290_239_buffered)   
    $phi [phi_stmt_235] (type_cast_238_wire_constant YI_290_239_buffered) ( Y_235 ) 
    // 		ZJ := (Y * 128 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 107
    // (Y * 128 )
    *[MUL_u12_u12_244_inst] (Y_235 konst_243_wire_constant) (MUL_u12_u12_244_wire)   
    $buffering  $out MUL_u12_u12_244_inst MUL_u12_u12_244_wire 1
    $delay MUL_u12_u12_244_inst 1
    // ZJ
    $store [STORE_ZJ_241_store_0] $to memory_space_1 (STORE_ZJ_241_word_address_0 STORE_ZJ_241_data_0) 
    $delay STORE_ZJ_241_store_0 4
    &/ [STORE_ZJ_241_gather_scatter] (MUL_u12_u12_244_wire) (STORE_ZJ_241_data_0) 
    $flowthrough 
    // datapath-instances for block %initial%init1%init2
    //  file prog.linked.opt.aa, line 108
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 110
    // (NI < 128 )
    <[ULT_u12_u1_284_inst] (NI_280 konst_283_wire_constant) (ULT_u12_u1_284_wire)   $flowthrough 
    $delay ULT_u12_u1_284_inst 0
    ==0? [do_while_stmt_247_branch] (ULT_u12_u1_284_wire)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 112
    // 				$phi I := 				  ($bitcast ($uint<12>) 0  ) $on   $entry 				  NI $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 113
    # := [NI_280_253_buf] (NI_280) (NI_280_253_buffered)    $fullrate
    $buffering $out NI_280_253_buf NI_280_253_buffered  1
    # $phi [phi_stmt_249] (type_cast_252_wire_constant NI_280_253_buffered) ( I_249 ) $fullrate
    // $buffering  $out phi_stmt_249 I_249 2
    // 				wdata := ($cast ($uint<16>) I )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 116
    // ($cast ($uint<16>) I )
    # := [type_cast_257_inst] (I_249) (wdata_258)    $fullrate
    $buffering  $out type_cast_257_inst wdata_258 1
    $delay type_cast_257_inst 1
    // 				I_230_delayed_4_0 := I $buffering 4// bits of buffering = 48. 
    //  file prog.linked.opt.aa, line 117
    # := [W_I_230_delayed_4_0_259_inst] (I_249) (I_230_delayed_4_0_261)    $fullrate
    $buffering  $out W_I_230_delayed_4_0_259_inst I_230_delayed_4_0_261 4
    // 				addr := ($cast ($uint<12>) (ZJ + I_230_delayed_4_0) )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 118
    // ZJ
    $load [LOAD_ZJ_263_load_0] $from memory_space_1 (LOAD_ZJ_263_word_address_0) (LOAD_ZJ_263_data_0) 
    $buffering  $in LOAD_ZJ_263_load_0 LOAD_ZJ_263_word_address_0 2
    $buffering  $out LOAD_ZJ_263_load_0 LOAD_ZJ_263_data_0 2
    $delay LOAD_ZJ_263_load_0 5
    &/ [LOAD_ZJ_263_gather_scatter] (LOAD_ZJ_263_data_0) (LOAD_ZJ_263_wire) 
    $flowthrough 
    // (ZJ + I_230_delayed_4_0)
    +[ADD_u12_u12_265_inst] (LOAD_ZJ_263_wire I_230_delayed_4_0_261) (ADD_u12_u12_265_wire)   $flowthrough 
    $delay ADD_u12_u12_265_inst 0
    // ($cast ($uint<12>) (ZJ + I_230_delayed_4_0) )
    # := [type_cast_266_inst] (ADD_u12_u12_265_wire) (addr_267)    $fullrate
    $buffering  $out type_cast_266_inst addr_267 1
    $delay type_cast_266_inst 1
    // 				wdata_236_delayed_4_0 := wdata $buffering 4// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 119
    # := [W_wdata_236_delayed_4_0_268_inst] (wdata_258) (wdata_236_delayed_4_0_270)    $fullrate
    $buffering  $out W_wdata_236_delayed_4_0_268_inst wdata_236_delayed_4_0_270 4
    // 				$call accessMem (0  addr wdata_236_delayed_4_0 ) (rdata ) 
    //  file prog.linked.opt.aa, line 120
    $call [call_stmt_275_call] $module accessMem(konst_271_wire_constant addr_267 wdata_236_delayed_4_0_270) (rdata_275)   $fullrate
    $delay call_stmt_275_call 10
    $buffering  $in call_stmt_275_call konst_271_wire_constant 1
    $buffering  $in call_stmt_275_call addr_267 1
    $buffering  $in call_stmt_275_call wdata_236_delayed_4_0_270 1
    $buffering  $out call_stmt_275_call rdata_275 1
    // 				NI := (I + 1 ) $buffering 2// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 121
    // (I + 1 )
    +[ADD_u12_u12_279_inst] (I_249 konst_278_wire_constant) (NI_280)    $fullrate
    $buffering  $out ADD_u12_u12_279_inst NI_280 2
    $delay ADD_u12_u12_279_inst 1
    // 		YI := (Y + 1 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 124
    // (Y + 1 )
    +[ADD_u12_u12_289_inst] (Y_235 konst_288_wire_constant) (YI_290)   
    $buffering  $out ADD_u12_u12_289_inst YI_290 1
    $delay ADD_u12_u12_289_inst 1
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 0
    // (YI < 8 )
    <[ULT_u12_u1_294_inst] (YI_290 konst_293_wire_constant) (ULT_u12_u1_294_wire)   $flowthrough 
    $delay ULT_u12_u1_294_inst 0
    ==0? [if_stmt_291_branch] (ULT_u12_u1_294_wire)
    // 	ZJ := 1024 // bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 129
    // ZJ
    $store [STORE_ZJ_298_store_0] $to memory_space_1 (STORE_ZJ_298_word_address_0 STORE_ZJ_298_data_0) 
    $delay STORE_ZJ_298_store_0 4
    &/ [STORE_ZJ_298_gather_scatter] (konst_299_wire_constant) (STORE_ZJ_298_data_0) 
    $flowthrough 
    // datapath-instances for block %initial%init3
    //  file prog.linked.opt.aa, line 130
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 132
    // (NM < 16 )
    <[ULT_u12_u1_339_inst] (NM_335 konst_338_wire_constant) (ULT_u12_u1_339_wire)   $flowthrough 
    $delay ULT_u12_u1_339_inst 0
    ==0? [do_while_stmt_302_branch] (ULT_u12_u1_339_wire)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 134
    // 			$phi M := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  NM $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 135
    # := [NM_335_308_buf] (NM_335) (NM_335_308_buffered)    $fullrate
    $buffering $out NM_335_308_buf NM_335_308_buffered  1
    # $phi [phi_stmt_304] (type_cast_307_wire_constant NM_335_308_buffered) ( M_304 ) $fullrate
    // $buffering  $out phi_stmt_304 M_304 2
    // 			wdata := ($cast ($uint<16>) M )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 138
    // ($cast ($uint<16>) M )
    # := [type_cast_312_inst] (M_304) (wdata_313)    $fullrate
    $buffering  $out type_cast_312_inst wdata_313 1
    $delay type_cast_312_inst 1
    // 			M_279_delayed_4_0 := M $buffering 4// bits of buffering = 48. 
    //  file prog.linked.opt.aa, line 139
    # := [W_M_279_delayed_4_0_314_inst] (M_304) (M_279_delayed_4_0_316)    $fullrate
    $buffering  $out W_M_279_delayed_4_0_314_inst M_279_delayed_4_0_316 4
    // 			addr := ($cast ($uint<12>) (ZJ + M_279_delayed_4_0) )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 140
    // ZJ
    $load [LOAD_ZJ_318_load_0] $from memory_space_1 (LOAD_ZJ_318_word_address_0) (LOAD_ZJ_318_data_0) 
    $buffering  $in LOAD_ZJ_318_load_0 LOAD_ZJ_318_word_address_0 2
    $buffering  $out LOAD_ZJ_318_load_0 LOAD_ZJ_318_data_0 2
    $delay LOAD_ZJ_318_load_0 5
    &/ [LOAD_ZJ_318_gather_scatter] (LOAD_ZJ_318_data_0) (LOAD_ZJ_318_wire) 
    $flowthrough 
    // (ZJ + M_279_delayed_4_0)
    +[ADD_u12_u12_320_inst] (LOAD_ZJ_318_wire M_279_delayed_4_0_316) (ADD_u12_u12_320_wire)   $flowthrough 
    $delay ADD_u12_u12_320_inst 0
    // ($cast ($uint<12>) (ZJ + M_279_delayed_4_0) )
    # := [type_cast_321_inst] (ADD_u12_u12_320_wire) (addr_322)    $fullrate
    $buffering  $out type_cast_321_inst addr_322 1
    $delay type_cast_321_inst 1
    // 			wdata_285_delayed_4_0 := wdata $buffering 4// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 141
    # := [W_wdata_285_delayed_4_0_323_inst] (wdata_313) (wdata_285_delayed_4_0_325)    $fullrate
    $buffering  $out W_wdata_285_delayed_4_0_323_inst wdata_285_delayed_4_0_325 4
    // 			$call accessMem (0  addr wdata_285_delayed_4_0 ) (rdata ) 
    //  file prog.linked.opt.aa, line 142
    $call [call_stmt_330_call] $module accessMem(konst_326_wire_constant addr_322 wdata_285_delayed_4_0_325) (rdata_330)   $fullrate
    $delay call_stmt_330_call 10
    $buffering  $in call_stmt_330_call konst_326_wire_constant 1
    $buffering  $in call_stmt_330_call addr_322 1
    $buffering  $in call_stmt_330_call wdata_285_delayed_4_0_325 1
    $buffering  $out call_stmt_330_call rdata_330 1
    // 			NM := (M + 1 ) $buffering 2// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 143
    // (M + 1 )
    +[ADD_u12_u12_334_inst] (M_304 konst_333_wire_constant) (NM_335)    $fullrate
    $buffering  $out ADD_u12_u12_334_inst NM_335 2
    $delay ADD_u12_u12_334_inst 1
  }
  // end data-path
  // 	ZJ := 0 // bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 100
  // ZJ
  STORE_ZJ_230_gather_scatter <=> (assign_stmt_232/STORE_ZJ_230_Sample/STORE_ZJ_230_Split/split_req) (assign_stmt_232/STORE_ZJ_230_Sample/STORE_ZJ_230_Split/split_ack)
  STORE_ZJ_230_store_0 <=> (assign_stmt_232/STORE_ZJ_230_Sample/word_access_start/word_0/rr assign_stmt_232/STORE_ZJ_230_Update/word_access_complete/word_0/cr) (assign_stmt_232/STORE_ZJ_230_Sample/word_access_start/word_0/ra assign_stmt_232/STORE_ZJ_230_Update/word_access_complete/word_0/ca)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 103
  YI_290_239_buf <=> (branch_block_stmt_233/loopback_PhiReq/phi_stmt_235/phi_stmt_235_sources/Interlock/Sample/req branch_block_stmt_233/loopback_PhiReq/phi_stmt_235/phi_stmt_235_sources/Interlock/Update/req) (branch_block_stmt_233/loopback_PhiReq/phi_stmt_235/phi_stmt_235_sources/Interlock/Sample/ack branch_block_stmt_233/loopback_PhiReq/phi_stmt_235/phi_stmt_235_sources/Interlock/Update/ack)
  phi_stmt_235 <=> (branch_block_stmt_233/merge_stmt_234__entry___PhiReq/phi_stmt_235/phi_stmt_235_req branch_block_stmt_233/loopback_PhiReq/phi_stmt_235/phi_stmt_235_req) (branch_block_stmt_233/merge_stmt_234_PhiAck/phi_stmt_235_ack)
  // 		ZJ := (Y * 128 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 107
  // (Y * 128 )
  // Y
  MUL_u12_u12_244_inst <=> (branch_block_stmt_233/assign_stmt_245/MUL_u12_u12_244_Sample/rr branch_block_stmt_233/assign_stmt_245/MUL_u12_u12_244_Update/cr) (branch_block_stmt_233/assign_stmt_245/MUL_u12_u12_244_Sample/ra branch_block_stmt_233/assign_stmt_245/MUL_u12_u12_244_Update/ca)
  // ZJ
  STORE_ZJ_241_gather_scatter <=> (branch_block_stmt_233/assign_stmt_245/STORE_ZJ_241_Sample/STORE_ZJ_241_Split/split_req) (branch_block_stmt_233/assign_stmt_245/STORE_ZJ_241_Sample/STORE_ZJ_241_Split/split_ack)
  STORE_ZJ_241_store_0 <=> (branch_block_stmt_233/assign_stmt_245/STORE_ZJ_241_Sample/word_access_start/word_0/rr branch_block_stmt_233/assign_stmt_245/STORE_ZJ_241_Update/word_access_complete/word_0/cr) (branch_block_stmt_233/assign_stmt_245/STORE_ZJ_241_Sample/word_access_start/word_0/ra branch_block_stmt_233/assign_stmt_245/STORE_ZJ_241_Update/word_access_complete/word_0/ca)
  // CP-DP links for do-while  do_while_stmt_247
  //  file prog.linked.opt.aa, line 110
  phi_stmt_249 <=> (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/phi_stmt_249_entry_sample_req branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/phi_stmt_249_loopback_sample_req) (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/phi_stmt_249_phi_mux_ack)
  NI_280_253_buf <=> (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/R_NI_253_Sample/req branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/R_NI_253_Update/req) (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/R_NI_253_Sample/ack branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/R_NI_253_Update/ack)
  // 				wdata := ($cast ($uint<16>) I )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 116
  // I
  // ($cast ($uint<16>) I )
  type_cast_257_inst <=> (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/type_cast_257_Sample/rr branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/type_cast_257_Update/cr) (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/type_cast_257_Sample/ra branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/type_cast_257_Update/ca)
  // 				I_230_delayed_4_0 := I $buffering 4// bits of buffering = 48. 
  //  file prog.linked.opt.aa, line 117
  // I
  W_I_230_delayed_4_0_259_inst <=> (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/assign_stmt_261_Sample/req branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/assign_stmt_261_Update/req) (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/assign_stmt_261_Sample/ack branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/assign_stmt_261_Update/ack)
  // 				addr := ($cast ($uint<12>) (ZJ + I_230_delayed_4_0) )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 118
  // (ZJ + I_230_delayed_4_0)
  // ZJ
  LOAD_ZJ_263_gather_scatter <=> (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/LOAD_ZJ_263_Update/LOAD_ZJ_263_Merge/merge_req) (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/LOAD_ZJ_263_Update/LOAD_ZJ_263_Merge/merge_ack)
  LOAD_ZJ_263_load_0 <=> (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/LOAD_ZJ_263_Sample/word_access_start/word_0/rr branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/LOAD_ZJ_263_Update/word_access_complete/word_0/cr) (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/LOAD_ZJ_263_Sample/word_access_start/word_0/ra branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/LOAD_ZJ_263_Update/word_access_complete/word_0/ca)
  // I_230_delayed_4_0
  // ($cast ($uint<12>) (ZJ + I_230_delayed_4_0) )
  type_cast_266_inst <=> (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/type_cast_266_Sample/rr branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/type_cast_266_Update/cr) (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/type_cast_266_Sample/ra branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/type_cast_266_Update/ca)
  // 				wdata_236_delayed_4_0 := wdata $buffering 4// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 119
  // wdata
  W_wdata_236_delayed_4_0_268_inst <=> (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/assign_stmt_270_Sample/req branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/assign_stmt_270_Update/req) (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/assign_stmt_270_Sample/ack branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/assign_stmt_270_Update/ack)
  // 				$call accessMem (0  addr wdata_236_delayed_4_0 ) (rdata ) 
  //  file prog.linked.opt.aa, line 120
  // addr
  // wdata_236_delayed_4_0
  call_stmt_275_call <=> (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/call_stmt_275_Sample/crr branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/call_stmt_275_Update/ccr) (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/call_stmt_275_Sample/cra branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/call_stmt_275_Update/cca)
  // 				NI := (I + 1 ) $buffering 2// bits of buffering = 24. 
  //  file prog.linked.opt.aa, line 121
  // (I + 1 )
  // I
  ADD_u12_u12_279_inst <=> (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/ADD_u12_u12_279_Sample/rr branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/ADD_u12_u12_279_Update/cr) (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/ADD_u12_u12_279_Sample/ra branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/ADD_u12_u12_279_Update/ca)
  // (NI < 128 )
  // NI
  do_while_stmt_247_branch <=> (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/do_while_stmt_247_loop_body/condition_evaluated) (branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/loop_exit/ack branch_block_stmt_233/branch_block_stmt_246/do_while_stmt_247/loop_taken/ack)
  // 		YI := (Y + 1 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 124
  // (Y + 1 )
  // Y
  ADD_u12_u12_289_inst <=> (branch_block_stmt_233/assign_stmt_290/ADD_u12_u12_289_Sample/rr branch_block_stmt_233/assign_stmt_290/ADD_u12_u12_289_Update/cr) (branch_block_stmt_233/assign_stmt_290/ADD_u12_u12_289_Sample/ra branch_block_stmt_233/assign_stmt_290/ADD_u12_u12_289_Update/ca)
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 0
  // (YI < 8 )
  if_stmt_291_branch <=> (branch_block_stmt_233/if_stmt_291_eval_test/branch_req) (branch_block_stmt_233/if_stmt_291_else_link/else_choice_transition branch_block_stmt_233/if_stmt_291_if_link/if_choice_transition)
  // 	ZJ := 1024 // bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 129
  // ZJ
  STORE_ZJ_298_gather_scatter <=> (assign_stmt_300/STORE_ZJ_298_Sample/STORE_ZJ_298_Split/split_req) (assign_stmt_300/STORE_ZJ_298_Sample/STORE_ZJ_298_Split/split_ack)
  STORE_ZJ_298_store_0 <=> (assign_stmt_300/STORE_ZJ_298_Sample/word_access_start/word_0/rr assign_stmt_300/STORE_ZJ_298_Update/word_access_complete/word_0/cr) (assign_stmt_300/STORE_ZJ_298_Sample/word_access_start/word_0/ra assign_stmt_300/STORE_ZJ_298_Update/word_access_complete/word_0/ca)
  // CP-DP links for do-while  do_while_stmt_302
  //  file prog.linked.opt.aa, line 132
  phi_stmt_304 <=> (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/phi_stmt_304_entry_sample_req branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/phi_stmt_304_loopback_sample_req) (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/phi_stmt_304_phi_mux_ack)
  NM_335_308_buf <=> (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/R_NM_308_Sample/req branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/R_NM_308_Update/req) (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/R_NM_308_Sample/ack branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/R_NM_308_Update/ack)
  // 			wdata := ($cast ($uint<16>) M )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 138
  // M
  // ($cast ($uint<16>) M )
  type_cast_312_inst <=> (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/type_cast_312_Sample/rr branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/type_cast_312_Update/cr) (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/type_cast_312_Sample/ra branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/type_cast_312_Update/ca)
  // 			M_279_delayed_4_0 := M $buffering 4// bits of buffering = 48. 
  //  file prog.linked.opt.aa, line 139
  // M
  W_M_279_delayed_4_0_314_inst <=> (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/assign_stmt_316_Sample/req branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/assign_stmt_316_Update/req) (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/assign_stmt_316_Sample/ack branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/assign_stmt_316_Update/ack)
  // 			addr := ($cast ($uint<12>) (ZJ + M_279_delayed_4_0) )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 140
  // (ZJ + M_279_delayed_4_0)
  // ZJ
  LOAD_ZJ_318_gather_scatter <=> (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/LOAD_ZJ_318_Update/LOAD_ZJ_318_Merge/merge_req) (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/LOAD_ZJ_318_Update/LOAD_ZJ_318_Merge/merge_ack)
  LOAD_ZJ_318_load_0 <=> (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/LOAD_ZJ_318_Sample/word_access_start/word_0/rr branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/LOAD_ZJ_318_Update/word_access_complete/word_0/cr) (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/LOAD_ZJ_318_Sample/word_access_start/word_0/ra branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/LOAD_ZJ_318_Update/word_access_complete/word_0/ca)
  // M_279_delayed_4_0
  // ($cast ($uint<12>) (ZJ + M_279_delayed_4_0) )
  type_cast_321_inst <=> (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/type_cast_321_Sample/rr branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/type_cast_321_Update/cr) (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/type_cast_321_Sample/ra branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/type_cast_321_Update/ca)
  // 			wdata_285_delayed_4_0 := wdata $buffering 4// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 141
  // wdata
  W_wdata_285_delayed_4_0_323_inst <=> (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/assign_stmt_325_Sample/req branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/assign_stmt_325_Update/req) (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/assign_stmt_325_Sample/ack branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/assign_stmt_325_Update/ack)
  // 			$call accessMem (0  addr wdata_285_delayed_4_0 ) (rdata ) 
  //  file prog.linked.opt.aa, line 142
  // addr
  // wdata_285_delayed_4_0
  call_stmt_330_call <=> (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/call_stmt_330_Sample/crr branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/call_stmt_330_Update/ccr) (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/call_stmt_330_Sample/cra branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/call_stmt_330_Update/cca)
  // 			NM := (M + 1 ) $buffering 2// bits of buffering = 24. 
  //  file prog.linked.opt.aa, line 143
  // (M + 1 )
  // M
  ADD_u12_u12_334_inst <=> (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/ADD_u12_u12_334_Sample/rr branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/ADD_u12_u12_334_Update/cr) (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/ADD_u12_u12_334_Sample/ra branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/ADD_u12_u12_334_Update/ca)
  // (NM < 16 )
  // NM
  do_while_stmt_302_branch <=> (branch_block_stmt_301/do_while_stmt_302/do_while_stmt_302_loop_body/condition_evaluated) (branch_block_stmt_301/do_while_stmt_302/loop_exit/ack branch_block_stmt_301/do_while_stmt_302/loop_taken/ack)
}
$module [try1] 
{
  // pipe-declarations for block %try1
  //  file prog.linked.opt.aa, line 147
  // pipe-declarations for block %try1%fetch_kernel
  //  file prog.linked.opt.aa, line 152
  // pipe-declarations for block %try1%entire1
  //  file prog.linked.opt.aa, line 183
  // pipe-declarations for block %try1%entire1%
  //  file prog.linked.opt.aa, line 185
  // pipe-declarations for block %try1%entire1%fetch_mem1
  //  file prog.linked.opt.aa, line 190
  // pipe-declarations for block %try1%entire1%entire
  //  file prog.linked.opt.aa, line 224
  // pipe-declarations for block %try1%entire1%entire%
  //  file prog.linked.opt.aa, line 226
  // pipe-declarations for block %try1%entire1%entire%dot
  //  file prog.linked.opt.aa, line 231
  // pipe-declarations for block %try1%entire1%entire%rearrange_image
  //  file prog.linked.opt.aa, line 251
  // memory-space 7 is written into.
  // memory-space 3 is written into.
  // memory-space 2 is written into.
  // memory-space 0 is written into.
  // memory-space 4 is written into.
  // memory-space 5 is read from.
  // memory-space 7 is read from.
  // memory-space 3 is read from.
  // memory-space 2 is read from.
  // memory-space 6 is read from.
  // memory-space 1 is read from.
  // memory-space 0 is read from.
  // memory-space 8 is read from.
  // memory-space 4 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_343] // Branch Block  file prog.linked.opt.aa, line 152
    {
      $P [branch_block_stmt_343__entry__]
      branch_block_stmt_343__entry__ <-| ($entry)
      $P [branch_block_stmt_343__exit__]
      branch_block_stmt_343__exit__ |-> ($exit)
      $P [do_while_stmt_344__entry__] 
      $P [do_while_stmt_344__exit__] 
      // do-while-statement  
      //  file prog.linked.opt.aa, line 154
      <o> [do_while_stmt_344]  $depth 7 $buffering 2 
      {
        $P[do_while_stmt_344__entry__] 
        $P[do_while_stmt_344__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_344_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_346
          // 			$phi T := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  NT $on   $loopback 
          // type of target is $uint<12>
          $T[phi_stmt_346_sample_start_] 
          $T[phi_stmt_346_sample_completed_] 
          $T[phi_stmt_346_update_start_] 
          $T[phi_stmt_346_update_completed_] 
          $T[phi_stmt_346_sample_start__ps] 
          phi_stmt_346_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_346_sample_completed__ps] 
          phi_stmt_346_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_346_update_start__ps] 
          phi_stmt_346_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_346_update_completed__ps] 
          phi_stmt_346_update_completed_ <-& (phi_stmt_346_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_346_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_346_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_346_update_start_)
          $T[phi_stmt_346_loopback_trigger] 
          phi_stmt_346_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_346_loopback_sample_req] 
          $T[phi_stmt_346_loopback_sample_req_ps] 
          phi_stmt_346_loopback_sample_req <-& (phi_stmt_346_loopback_sample_req_ps)
          phi_stmt_346_loopback_sample_req &-> ($null)
          $T[phi_stmt_346_entry_trigger] 
          phi_stmt_346_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_346_entry_sample_req] 
          $T[phi_stmt_346_entry_sample_req_ps] 
          phi_stmt_346_entry_sample_req <-& (phi_stmt_346_entry_sample_req_ps)
          phi_stmt_346_entry_sample_req &-> ($null)
          phi_stmt_346_update_start_ o<-& (phi_stmt_346_update_completed_ 0)
          phi_stmt_346_sample_start_ o<-& (phi_stmt_346_sample_completed_ 1)
          $T[phi_stmt_346_merged_reqs] 
          $T[phi_stmt_346_phi_mux_ack] 
          $T[phi_stmt_346_phi_mux_ack_ps] 
          phi_stmt_346_phi_mux_ack_ps <-& (phi_stmt_346_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_346_update_completed_)
          $T[type_cast_349_sample_start__ps] 
          $T[type_cast_349_sample_completed__ps] 
          $T[type_cast_349_update_start__ps] 
          $T[type_cast_349_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_349_sample_start_] 
          $T[type_cast_349_sample_completed_] 
          type_cast_349_sample_completed_ <-& (type_cast_349_sample_start_)
          $T[type_cast_349_update_start_] 
          $T [type_cast_349_update_completed_] $delay 
          type_cast_349_update_completed_ <-& (type_cast_349_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_349_sample_start_ <-& (type_cast_349_sample_start__ps)
          type_cast_349_update_start_ <-& (type_cast_349_update_start__ps)
          // Phi complete dependency.
          type_cast_349_sample_completed__ps <-& (type_cast_349_sample_completed_)
          type_cast_349_update_completed__ps <-& (type_cast_349_update_completed_)
          $T[R_NT_350_sample_start__ps] 
          $T[R_NT_350_sample_completed__ps] 
          $T[R_NT_350_update_start__ps] 
          $T[R_NT_350_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_NT_350_sample_start_] 
          $T[R_NT_350_sample_completed_] 
          $T[R_NT_350_update_start_] 
          $T[R_NT_350_update_completed_] 
          ;;[R_NT_350_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_NT_350_sample_start_ &-> (R_NT_350_Sample)
          R_NT_350_sample_completed_ <-& (R_NT_350_Sample)
          ;;[R_NT_350_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_NT_350_update_start_ &-> (R_NT_350_Update)
          R_NT_350_update_completed_ <-& (R_NT_350_Update)
          // RAW reenables for NT
          // Phi start dependency for implicit/constant alternative.
          R_NT_350_sample_start_ <-& (R_NT_350_sample_start__ps)
          R_NT_350_update_start_ <-& (R_NT_350_update_start__ps)
          // Phi complete dependency.
          R_NT_350_sample_completed__ps <-& (R_NT_350_sample_completed_)
          R_NT_350_update_completed__ps <-& (R_NT_350_update_completed_)
          $phisequencer [ phi_stmt_346_phi_seq] : 
          phi_stmt_346_entry_trigger type_cast_349_sample_start__ps type_cast_349_sample_completed__ps type_cast_349_update_start__ps type_cast_349_update_completed__ps phi_stmt_346_loopback_trigger R_NT_350_sample_start__ps R_NT_350_sample_completed__ps R_NT_350_update_start__ps R_NT_350_update_completed__ps :
          phi_stmt_346_sample_start__ps phi_stmt_346_sample_completed__ps phi_stmt_346_update_start__ps phi_stmt_346_update_completed__ps :
          phi_stmt_346_entry_sample_req_ps phi_stmt_346_loopback_sample_req_ps : 
          phi_stmt_346_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_346
          // start:  			T_310_delayed_4_0 := T $buffering 4// bits of buffering = 48. 
          //  file prog.linked.opt.aa, line 160
          $T[assign_stmt_354_sample_start_] 
          $T[assign_stmt_354_sample_completed_] 
          $T[assign_stmt_354_update_start_] 
          $T[assign_stmt_354_update_completed_] 
          // Source expression
          // T
          // Target expression
          // (as target) T_310_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_354_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_354_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_354_sample_start_ &-> (assign_stmt_354_Sample)
          assign_stmt_354_sample_completed_ <-& (assign_stmt_354_Sample)
          assign_stmt_354_sample_completed_ &-> ($null)
          assign_stmt_354_update_start_ &-> (assign_stmt_354_Update)
          assign_stmt_354_update_completed_ <-& (assign_stmt_354_Update)
          // start: Forward dependencies from T to transition assign_stmt_354_sample_start_
          assign_stmt_354_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from T to transition assign_stmt_354_sample_start_
          // RAW reenables for T
          phi_stmt_346_update_start_ o<-& (assign_stmt_354_sample_completed_ 0)
          // self-release: 
          assign_stmt_354_sample_start_ o<-& (assign_stmt_354_sample_completed_ 1)
          $null &-> (assign_stmt_354_update_start_)
          assign_stmt_354_update_start_ o<-& (assign_stmt_354_update_completed_ 0)
          // start: WAR dependencies for T_310_delayed_4_0
          // done: WAR dependencies for T_310_delayed_4_0
          // end:  			T_310_delayed_4_0 := T $buffering 4// bits of buffering = 48. 
          // start:  			NNNT := (T_310_delayed_4_0 + ZJ)// bits of buffering = 12. 
          //  file prog.linked.opt.aa, line 161
          // Source expression
          // (T_310_delayed_4_0 + ZJ)
          $T[ADD_u12_u12_358_sample_start_] 
          $T[ADD_u12_u12_358_sample_completed_] 
          $T[ADD_u12_u12_358_update_start_] 
          $T[ADD_u12_u12_358_update_completed_] 
          // T_310_delayed_4_0
          // ZJ
          $T[LOAD_ZJ_357_sample_start_] 
          $T[LOAD_ZJ_357_sample_completed_] 
          $T[LOAD_ZJ_357_update_start_] 
          $T[LOAD_ZJ_357_update_completed_] 
          $T[LOAD_ZJ_357_word_address_calculated] 
          $T[LOAD_ZJ_357_root_address_calculated] 
          LOAD_ZJ_357_word_address_calculated <-& (LOAD_ZJ_357_root_address_calculated)
          ;;[LOAD_ZJ_357_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[LOAD_ZJ_357_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[LOAD_ZJ_357_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          LOAD_ZJ_357_sample_start_ <-& (LOAD_ZJ_357_word_address_calculated)
          // reenable-joins
          LOAD_ZJ_357_sample_start_ &-> (LOAD_ZJ_357_Sample)
          LOAD_ZJ_357_sample_completed_ <-& (LOAD_ZJ_357_Sample)
          LOAD_ZJ_357_sample_completed_ &-> ($null)
          LOAD_ZJ_357_update_start_ &-> (LOAD_ZJ_357_Update)
          LOAD_ZJ_357_update_completed_ <-& (LOAD_ZJ_357_Update)
          // self-release: 
          LOAD_ZJ_357_sample_start_ o<-& (LOAD_ZJ_357_sample_completed_ 1)
          $null &-> (LOAD_ZJ_357_update_start_)
          LOAD_ZJ_357_update_start_ o<-& (LOAD_ZJ_357_update_completed_ 0)
          // start: Forward dependencies from T_310_delayed_4_0 to transition ADD_u12_u12_358_sample_start_
          ADD_u12_u12_358_sample_start_ <-& (assign_stmt_354_update_completed_)
          // done: Forward dependencies from T_310_delayed_4_0 to transition ADD_u12_u12_358_sample_start_
          // start: Forward dependencies from ZJ to transition ADD_u12_u12_358_sample_start_
          ADD_u12_u12_358_sample_start_ <-& (LOAD_ZJ_357_update_completed_)
          // done: Forward dependencies from ZJ to transition ADD_u12_u12_358_sample_start_
          ;;[ADD_u12_u12_358_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u12_u12_358_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u12_u12_358_sample_start_ &-> (ADD_u12_u12_358_Sample)
          ADD_u12_u12_358_sample_completed_ <-& (ADD_u12_u12_358_Sample)
          ADD_u12_u12_358_sample_completed_ &-> ($null)
          ADD_u12_u12_358_update_start_ &-> (ADD_u12_u12_358_Update)
          ADD_u12_u12_358_update_completed_ <-& (ADD_u12_u12_358_Update)
          // RAW reenables for T_310_delayed_4_0
          assign_stmt_354_update_start_ o<-& (ADD_u12_u12_358_sample_completed_ 0)
          // RAW reenables for ZJ
          LOAD_ZJ_357_update_start_ o<-& (ADD_u12_u12_358_sample_completed_ 0)
          // self-release: 
          ADD_u12_u12_358_sample_start_ o<-& (ADD_u12_u12_358_sample_completed_ 1)
          $null &-> (ADD_u12_u12_358_update_start_)
          ADD_u12_u12_358_update_start_ o<-& (ADD_u12_u12_358_update_completed_ 0)
          // Target expression
          // (as target) NNNT
          // start: WAR dependencies for NNNT
          // done: WAR dependencies for NNNT
          // end:  			NNNT := (T_310_delayed_4_0 + ZJ)// bits of buffering = 12. 
          // start:  			NTT := ($bitcast ($uint<31>) NNNT )// bits of buffering = 31. 
          //  file prog.linked.opt.aa, line 162
          // Source expression
          // ($bitcast ($uint<31>) NNNT )
          $T[type_cast_363_sample_start_] 
          $T[type_cast_363_sample_completed_] 
          $T[type_cast_363_update_start_] 
          $T[type_cast_363_update_completed_] 
          // NNNT
          // start: Forward dependencies from NNNT to transition type_cast_363_sample_start_
          type_cast_363_sample_start_ <-& (ADD_u12_u12_358_update_completed_)
          // done: Forward dependencies from NNNT to transition type_cast_363_sample_start_
          ;;[type_cast_363_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_363_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_363_sample_start_ &-> (type_cast_363_Sample)
          type_cast_363_sample_completed_ <-& (type_cast_363_Sample)
          type_cast_363_sample_completed_ &-> ($null)
          type_cast_363_update_start_ &-> (type_cast_363_Update)
          type_cast_363_update_completed_ <-& (type_cast_363_Update)
          // RAW reenables for NNNT
          ADD_u12_u12_358_update_start_ o<-& (type_cast_363_sample_completed_ 0)
          // self-release: 
          type_cast_363_sample_start_ o<-& (type_cast_363_sample_completed_ 1)
          $null &-> (type_cast_363_update_start_)
          type_cast_363_update_start_ o<-& (type_cast_363_update_completed_ 0)
          // Target expression
          // (as target) NTT
          // start: WAR dependencies for NTT
          // done: WAR dependencies for NTT
          // end:  			NTT := ($bitcast ($uint<31>) NNNT )// bits of buffering = 31. 
          // start:  			NNT := (one && NTT)// bits of buffering = 32. 
          //  file prog.linked.opt.aa, line 163
          // Source expression
          // (one && NTT)
          $T[CONCAT_u1_u32_368_sample_start_] 
          $T[CONCAT_u1_u32_368_sample_completed_] 
          $T[CONCAT_u1_u32_368_update_start_] 
          $T[CONCAT_u1_u32_368_update_completed_] 
          // one
          $T[LOAD_one_366_sample_start_] 
          $T[LOAD_one_366_sample_completed_] 
          $T[LOAD_one_366_update_start_] 
          $T[LOAD_one_366_update_completed_] 
          $T[LOAD_one_366_word_address_calculated] 
          $T[LOAD_one_366_root_address_calculated] 
          LOAD_one_366_word_address_calculated <-& (LOAD_one_366_root_address_calculated)
          ;;[LOAD_one_366_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[LOAD_one_366_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[LOAD_one_366_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          LOAD_one_366_sample_start_ <-& (LOAD_one_366_word_address_calculated)
          // reenable-joins
          LOAD_one_366_sample_start_ &-> (LOAD_one_366_Sample)
          LOAD_one_366_sample_completed_ <-& (LOAD_one_366_Sample)
          LOAD_one_366_sample_completed_ &-> ($null)
          LOAD_one_366_update_start_ &-> (LOAD_one_366_Update)
          LOAD_one_366_update_completed_ <-& (LOAD_one_366_Update)
          // self-release: 
          LOAD_one_366_sample_start_ o<-& (LOAD_one_366_sample_completed_ 1)
          $null &-> (LOAD_one_366_update_start_)
          LOAD_one_366_update_start_ o<-& (LOAD_one_366_update_completed_ 0)
          // NTT
          // start: Forward dependencies from one to transition CONCAT_u1_u32_368_sample_start_
          CONCAT_u1_u32_368_sample_start_ <-& (LOAD_one_366_update_completed_)
          // done: Forward dependencies from one to transition CONCAT_u1_u32_368_sample_start_
          // start: Forward dependencies from NTT to transition CONCAT_u1_u32_368_sample_start_
          CONCAT_u1_u32_368_sample_start_ <-& (type_cast_363_update_completed_)
          // done: Forward dependencies from NTT to transition CONCAT_u1_u32_368_sample_start_
          ;;[CONCAT_u1_u32_368_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u1_u32_368_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u1_u32_368_sample_start_ &-> (CONCAT_u1_u32_368_Sample)
          CONCAT_u1_u32_368_sample_completed_ <-& (CONCAT_u1_u32_368_Sample)
          CONCAT_u1_u32_368_sample_completed_ &-> ($null)
          CONCAT_u1_u32_368_update_start_ &-> (CONCAT_u1_u32_368_Update)
          CONCAT_u1_u32_368_update_completed_ <-& (CONCAT_u1_u32_368_Update)
          // RAW reenables for one
          LOAD_one_366_update_start_ o<-& (CONCAT_u1_u32_368_sample_completed_ 0)
          // RAW reenables for NTT
          type_cast_363_update_start_ o<-& (CONCAT_u1_u32_368_sample_completed_ 0)
          // self-release: 
          CONCAT_u1_u32_368_sample_start_ o<-& (CONCAT_u1_u32_368_sample_completed_ 1)
          $null &-> (CONCAT_u1_u32_368_update_start_)
          CONCAT_u1_u32_368_update_start_ o<-& (CONCAT_u1_u32_368_update_completed_ 0)
          // Target expression
          // (as target) NNT
          // start: WAR dependencies for NNT
          // done: WAR dependencies for NNT
          // end:  			NNT := (one && NTT)// bits of buffering = 32. 
          // start: 			$call accMemAccessDaemon (NNT ) (rdatalk rdatahk ) 
          //  file prog.linked.opt.aa, line 164
          $T[call_stmt_373_sample_start_] 
          $T[call_stmt_373_sample_completed_] 
          $T[call_stmt_373_update_start_] 
          $T[call_stmt_373_update_completed_] 
          // Call input argument 0
          // NNT
          // start: Forward dependencies from NNT to transition call_stmt_373_sample_start_
          call_stmt_373_sample_start_ <-& (CONCAT_u1_u32_368_update_completed_)
          // done: Forward dependencies from NNT to transition call_stmt_373_sample_start_
          // RAW reenables for NNT
          CONCAT_u1_u32_368_update_start_ o<-& (call_stmt_373_sample_completed_ 0)
          ;;[call_stmt_373_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_373_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_373_sample_start_ &-> (call_stmt_373_Sample)
          call_stmt_373_sample_completed_ <-& (call_stmt_373_Sample)
          call_stmt_373_sample_completed_ &-> ($null)
          call_stmt_373_update_start_ &-> (call_stmt_373_Update)
          call_stmt_373_update_completed_ <-& (call_stmt_373_Update)
          // Call output argument 0
          // (as target) rdatalk
          // Call output argument 1
          // (as target) rdatahk
          // self-release: 
          call_stmt_373_sample_start_ o<-& (call_stmt_373_sample_completed_ 1)
          $null &-> (call_stmt_373_update_start_)
          call_stmt_373_update_start_ o<-& (call_stmt_373_update_completed_ 0)
          // start: WAR dependencies for rdatalk
          // done: WAR dependencies for rdatalk
          // start: WAR dependencies for rdatahk
          // done: WAR dependencies for rdatahk
          // end: 			$call accMemAccessDaemon (NNT ) (rdatalk rdatahk ) 
          // start:  			rdatak1 := ( $slice rdatalk 31 16 ) // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 165
          // Source expression
          // ( $slice rdatalk 31 16 ) 
          $T[slice_376_sample_start_] 
          $T[slice_376_sample_completed_] 
          $T[slice_376_update_start_] 
          $T[slice_376_update_completed_] 
          // rdatalk
          // start: Forward dependencies from rdatalk to transition slice_376_sample_start_
          slice_376_sample_start_ <-& (call_stmt_373_update_completed_)
          // done: Forward dependencies from rdatalk to transition slice_376_sample_start_
          ;;[slice_376_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_376_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_376_sample_start_ &-> (slice_376_Sample)
          slice_376_sample_completed_ <-& (slice_376_Sample)
          slice_376_sample_completed_ &-> ($null)
          slice_376_update_start_ &-> (slice_376_Update)
          slice_376_update_completed_ <-& (slice_376_Update)
          // RAW reenables for rdatalk
          call_stmt_373_update_start_ o<-& (slice_376_sample_completed_ 0)
          // self-release: 
          slice_376_sample_start_ o<-& (slice_376_sample_completed_ 1)
          $null &-> (slice_376_update_start_)
          slice_376_update_start_ o<-& (slice_376_update_completed_ 0)
          // Target expression
          // (as target) rdatak1
          // start: WAR dependencies for rdatak1
          // done: WAR dependencies for rdatak1
          // end:  			rdatak1 := ( $slice rdatalk 31 16 ) // bits of buffering = 16. 
          // start:  			rdatak0 := ( $slice rdatalk 15 0 ) // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 166
          // Source expression
          // ( $slice rdatalk 15 0 ) 
          $T[slice_380_sample_start_] 
          $T[slice_380_sample_completed_] 
          $T[slice_380_update_start_] 
          $T[slice_380_update_completed_] 
          // rdatalk
          // start: Forward dependencies from rdatalk to transition slice_380_sample_start_
          slice_380_sample_start_ <-& (call_stmt_373_update_completed_)
          // done: Forward dependencies from rdatalk to transition slice_380_sample_start_
          ;;[slice_380_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_380_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_380_sample_start_ &-> (slice_380_Sample)
          slice_380_sample_completed_ <-& (slice_380_Sample)
          slice_380_sample_completed_ &-> ($null)
          slice_380_update_start_ &-> (slice_380_Update)
          slice_380_update_completed_ <-& (slice_380_Update)
          // RAW reenables for rdatalk
          call_stmt_373_update_start_ o<-& (slice_380_sample_completed_ 0)
          // self-release: 
          slice_380_sample_start_ o<-& (slice_380_sample_completed_ 1)
          $null &-> (slice_380_update_start_)
          slice_380_update_start_ o<-& (slice_380_update_completed_ 0)
          // Target expression
          // (as target) rdatak0
          // start: WAR dependencies for rdatak0
          // done: WAR dependencies for rdatak0
          // end:  			rdatak0 := ( $slice rdatalk 15 0 ) // bits of buffering = 16. 
          // start:  			TT := (T + 1 )// bits of buffering = 12. 
          //  file prog.linked.opt.aa, line 167
          // Source expression
          // (T + 1 )
          $T[ADD_u12_u12_385_sample_start_] 
          $T[ADD_u12_u12_385_sample_completed_] 
          $T[ADD_u12_u12_385_update_start_] 
          $T[ADD_u12_u12_385_update_completed_] 
          // T
          // start: Forward dependencies from T to transition ADD_u12_u12_385_sample_start_
          ADD_u12_u12_385_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from T to transition ADD_u12_u12_385_sample_start_
          ;;[ADD_u12_u12_385_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u12_u12_385_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u12_u12_385_sample_start_ &-> (ADD_u12_u12_385_Sample)
          ADD_u12_u12_385_sample_completed_ <-& (ADD_u12_u12_385_Sample)
          ADD_u12_u12_385_sample_completed_ &-> ($null)
          ADD_u12_u12_385_update_start_ &-> (ADD_u12_u12_385_Update)
          ADD_u12_u12_385_update_completed_ <-& (ADD_u12_u12_385_Update)
          // RAW reenables for T
          phi_stmt_346_update_start_ o<-& (ADD_u12_u12_385_sample_completed_ 0)
          // self-release: 
          ADD_u12_u12_385_sample_start_ o<-& (ADD_u12_u12_385_sample_completed_ 1)
          $null &-> (ADD_u12_u12_385_update_start_)
          ADD_u12_u12_385_update_start_ o<-& (ADD_u12_u12_385_update_completed_ 0)
          // Target expression
          // (as target) TT
          // start: WAR dependencies for TT
          // done: WAR dependencies for TT
          // end:  			TT := (T + 1 )// bits of buffering = 12. 
          // start:  			T_341_delayed_12_0 := T $buffering 12// bits of buffering = 144. 
          //  file prog.linked.opt.aa, line 168
          $T[assign_stmt_389_sample_start_] 
          $T[assign_stmt_389_sample_completed_] 
          $T[assign_stmt_389_update_start_] 
          $T[assign_stmt_389_update_completed_] 
          // Source expression
          // T
          // Target expression
          // (as target) T_341_delayed_12_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_389_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_389_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_389_sample_start_ &-> (assign_stmt_389_Sample)
          assign_stmt_389_sample_completed_ <-& (assign_stmt_389_Sample)
          assign_stmt_389_sample_completed_ &-> ($null)
          assign_stmt_389_update_start_ &-> (assign_stmt_389_Update)
          assign_stmt_389_update_completed_ <-& (assign_stmt_389_Update)
          // start: Forward dependencies from T to transition assign_stmt_389_sample_start_
          assign_stmt_389_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from T to transition assign_stmt_389_sample_start_
          // RAW reenables for T
          phi_stmt_346_update_start_ o<-& (assign_stmt_389_sample_completed_ 0)
          // self-release: 
          assign_stmt_389_sample_start_ o<-& (assign_stmt_389_sample_completed_ 1)
          $null &-> (assign_stmt_389_update_start_)
          assign_stmt_389_update_start_ o<-& (assign_stmt_389_update_completed_ 0)
          // start: WAR dependencies for T_341_delayed_12_0
          // done: WAR dependencies for T_341_delayed_12_0
          // end:  			T_341_delayed_12_0 := T $buffering 12// bits of buffering = 144. 
          // start:  			kernel[T_341_delayed_12_0] := rdatak0// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 169
          // Source expression
          // rdatak0
          // Target expression
          // kernel[T_341_delayed_12_0]
          $T[array_obj_ref_391_sample_start_] 
          $T[array_obj_ref_391_sample_completed_] 
          $T[array_obj_ref_391_update_start_] 
          $T[array_obj_ref_391_update_completed_] 
          $T[array_obj_ref_391_word_address_calculated] 
          $T[array_obj_ref_391_root_address_calculated] 
          $T[array_obj_ref_391_offset_calculated] 
          $T[array_obj_ref_391_index_resized_0] 
          $T[array_obj_ref_391_index_scaled_0] 
          $T[array_obj_ref_391_index_computed_0] 
          // T_341_delayed_12_0
          // start: Forward dependencies from T_341_delayed_12_0 to transition array_obj_ref_391_index_computed_0
          array_obj_ref_391_index_computed_0 <-& (assign_stmt_389_update_completed_)
          // done: Forward dependencies from T_341_delayed_12_0 to transition array_obj_ref_391_index_computed_0
          ;;[array_obj_ref_391_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_391_index_computed_0 &-> (array_obj_ref_391_index_resize_0)
          array_obj_ref_391_index_resized_0 <-& (array_obj_ref_391_index_resize_0)
          ;;[array_obj_ref_391_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_391_index_resized_0 &-> (array_obj_ref_391_index_scale_0)
          array_obj_ref_391_index_scaled_0 <-& (array_obj_ref_391_index_scale_0)
          ;;[array_obj_ref_391_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_391_index_scaled_0 &-> (array_obj_ref_391_final_index_sum_regn)
          array_obj_ref_391_offset_calculated <-& (array_obj_ref_391_final_index_sum_regn)
          ;;[array_obj_ref_391_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_391_offset_calculated &-> (array_obj_ref_391_base_plus_offset)
          array_obj_ref_391_root_address_calculated <-& (array_obj_ref_391_base_plus_offset)
          ;;[array_obj_ref_391_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_391_root_address_calculated &-> (array_obj_ref_391_word_addrgen)
          array_obj_ref_391_word_address_calculated <-& (array_obj_ref_391_word_addrgen)
          ;;[array_obj_ref_391_Sample] 
          {
            ;;[array_obj_ref_391_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_391_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_391_sample_start_ <-& (array_obj_ref_391_word_address_calculated)
          // reenable-joins
          assign_stmt_389_update_start_ o<-& (array_obj_ref_391_sample_completed_ 0)
          array_obj_ref_391_sample_start_ &-> (array_obj_ref_391_Sample)
          array_obj_ref_391_sample_completed_ <-& (array_obj_ref_391_Sample)
          array_obj_ref_391_sample_completed_ &-> ($null)
          array_obj_ref_391_update_start_ &-> (array_obj_ref_391_Update)
          array_obj_ref_391_update_completed_ <-& (array_obj_ref_391_Update)
          // self-release: 
          array_obj_ref_391_sample_start_ o<-& (array_obj_ref_391_sample_completed_ 1)
          $null &-> (array_obj_ref_391_update_start_)
          array_obj_ref_391_update_start_ o<-& (array_obj_ref_391_update_completed_ 0)
          // start: Forward dependencies from rdatak0 to transition array_obj_ref_391_sample_start_
          array_obj_ref_391_sample_start_ <-& (slice_380_update_completed_)
          // done: Forward dependencies from rdatak0 to transition array_obj_ref_391_sample_start_
          // RAW reenables for rdatak0
          slice_380_update_start_ o<-& (array_obj_ref_391_sample_completed_ 0)
          // end:  			kernel[T_341_delayed_12_0] := rdatak0// bits of buffering = 16. 
          // start:  			TT_345_delayed_11_0 := TT $buffering 11// bits of buffering = 132. 
          //  file prog.linked.opt.aa, line 170
          $T[assign_stmt_396_sample_start_] 
          $T[assign_stmt_396_sample_completed_] 
          $T[assign_stmt_396_update_start_] 
          $T[assign_stmt_396_update_completed_] 
          // Source expression
          // TT
          // Target expression
          // (as target) TT_345_delayed_11_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_396_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_396_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_396_sample_start_ &-> (assign_stmt_396_Sample)
          assign_stmt_396_sample_completed_ <-& (assign_stmt_396_Sample)
          assign_stmt_396_sample_completed_ &-> ($null)
          assign_stmt_396_update_start_ &-> (assign_stmt_396_Update)
          assign_stmt_396_update_completed_ <-& (assign_stmt_396_Update)
          // start: Forward dependencies from TT to transition assign_stmt_396_sample_start_
          assign_stmt_396_sample_start_ <-& (ADD_u12_u12_385_update_completed_)
          // done: Forward dependencies from TT to transition assign_stmt_396_sample_start_
          // RAW reenables for TT
          ADD_u12_u12_385_update_start_ o<-& (assign_stmt_396_sample_completed_ 0)
          // self-release: 
          assign_stmt_396_sample_start_ o<-& (assign_stmt_396_sample_completed_ 1)
          $null &-> (assign_stmt_396_update_start_)
          assign_stmt_396_update_start_ o<-& (assign_stmt_396_update_completed_ 0)
          // start: WAR dependencies for TT_345_delayed_11_0
          // done: WAR dependencies for TT_345_delayed_11_0
          // end:  			TT_345_delayed_11_0 := TT $buffering 11// bits of buffering = 132. 
          // start:  			kernel[TT_345_delayed_11_0] := rdatak1// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 171
          // Source expression
          // rdatak1
          // Target expression
          // kernel[TT_345_delayed_11_0]
          $T[array_obj_ref_398_sample_start_] 
          $T[array_obj_ref_398_sample_completed_] 
          $T[array_obj_ref_398_update_start_] 
          $T[array_obj_ref_398_update_completed_] 
          $T[array_obj_ref_398_word_address_calculated] 
          $T[array_obj_ref_398_root_address_calculated] 
          $T[array_obj_ref_398_offset_calculated] 
          $T[array_obj_ref_398_index_resized_0] 
          $T[array_obj_ref_398_index_scaled_0] 
          $T[array_obj_ref_398_index_computed_0] 
          // TT_345_delayed_11_0
          // start: Forward dependencies from TT_345_delayed_11_0 to transition array_obj_ref_398_index_computed_0
          array_obj_ref_398_index_computed_0 <-& (assign_stmt_396_update_completed_)
          // done: Forward dependencies from TT_345_delayed_11_0 to transition array_obj_ref_398_index_computed_0
          ;;[array_obj_ref_398_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_398_index_computed_0 &-> (array_obj_ref_398_index_resize_0)
          array_obj_ref_398_index_resized_0 <-& (array_obj_ref_398_index_resize_0)
          ;;[array_obj_ref_398_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_398_index_resized_0 &-> (array_obj_ref_398_index_scale_0)
          array_obj_ref_398_index_scaled_0 <-& (array_obj_ref_398_index_scale_0)
          ;;[array_obj_ref_398_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_398_index_scaled_0 &-> (array_obj_ref_398_final_index_sum_regn)
          array_obj_ref_398_offset_calculated <-& (array_obj_ref_398_final_index_sum_regn)
          ;;[array_obj_ref_398_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_398_offset_calculated &-> (array_obj_ref_398_base_plus_offset)
          array_obj_ref_398_root_address_calculated <-& (array_obj_ref_398_base_plus_offset)
          ;;[array_obj_ref_398_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_398_root_address_calculated &-> (array_obj_ref_398_word_addrgen)
          array_obj_ref_398_word_address_calculated <-& (array_obj_ref_398_word_addrgen)
          ;;[array_obj_ref_398_Sample] 
          {
            ;;[array_obj_ref_398_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_398_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_398_sample_start_ <-& (array_obj_ref_398_word_address_calculated)
          // reenable-joins
          assign_stmt_396_update_start_ o<-& (array_obj_ref_398_sample_completed_ 0)
          array_obj_ref_398_sample_start_ &-> (array_obj_ref_398_Sample)
          array_obj_ref_398_sample_completed_ <-& (array_obj_ref_398_Sample)
          array_obj_ref_398_sample_completed_ &-> ($null)
          array_obj_ref_398_update_start_ &-> (array_obj_ref_398_Update)
          array_obj_ref_398_update_completed_ <-& (array_obj_ref_398_Update)
          // self-release: 
          array_obj_ref_398_sample_start_ o<-& (array_obj_ref_398_sample_completed_ 1)
          $null &-> (array_obj_ref_398_update_start_)
          array_obj_ref_398_update_start_ o<-& (array_obj_ref_398_update_completed_ 0)
          // start: Forward dependencies from rdatak1 to transition array_obj_ref_398_sample_start_
          array_obj_ref_398_sample_start_ <-& (slice_376_update_completed_)
          // done: Forward dependencies from rdatak1 to transition array_obj_ref_398_sample_start_
          // RAW reenables for rdatak1
          slice_376_update_start_ o<-& (array_obj_ref_398_sample_completed_ 0)
          // end:  			kernel[TT_345_delayed_11_0] := rdatak1// bits of buffering = 16. 
          // start:  			rdatak3 := ( $slice rdatahk 31 16 ) // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 172
          // Source expression
          // ( $slice rdatahk 31 16 ) 
          $T[slice_403_sample_start_] 
          $T[slice_403_sample_completed_] 
          $T[slice_403_update_start_] 
          $T[slice_403_update_completed_] 
          // rdatahk
          // start: Forward dependencies from rdatahk to transition slice_403_sample_start_
          slice_403_sample_start_ <-& (call_stmt_373_update_completed_)
          // done: Forward dependencies from rdatahk to transition slice_403_sample_start_
          ;;[slice_403_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_403_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_403_sample_start_ &-> (slice_403_Sample)
          slice_403_sample_completed_ <-& (slice_403_Sample)
          slice_403_sample_completed_ &-> ($null)
          slice_403_update_start_ &-> (slice_403_Update)
          slice_403_update_completed_ <-& (slice_403_Update)
          // RAW reenables for rdatahk
          call_stmt_373_update_start_ o<-& (slice_403_sample_completed_ 0)
          // self-release: 
          slice_403_sample_start_ o<-& (slice_403_sample_completed_ 1)
          $null &-> (slice_403_update_start_)
          slice_403_update_start_ o<-& (slice_403_update_completed_ 0)
          // Target expression
          // (as target) rdatak3
          // start: WAR dependencies for rdatak3
          // done: WAR dependencies for rdatak3
          // end:  			rdatak3 := ( $slice rdatahk 31 16 ) // bits of buffering = 16. 
          // start:  			rdatak2 := ( $slice rdatahk 15 0 ) // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 173
          // Source expression
          // ( $slice rdatahk 15 0 ) 
          $T[slice_407_sample_start_] 
          $T[slice_407_sample_completed_] 
          $T[slice_407_update_start_] 
          $T[slice_407_update_completed_] 
          // rdatahk
          // start: Forward dependencies from rdatahk to transition slice_407_sample_start_
          slice_407_sample_start_ <-& (call_stmt_373_update_completed_)
          // done: Forward dependencies from rdatahk to transition slice_407_sample_start_
          ;;[slice_407_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_407_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_407_sample_start_ &-> (slice_407_Sample)
          slice_407_sample_completed_ <-& (slice_407_Sample)
          slice_407_sample_completed_ &-> ($null)
          slice_407_update_start_ &-> (slice_407_Update)
          slice_407_update_completed_ <-& (slice_407_Update)
          // RAW reenables for rdatahk
          call_stmt_373_update_start_ o<-& (slice_407_sample_completed_ 0)
          // self-release: 
          slice_407_sample_start_ o<-& (slice_407_sample_completed_ 1)
          $null &-> (slice_407_update_start_)
          slice_407_update_start_ o<-& (slice_407_update_completed_ 0)
          // Target expression
          // (as target) rdatak2
          // start: WAR dependencies for rdatak2
          // done: WAR dependencies for rdatak2
          // end:  			rdatak2 := ( $slice rdatahk 15 0 ) // bits of buffering = 16. 
          // start:  			TTT := (T + 2 )// bits of buffering = 12. 
          //  file prog.linked.opt.aa, line 174
          // Source expression
          // (T + 2 )
          $T[ADD_u12_u12_412_sample_start_] 
          $T[ADD_u12_u12_412_sample_completed_] 
          $T[ADD_u12_u12_412_update_start_] 
          $T[ADD_u12_u12_412_update_completed_] 
          // T
          // start: Forward dependencies from T to transition ADD_u12_u12_412_sample_start_
          ADD_u12_u12_412_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from T to transition ADD_u12_u12_412_sample_start_
          ;;[ADD_u12_u12_412_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u12_u12_412_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u12_u12_412_sample_start_ &-> (ADD_u12_u12_412_Sample)
          ADD_u12_u12_412_sample_completed_ <-& (ADD_u12_u12_412_Sample)
          ADD_u12_u12_412_sample_completed_ &-> ($null)
          ADD_u12_u12_412_update_start_ &-> (ADD_u12_u12_412_Update)
          ADD_u12_u12_412_update_completed_ <-& (ADD_u12_u12_412_Update)
          // RAW reenables for T
          phi_stmt_346_update_start_ o<-& (ADD_u12_u12_412_sample_completed_ 0)
          // self-release: 
          ADD_u12_u12_412_sample_start_ o<-& (ADD_u12_u12_412_sample_completed_ 1)
          $null &-> (ADD_u12_u12_412_update_start_)
          ADD_u12_u12_412_update_start_ o<-& (ADD_u12_u12_412_update_completed_ 0)
          // Target expression
          // (as target) TTT
          // start: WAR dependencies for TTT
          // done: WAR dependencies for TTT
          // end:  			TTT := (T + 2 )// bits of buffering = 12. 
          // start:  			TTTT := (T + 3 )// bits of buffering = 12. 
          //  file prog.linked.opt.aa, line 175
          // Source expression
          // (T + 3 )
          $T[ADD_u12_u12_417_sample_start_] 
          $T[ADD_u12_u12_417_sample_completed_] 
          $T[ADD_u12_u12_417_update_start_] 
          $T[ADD_u12_u12_417_update_completed_] 
          // T
          // start: Forward dependencies from T to transition ADD_u12_u12_417_sample_start_
          ADD_u12_u12_417_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from T to transition ADD_u12_u12_417_sample_start_
          ;;[ADD_u12_u12_417_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u12_u12_417_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u12_u12_417_sample_start_ &-> (ADD_u12_u12_417_Sample)
          ADD_u12_u12_417_sample_completed_ <-& (ADD_u12_u12_417_Sample)
          ADD_u12_u12_417_sample_completed_ &-> ($null)
          ADD_u12_u12_417_update_start_ &-> (ADD_u12_u12_417_Update)
          ADD_u12_u12_417_update_completed_ <-& (ADD_u12_u12_417_Update)
          // RAW reenables for T
          phi_stmt_346_update_start_ o<-& (ADD_u12_u12_417_sample_completed_ 0)
          // self-release: 
          ADD_u12_u12_417_sample_start_ o<-& (ADD_u12_u12_417_sample_completed_ 1)
          $null &-> (ADD_u12_u12_417_update_start_)
          ADD_u12_u12_417_update_start_ o<-& (ADD_u12_u12_417_update_completed_ 0)
          // Target expression
          // (as target) TTTT
          // start: WAR dependencies for TTTT
          // done: WAR dependencies for TTTT
          // end:  			TTTT := (T + 3 )// bits of buffering = 12. 
          // start:  			TTT_367_delayed_11_0 := TTT $buffering 11// bits of buffering = 132. 
          //  file prog.linked.opt.aa, line 176
          $T[assign_stmt_421_sample_start_] 
          $T[assign_stmt_421_sample_completed_] 
          $T[assign_stmt_421_update_start_] 
          $T[assign_stmt_421_update_completed_] 
          // Source expression
          // TTT
          // Target expression
          // (as target) TTT_367_delayed_11_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_421_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_421_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_421_sample_start_ &-> (assign_stmt_421_Sample)
          assign_stmt_421_sample_completed_ <-& (assign_stmt_421_Sample)
          assign_stmt_421_sample_completed_ &-> ($null)
          assign_stmt_421_update_start_ &-> (assign_stmt_421_Update)
          assign_stmt_421_update_completed_ <-& (assign_stmt_421_Update)
          // start: Forward dependencies from TTT to transition assign_stmt_421_sample_start_
          assign_stmt_421_sample_start_ <-& (ADD_u12_u12_412_update_completed_)
          // done: Forward dependencies from TTT to transition assign_stmt_421_sample_start_
          // RAW reenables for TTT
          ADD_u12_u12_412_update_start_ o<-& (assign_stmt_421_sample_completed_ 0)
          // self-release: 
          assign_stmt_421_sample_start_ o<-& (assign_stmt_421_sample_completed_ 1)
          $null &-> (assign_stmt_421_update_start_)
          assign_stmt_421_update_start_ o<-& (assign_stmt_421_update_completed_ 0)
          // start: WAR dependencies for TTT_367_delayed_11_0
          // done: WAR dependencies for TTT_367_delayed_11_0
          // end:  			TTT_367_delayed_11_0 := TTT $buffering 11// bits of buffering = 132. 
          // start:  			kernel[TTT_367_delayed_11_0] := rdatak2// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 177
          // Source expression
          // rdatak2
          // Target expression
          // kernel[TTT_367_delayed_11_0]
          $T[array_obj_ref_423_sample_start_] 
          $T[array_obj_ref_423_sample_completed_] 
          $T[array_obj_ref_423_update_start_] 
          $T[array_obj_ref_423_update_completed_] 
          $T[array_obj_ref_423_word_address_calculated] 
          $T[array_obj_ref_423_root_address_calculated] 
          $T[array_obj_ref_423_offset_calculated] 
          $T[array_obj_ref_423_index_resized_0] 
          $T[array_obj_ref_423_index_scaled_0] 
          $T[array_obj_ref_423_index_computed_0] 
          // TTT_367_delayed_11_0
          // start: Forward dependencies from TTT_367_delayed_11_0 to transition array_obj_ref_423_index_computed_0
          array_obj_ref_423_index_computed_0 <-& (assign_stmt_421_update_completed_)
          // done: Forward dependencies from TTT_367_delayed_11_0 to transition array_obj_ref_423_index_computed_0
          ;;[array_obj_ref_423_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_423_index_computed_0 &-> (array_obj_ref_423_index_resize_0)
          array_obj_ref_423_index_resized_0 <-& (array_obj_ref_423_index_resize_0)
          ;;[array_obj_ref_423_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_423_index_resized_0 &-> (array_obj_ref_423_index_scale_0)
          array_obj_ref_423_index_scaled_0 <-& (array_obj_ref_423_index_scale_0)
          ;;[array_obj_ref_423_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_423_index_scaled_0 &-> (array_obj_ref_423_final_index_sum_regn)
          array_obj_ref_423_offset_calculated <-& (array_obj_ref_423_final_index_sum_regn)
          ;;[array_obj_ref_423_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_423_offset_calculated &-> (array_obj_ref_423_base_plus_offset)
          array_obj_ref_423_root_address_calculated <-& (array_obj_ref_423_base_plus_offset)
          ;;[array_obj_ref_423_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_423_root_address_calculated &-> (array_obj_ref_423_word_addrgen)
          array_obj_ref_423_word_address_calculated <-& (array_obj_ref_423_word_addrgen)
          ;;[array_obj_ref_423_Sample] 
          {
            ;;[array_obj_ref_423_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_423_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_423_sample_start_ <-& (array_obj_ref_423_word_address_calculated)
          // reenable-joins
          assign_stmt_421_update_start_ o<-& (array_obj_ref_423_sample_completed_ 0)
          array_obj_ref_423_sample_start_ &-> (array_obj_ref_423_Sample)
          array_obj_ref_423_sample_completed_ <-& (array_obj_ref_423_Sample)
          array_obj_ref_423_sample_completed_ &-> ($null)
          array_obj_ref_423_update_start_ &-> (array_obj_ref_423_Update)
          array_obj_ref_423_update_completed_ <-& (array_obj_ref_423_Update)
          // self-release: 
          array_obj_ref_423_sample_start_ o<-& (array_obj_ref_423_sample_completed_ 1)
          $null &-> (array_obj_ref_423_update_start_)
          array_obj_ref_423_update_start_ o<-& (array_obj_ref_423_update_completed_ 0)
          // start: Forward dependencies from rdatak2 to transition array_obj_ref_423_sample_start_
          array_obj_ref_423_sample_start_ <-& (slice_407_update_completed_)
          // done: Forward dependencies from rdatak2 to transition array_obj_ref_423_sample_start_
          // RAW reenables for rdatak2
          slice_407_update_start_ o<-& (array_obj_ref_423_sample_completed_ 0)
          // end:  			kernel[TTT_367_delayed_11_0] := rdatak2// bits of buffering = 16. 
          // start:  			TTTT_371_delayed_11_0 := TTTT $buffering 11// bits of buffering = 132. 
          //  file prog.linked.opt.aa, line 178
          $T[assign_stmt_428_sample_start_] 
          $T[assign_stmt_428_sample_completed_] 
          $T[assign_stmt_428_update_start_] 
          $T[assign_stmt_428_update_completed_] 
          // Source expression
          // TTTT
          // Target expression
          // (as target) TTTT_371_delayed_11_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_428_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_428_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_428_sample_start_ &-> (assign_stmt_428_Sample)
          assign_stmt_428_sample_completed_ <-& (assign_stmt_428_Sample)
          assign_stmt_428_sample_completed_ &-> ($null)
          assign_stmt_428_update_start_ &-> (assign_stmt_428_Update)
          assign_stmt_428_update_completed_ <-& (assign_stmt_428_Update)
          // start: Forward dependencies from TTTT to transition assign_stmt_428_sample_start_
          assign_stmt_428_sample_start_ <-& (ADD_u12_u12_417_update_completed_)
          // done: Forward dependencies from TTTT to transition assign_stmt_428_sample_start_
          // RAW reenables for TTTT
          ADD_u12_u12_417_update_start_ o<-& (assign_stmt_428_sample_completed_ 0)
          // self-release: 
          assign_stmt_428_sample_start_ o<-& (assign_stmt_428_sample_completed_ 1)
          $null &-> (assign_stmt_428_update_start_)
          assign_stmt_428_update_start_ o<-& (assign_stmt_428_update_completed_ 0)
          // start: WAR dependencies for TTTT_371_delayed_11_0
          // done: WAR dependencies for TTTT_371_delayed_11_0
          // end:  			TTTT_371_delayed_11_0 := TTTT $buffering 11// bits of buffering = 132. 
          // start:  			kernel[TTTT_371_delayed_11_0] := rdatak3// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 179
          // Source expression
          // rdatak3
          // Target expression
          // kernel[TTTT_371_delayed_11_0]
          $T[array_obj_ref_430_sample_start_] 
          $T[array_obj_ref_430_sample_completed_] 
          $T[array_obj_ref_430_update_start_] 
          $T[array_obj_ref_430_update_completed_] 
          $T[array_obj_ref_430_word_address_calculated] 
          $T[array_obj_ref_430_root_address_calculated] 
          $T[array_obj_ref_430_offset_calculated] 
          $T[array_obj_ref_430_index_resized_0] 
          $T[array_obj_ref_430_index_scaled_0] 
          $T[array_obj_ref_430_index_computed_0] 
          // TTTT_371_delayed_11_0
          // start: Forward dependencies from TTTT_371_delayed_11_0 to transition array_obj_ref_430_index_computed_0
          array_obj_ref_430_index_computed_0 <-& (assign_stmt_428_update_completed_)
          // done: Forward dependencies from TTTT_371_delayed_11_0 to transition array_obj_ref_430_index_computed_0
          ;;[array_obj_ref_430_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_430_index_computed_0 &-> (array_obj_ref_430_index_resize_0)
          array_obj_ref_430_index_resized_0 <-& (array_obj_ref_430_index_resize_0)
          ;;[array_obj_ref_430_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_430_index_resized_0 &-> (array_obj_ref_430_index_scale_0)
          array_obj_ref_430_index_scaled_0 <-& (array_obj_ref_430_index_scale_0)
          ;;[array_obj_ref_430_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_430_index_scaled_0 &-> (array_obj_ref_430_final_index_sum_regn)
          array_obj_ref_430_offset_calculated <-& (array_obj_ref_430_final_index_sum_regn)
          ;;[array_obj_ref_430_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_430_offset_calculated &-> (array_obj_ref_430_base_plus_offset)
          array_obj_ref_430_root_address_calculated <-& (array_obj_ref_430_base_plus_offset)
          ;;[array_obj_ref_430_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_430_root_address_calculated &-> (array_obj_ref_430_word_addrgen)
          array_obj_ref_430_word_address_calculated <-& (array_obj_ref_430_word_addrgen)
          ;;[array_obj_ref_430_Sample] 
          {
            ;;[array_obj_ref_430_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_430_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_430_sample_start_ <-& (array_obj_ref_430_word_address_calculated)
          // reenable-joins
          assign_stmt_428_update_start_ o<-& (array_obj_ref_430_sample_completed_ 0)
          array_obj_ref_430_sample_start_ &-> (array_obj_ref_430_Sample)
          array_obj_ref_430_sample_completed_ <-& (array_obj_ref_430_Sample)
          array_obj_ref_430_sample_completed_ &-> ($null)
          array_obj_ref_430_update_start_ &-> (array_obj_ref_430_Update)
          array_obj_ref_430_update_completed_ <-& (array_obj_ref_430_Update)
          // self-release: 
          array_obj_ref_430_sample_start_ o<-& (array_obj_ref_430_sample_completed_ 1)
          $null &-> (array_obj_ref_430_update_start_)
          array_obj_ref_430_update_start_ o<-& (array_obj_ref_430_update_completed_ 0)
          // start: Forward dependencies from rdatak3 to transition array_obj_ref_430_sample_start_
          array_obj_ref_430_sample_start_ <-& (slice_403_update_completed_)
          // done: Forward dependencies from rdatak3 to transition array_obj_ref_430_sample_start_
          // RAW reenables for rdatak3
          slice_403_update_start_ o<-& (array_obj_ref_430_sample_completed_ 0)
          // end:  			kernel[TTTT_371_delayed_11_0] := rdatak3// bits of buffering = 16. 
          // start:  			NT := (T + 4 )// bits of buffering = 12. 
          //  file prog.linked.opt.aa, line 180
          // Source expression
          // (T + 4 )
          $T[ADD_u12_u12_436_sample_start_] 
          $T[ADD_u12_u12_436_sample_completed_] 
          $T[ADD_u12_u12_436_update_start_] 
          $T[ADD_u12_u12_436_update_completed_] 
          // T
          // start: Forward dependencies from T to transition ADD_u12_u12_436_sample_start_
          ADD_u12_u12_436_sample_start_ <-& (phi_stmt_346_update_completed_)
          // done: Forward dependencies from T to transition ADD_u12_u12_436_sample_start_
          ;;[ADD_u12_u12_436_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u12_u12_436_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u12_u12_436_sample_start_ &-> (ADD_u12_u12_436_Sample)
          ADD_u12_u12_436_sample_completed_ <-& (ADD_u12_u12_436_Sample)
          ADD_u12_u12_436_sample_completed_ &-> ($null)
          ADD_u12_u12_436_update_start_ &-> (ADD_u12_u12_436_Update)
          ADD_u12_u12_436_update_completed_ <-& (ADD_u12_u12_436_Update)
          // RAW reenables for T
          phi_stmt_346_update_start_ o<-& (ADD_u12_u12_436_sample_completed_ 0)
          // self-release: 
          ADD_u12_u12_436_sample_start_ o<-& (ADD_u12_u12_436_sample_completed_ 1)
          $null &-> (ADD_u12_u12_436_update_start_)
          ADD_u12_u12_436_update_start_ o<-& (ADD_u12_u12_436_update_completed_ 0)
          // Target expression
          // (as target) NT
          // start: WAR dependencies for NT
          // WAR dependency: Read: NT before Write: 			NT := (T + 4 )// bits of buffering = 12. 
          ADD_u12_u12_436_update_start_ <-& (phi_stmt_346_sample_completed_)
          phi_stmt_346_sample_start_ o<-& (ADD_u12_u12_436_update_completed_ 0)
          // WAR dependency: release  Read: NT with Write: 			NT := (T + 4 )// bits of buffering = 12. 
          // done: WAR dependencies for NT
          // end:  			NT := (T + 4 ) $buffering 2// bits of buffering = 24. 
          // (NT < 16 )
          // NT
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (NT < 16 ) to transition condition_evaluated
          condition_evaluated <-& (ADD_u12_u12_436_update_completed_)
          // done: Forward dependencies from (NT < 16 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_5
          //  call_stmt_373 store
          // reenable across ring for memory space memory_space_5
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_6
          //  LOAD_one_366 load
          // reenable across ring for memory space memory_space_6
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_1
          //  LOAD_ZJ_357 load
          // reenable across ring for memory space memory_space_1
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_4
          //  array_obj_ref_391 store
          //  array_obj_ref_398 store
          $T [array_obj_ref_391_array_obj_ref_398_delay] $delay
          // array_obj_ref_391(store) -> array_obj_ref_398(store)
          array_obj_ref_398_sample_start_ <-& (array_obj_ref_391_array_obj_ref_398_delay)
          array_obj_ref_391_array_obj_ref_398_delay <-& (array_obj_ref_391_sample_completed_)
          //  array_obj_ref_423 store
          $T [array_obj_ref_398_array_obj_ref_423_delay] $delay
          // array_obj_ref_398(store) -> array_obj_ref_423(store)
          array_obj_ref_423_sample_start_ <-& (array_obj_ref_398_array_obj_ref_423_delay)
          array_obj_ref_398_array_obj_ref_423_delay <-& (array_obj_ref_398_sample_completed_)
          //  array_obj_ref_430 store
          $T [array_obj_ref_423_array_obj_ref_430_delay] $delay
          // array_obj_ref_423(store) -> array_obj_ref_430(store)
          array_obj_ref_430_sample_start_ <-& (array_obj_ref_423_array_obj_ref_430_delay)
          array_obj_ref_423_array_obj_ref_430_delay <-& (array_obj_ref_423_sample_completed_)
          // reenable across ring for memory space memory_space_4
          $T[ring_reenable_memory_space_4] 
          // ordered memory-subsystem.
          ring_reenable_memory_space_4 <-& (array_obj_ref_430_sample_completed_)
          array_obj_ref_391_sample_start_ o<-& (ring_reenable_memory_space_4 1)
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_344__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_344_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_344__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_344_loop_body : condition_evaluated
        $bind do_while_stmt_344__entry__  => do_while_stmt_344_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_344_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_344__exit__)
      }
      do_while_stmt_344__entry__ |-> (do_while_stmt_344)
      do_while_stmt_344__exit__ <-| (do_while_stmt_344)
      do_while_stmt_344__entry__ <-| (branch_block_stmt_343__entry__)
      do_while_stmt_344__exit__ |-> (branch_block_stmt_343__exit__)
    }
    <>[branch_block_stmt_443] // Branch Block  file prog.linked.opt.aa, line 183
    {
      $P [branch_block_stmt_443__entry__]
      branch_block_stmt_443__entry__ <-| ($entry)
      $P [branch_block_stmt_443__exit__]
      branch_block_stmt_443__exit__ |-> ($exit)
      $P [merge_stmt_444__entry__] 
      $P [merge_stmt_444__exit__] 
      $P [assign_stmt_453__entry__] 
      $P [assign_stmt_453__exit__] 
      $P [branch_block_stmt_454__entry__] 
      $P [branch_block_stmt_454__exit__] 
      $P [branch_block_stmt_565__entry__] 
      $P [branch_block_stmt_565__exit__] 
      $P [assign_stmt_742__entry__] 
      $P [assign_stmt_742__exit__] 
      $P [if_stmt_743__entry__] 
      $P [if_stmt_743__exit__] 
      ::[assign_stmt_453] 
      {
        // start:  		PJ := 0 // bits of buffering = 16. 
        //  file prog.linked.opt.aa, line 189
        // Target expression
        // (as target) PJ
        $T[STORE_PJ_451_sample_start_] 
        $T[STORE_PJ_451_sample_completed_] 
        $T[STORE_PJ_451_update_start_] 
        $T[STORE_PJ_451_update_completed_] 
        // PJ
        $T[STORE_PJ_451_word_address_calculated] 
        $T[STORE_PJ_451_root_address_calculated] 
        STORE_PJ_451_word_address_calculated <-& (STORE_PJ_451_root_address_calculated)
        ;;[STORE_PJ_451_Sample] 
        {
          ;;[STORE_PJ_451_Split] 
          {
            $T [split_req] $T [split_ack]
          }
          ||[word_access_start] 
          {
            ;;[word_0] 
            {
              $T [rr] $T [ra] 
            }
          }
        }
        ;;[STORE_PJ_451_Update] 
        {
          ||[word_access_complete] 
          {
            ;;[word_0] 
            {
              $T [cr] $T [ca] 
            }
          }
        }
        STORE_PJ_451_sample_start_ <-& (STORE_PJ_451_word_address_calculated)
        STORE_PJ_451_sample_start_ &-> (STORE_PJ_451_Sample)
        STORE_PJ_451_sample_completed_ <-& (STORE_PJ_451_Sample)
        STORE_PJ_451_sample_completed_ &-> ($null)
        STORE_PJ_451_update_start_ &-> (STORE_PJ_451_Update)
        STORE_PJ_451_update_completed_ <-& (STORE_PJ_451_Update)
        // end:  		PJ := 0 // bits of buffering = 16. 
        // load-store dependencies..
        // memory-space  memory_space_0
        //  STORE_PJ_451 store
      }
      assign_stmt_453__entry__ |-> (assign_stmt_453)
      assign_stmt_453__exit__ <-| (assign_stmt_453)
      <>[branch_block_stmt_454] // Branch Block  file prog.linked.opt.aa, line 190
      {
        $P [branch_block_stmt_454__entry__]
        branch_block_stmt_454__entry__ <-| ($entry)
        $P [branch_block_stmt_454__exit__]
        branch_block_stmt_454__exit__ |-> ($exit)
        $P [do_while_stmt_455__entry__] 
        $P [do_while_stmt_455__exit__] 
        // do-while-statement  
        //  file prog.linked.opt.aa, line 192
        <o> [do_while_stmt_455]  $depth 7 $buffering 2 
        {
          $P[do_while_stmt_455__entry__] 
          $P[do_while_stmt_455__exit__] 
          $P[loop_back] 
          $P[condition_done] 
          $P[loop_body_done] 
          $pipeline [do_while_stmt_455_loop_body] 
          {
            // Pipelined!
            $T[back_edge_to_loop_body] 
            $T[first_time_through_loop_body] 
            $T[loop_body_start] 
            $T[condition_evaluated] 
            $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
            $entry <-& (loop_body_start)
            $T[aggregated_phi_sample_req] 
            $T[aggregated_phi_sample_ack] 
            $T[aggregated_phi_update_req] 
            $T[aggregated_phi_update_ack] 
            // do not loop-back unless all phi's have used up their triggering tokens.
            condition_evaluated <-& (aggregated_phi_update_ack)
            aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
            // start:  PHI statement phi_stmt_457
            // 				$phi J := 				  ($bitcast ($uint<12>) 0  ) $on   $entry 				  NJ $on   $loopback 
            // type of target is $uint<12>
            $T[phi_stmt_457_sample_start_] 
            $T[phi_stmt_457_sample_completed_] 
            $T[phi_stmt_457_update_start_] 
            $T[phi_stmt_457_update_completed_] 
            $T[phi_stmt_457_sample_start__ps] 
            phi_stmt_457_sample_start__ps <-& (aggregated_phi_sample_req)
            $T[phi_stmt_457_sample_completed__ps] 
            phi_stmt_457_sample_completed__ps &-> (aggregated_phi_sample_ack)
            $T[phi_stmt_457_update_start__ps] 
            phi_stmt_457_update_start__ps <-& (aggregated_phi_update_req)
            $T[phi_stmt_457_update_completed__ps] 
            phi_stmt_457_update_completed_ <-& (phi_stmt_457_update_completed__ps)
            aggregated_phi_sample_req <-& (phi_stmt_457_sample_start_)
            aggregated_phi_sample_ack &-> (phi_stmt_457_sample_completed_)
            aggregated_phi_update_req <-& (phi_stmt_457_update_start_)
            $T[phi_stmt_457_loopback_trigger] 
            phi_stmt_457_loopback_trigger <-& (back_edge_to_loop_body)
            $T[phi_stmt_457_loopback_sample_req] 
            $T[phi_stmt_457_loopback_sample_req_ps] 
            phi_stmt_457_loopback_sample_req <-& (phi_stmt_457_loopback_sample_req_ps)
            phi_stmt_457_loopback_sample_req &-> ($null)
            $T[phi_stmt_457_entry_trigger] 
            phi_stmt_457_entry_trigger <-& (first_time_through_loop_body)
            $T[phi_stmt_457_entry_sample_req] 
            $T[phi_stmt_457_entry_sample_req_ps] 
            phi_stmt_457_entry_sample_req <-& (phi_stmt_457_entry_sample_req_ps)
            phi_stmt_457_entry_sample_req &-> ($null)
            phi_stmt_457_update_start_ o<-& (phi_stmt_457_update_completed_ 0)
            phi_stmt_457_sample_start_ o<-& (phi_stmt_457_sample_completed_ 1)
            $T[phi_stmt_457_merged_reqs] 
            $T[phi_stmt_457_phi_mux_ack] 
            $T[phi_stmt_457_phi_mux_ack_ps] 
            phi_stmt_457_phi_mux_ack_ps <-& (phi_stmt_457_phi_mux_ack)
            aggregated_phi_update_ack <-& (phi_stmt_457_update_completed_)
            $T[type_cast_460_sample_start__ps] 
            $T[type_cast_460_sample_completed__ps] 
            $T[type_cast_460_update_start__ps] 
            $T[type_cast_460_update_completed__ps] 
            // dummies for constant expression source for phi
            $T[type_cast_460_sample_start_] 
            $T[type_cast_460_sample_completed_] 
            type_cast_460_sample_completed_ <-& (type_cast_460_sample_start_)
            $T[type_cast_460_update_start_] 
            $T [type_cast_460_update_completed_] $delay 
            type_cast_460_update_completed_ <-& (type_cast_460_update_start_)
            // Phi start dependency for implicit/constant alternative.
            type_cast_460_sample_start_ <-& (type_cast_460_sample_start__ps)
            type_cast_460_update_start_ <-& (type_cast_460_update_start__ps)
            // Phi complete dependency.
            type_cast_460_sample_completed__ps <-& (type_cast_460_sample_completed_)
            type_cast_460_update_completed__ps <-& (type_cast_460_update_completed_)
            $T[R_NJ_461_sample_start__ps] 
            $T[R_NJ_461_sample_completed__ps] 
            $T[R_NJ_461_update_start__ps] 
            $T[R_NJ_461_update_completed__ps] 
            // interlock for implicit-variable-ref/signal-read in Phi alternative 1
            $T[R_NJ_461_sample_start_] 
            $T[R_NJ_461_sample_completed_] 
            $T[R_NJ_461_update_start_] 
            $T[R_NJ_461_update_completed_] 
            ;;[R_NJ_461_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            R_NJ_461_sample_start_ &-> (R_NJ_461_Sample)
            R_NJ_461_sample_completed_ <-& (R_NJ_461_Sample)
            ;;[R_NJ_461_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            R_NJ_461_update_start_ &-> (R_NJ_461_Update)
            R_NJ_461_update_completed_ <-& (R_NJ_461_Update)
            // RAW reenables for NJ
            // Phi start dependency for implicit/constant alternative.
            R_NJ_461_sample_start_ <-& (R_NJ_461_sample_start__ps)
            R_NJ_461_update_start_ <-& (R_NJ_461_update_start__ps)
            // Phi complete dependency.
            R_NJ_461_sample_completed__ps <-& (R_NJ_461_sample_completed_)
            R_NJ_461_update_completed__ps <-& (R_NJ_461_update_completed_)
            $phisequencer [ phi_stmt_457_phi_seq] : 
            phi_stmt_457_entry_trigger type_cast_460_sample_start__ps type_cast_460_sample_completed__ps type_cast_460_update_start__ps type_cast_460_update_completed__ps phi_stmt_457_loopback_trigger R_NJ_461_sample_start__ps R_NJ_461_sample_completed__ps R_NJ_461_update_start__ps R_NJ_461_update_completed__ps :
            phi_stmt_457_sample_start__ps phi_stmt_457_sample_completed__ps phi_stmt_457_update_start__ps phi_stmt_457_update_completed__ps :
            phi_stmt_457_entry_sample_req_ps phi_stmt_457_loopback_sample_req_ps : 
            phi_stmt_457_phi_mux_ack_ps
            // done: PHI Statement phi_stmt_457
            // start:  				NJJ := ($bitcast ($uint<31>) J )// bits of buffering = 31. 
            //  file prog.linked.opt.aa, line 198
            // Source expression
            // ($bitcast ($uint<31>) J )
            $T[type_cast_465_sample_start_] 
            $T[type_cast_465_sample_completed_] 
            $T[type_cast_465_update_start_] 
            $T[type_cast_465_update_completed_] 
            // J
            // start: Forward dependencies from J to transition type_cast_465_sample_start_
            type_cast_465_sample_start_ <-& (phi_stmt_457_update_completed_)
            // done: Forward dependencies from J to transition type_cast_465_sample_start_
            ;;[type_cast_465_Sample] 
            {
              // unary expression 
              $T [rr] $T [ra] // (split) unary operation
            }
            ;;[type_cast_465_Update] 
            {
              // unary expression 
              $T [cr] $T [ca] //(split) unary operation
            }
            type_cast_465_sample_start_ &-> (type_cast_465_Sample)
            type_cast_465_sample_completed_ <-& (type_cast_465_Sample)
            type_cast_465_sample_completed_ &-> ($null)
            type_cast_465_update_start_ &-> (type_cast_465_Update)
            type_cast_465_update_completed_ <-& (type_cast_465_Update)
            // RAW reenables for J
            phi_stmt_457_update_start_ o<-& (type_cast_465_sample_completed_ 0)
            // self-release: 
            type_cast_465_sample_start_ o<-& (type_cast_465_sample_completed_ 1)
            $null &-> (type_cast_465_update_start_)
            type_cast_465_update_start_ o<-& (type_cast_465_update_completed_ 0)
            // Target expression
            // (as target) NJJ
            // start: WAR dependencies for NJJ
            // done: WAR dependencies for NJJ
            // end:  				NJJ := ($bitcast ($uint<31>) J )// bits of buffering = 31. 
            // start:  				NGG := ($bitcast ($uint<32>) G )// bits of buffering = 32. 
            //  file prog.linked.opt.aa, line 199
            // Source expression
            // ($bitcast ($uint<32>) G )
            $T[type_cast_469_sample_start_] 
            $T[type_cast_469_sample_completed_] 
            $T[type_cast_469_update_start_] 
            $T[type_cast_469_update_completed_] 
            // G
            // start: Forward dependencies from G to transition type_cast_469_sample_start_
            // done: Forward dependencies from G to transition type_cast_469_sample_start_
            ;;[type_cast_469_Sample] 
            {
              // unary expression 
              $T [rr] $T [ra] // (split) unary operation
            }
            ;;[type_cast_469_Update] 
            {
              // unary expression 
              $T [cr] $T [ca] //(split) unary operation
            }
            type_cast_469_sample_start_ &-> (type_cast_469_Sample)
            type_cast_469_sample_completed_ <-& (type_cast_469_Sample)
            type_cast_469_sample_completed_ &-> ($null)
            type_cast_469_update_start_ &-> (type_cast_469_Update)
            type_cast_469_update_completed_ <-& (type_cast_469_Update)
            // RAW reenables for G
            // self-release: 
            type_cast_469_sample_start_ o<-& (type_cast_469_sample_completed_ 1)
            $null &-> (type_cast_469_update_start_)
            type_cast_469_update_start_ o<-& (type_cast_469_update_completed_ 0)
            // Target expression
            // (as target) NGG
            // start: WAR dependencies for NGG
            // done: WAR dependencies for NGG
            // end:  				NGG := ($bitcast ($uint<32>) G )// bits of buffering = 32. 
            // start:  				NJJ_415_delayed_2_0 := NJJ $buffering 2// bits of buffering = 62. 
            //  file prog.linked.opt.aa, line 200
            $T[assign_stmt_473_sample_start_] 
            $T[assign_stmt_473_sample_completed_] 
            $T[assign_stmt_473_update_start_] 
            $T[assign_stmt_473_update_completed_] 
            // Source expression
            // NJJ
            // Target expression
            // (as target) NJJ_415_delayed_2_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_473_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_473_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_473_sample_start_ &-> (assign_stmt_473_Sample)
            assign_stmt_473_sample_completed_ <-& (assign_stmt_473_Sample)
            assign_stmt_473_sample_completed_ &-> ($null)
            assign_stmt_473_update_start_ &-> (assign_stmt_473_Update)
            assign_stmt_473_update_completed_ <-& (assign_stmt_473_Update)
            // start: Forward dependencies from NJJ to transition assign_stmt_473_sample_start_
            assign_stmt_473_sample_start_ <-& (type_cast_465_update_completed_)
            // done: Forward dependencies from NJJ to transition assign_stmt_473_sample_start_
            // RAW reenables for NJJ
            type_cast_465_update_start_ o<-& (assign_stmt_473_sample_completed_ 0)
            // self-release: 
            assign_stmt_473_sample_start_ o<-& (assign_stmt_473_sample_completed_ 1)
            $null &-> (assign_stmt_473_update_start_)
            assign_stmt_473_update_start_ o<-& (assign_stmt_473_update_completed_ 0)
            // start: WAR dependencies for NJJ_415_delayed_2_0
            // done: WAR dependencies for NJJ_415_delayed_2_0
            // end:  				NJJ_415_delayed_2_0 := NJJ $buffering 2// bits of buffering = 62. 
            // start:  				NNG := (one && NJJ_415_delayed_2_0)// bits of buffering = 32. 
            //  file prog.linked.opt.aa, line 201
            // Source expression
            // (one && NJJ_415_delayed_2_0)
            $T[CONCAT_u1_u32_477_sample_start_] 
            $T[CONCAT_u1_u32_477_sample_completed_] 
            $T[CONCAT_u1_u32_477_update_start_] 
            $T[CONCAT_u1_u32_477_update_completed_] 
            // one
            $T[LOAD_one_475_sample_start_] 
            $T[LOAD_one_475_sample_completed_] 
            $T[LOAD_one_475_update_start_] 
            $T[LOAD_one_475_update_completed_] 
            $T[LOAD_one_475_word_address_calculated] 
            $T[LOAD_one_475_root_address_calculated] 
            LOAD_one_475_word_address_calculated <-& (LOAD_one_475_root_address_calculated)
            ;;[LOAD_one_475_Sample] 
            {
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[LOAD_one_475_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
              ;;[LOAD_one_475_Merge] 
              {
                $T [merge_req] $T [merge_ack]
              }
            }
            LOAD_one_475_sample_start_ <-& (LOAD_one_475_word_address_calculated)
            // reenable-joins
            LOAD_one_475_sample_start_ &-> (LOAD_one_475_Sample)
            LOAD_one_475_sample_completed_ <-& (LOAD_one_475_Sample)
            LOAD_one_475_sample_completed_ &-> ($null)
            LOAD_one_475_update_start_ &-> (LOAD_one_475_Update)
            LOAD_one_475_update_completed_ <-& (LOAD_one_475_Update)
            // self-release: 
            LOAD_one_475_sample_start_ o<-& (LOAD_one_475_sample_completed_ 1)
            $null &-> (LOAD_one_475_update_start_)
            LOAD_one_475_update_start_ o<-& (LOAD_one_475_update_completed_ 0)
            // NJJ_415_delayed_2_0
            // start: Forward dependencies from one to transition CONCAT_u1_u32_477_sample_start_
            CONCAT_u1_u32_477_sample_start_ <-& (LOAD_one_475_update_completed_)
            // done: Forward dependencies from one to transition CONCAT_u1_u32_477_sample_start_
            // start: Forward dependencies from NJJ_415_delayed_2_0 to transition CONCAT_u1_u32_477_sample_start_
            CONCAT_u1_u32_477_sample_start_ <-& (assign_stmt_473_update_completed_)
            // done: Forward dependencies from NJJ_415_delayed_2_0 to transition CONCAT_u1_u32_477_sample_start_
            ;;[CONCAT_u1_u32_477_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[CONCAT_u1_u32_477_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            CONCAT_u1_u32_477_sample_start_ &-> (CONCAT_u1_u32_477_Sample)
            CONCAT_u1_u32_477_sample_completed_ <-& (CONCAT_u1_u32_477_Sample)
            CONCAT_u1_u32_477_sample_completed_ &-> ($null)
            CONCAT_u1_u32_477_update_start_ &-> (CONCAT_u1_u32_477_Update)
            CONCAT_u1_u32_477_update_completed_ <-& (CONCAT_u1_u32_477_Update)
            // RAW reenables for one
            LOAD_one_475_update_start_ o<-& (CONCAT_u1_u32_477_sample_completed_ 0)
            // RAW reenables for NJJ_415_delayed_2_0
            assign_stmt_473_update_start_ o<-& (CONCAT_u1_u32_477_sample_completed_ 0)
            // self-release: 
            CONCAT_u1_u32_477_sample_start_ o<-& (CONCAT_u1_u32_477_sample_completed_ 1)
            $null &-> (CONCAT_u1_u32_477_update_start_)
            CONCAT_u1_u32_477_update_start_ o<-& (CONCAT_u1_u32_477_update_completed_ 0)
            // Target expression
            // (as target) NNG
            // start: WAR dependencies for NNG
            // done: WAR dependencies for NNG
            // end:  				NNG := (one && NJJ_415_delayed_2_0)// bits of buffering = 32. 
            // start:  				NGG_420_delayed_4_0 := NGG $buffering 4// bits of buffering = 128. 
            //  file prog.linked.opt.aa, line 202
            $T[assign_stmt_481_sample_start_] 
            $T[assign_stmt_481_sample_completed_] 
            $T[assign_stmt_481_update_start_] 
            $T[assign_stmt_481_update_completed_] 
            // Source expression
            // NGG
            // Target expression
            // (as target) NGG_420_delayed_4_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_481_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_481_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_481_sample_start_ &-> (assign_stmt_481_Sample)
            assign_stmt_481_sample_completed_ <-& (assign_stmt_481_Sample)
            assign_stmt_481_sample_completed_ &-> ($null)
            assign_stmt_481_update_start_ &-> (assign_stmt_481_Update)
            assign_stmt_481_update_completed_ <-& (assign_stmt_481_Update)
            // start: Forward dependencies from NGG to transition assign_stmt_481_sample_start_
            assign_stmt_481_sample_start_ <-& (type_cast_469_update_completed_)
            // done: Forward dependencies from NGG to transition assign_stmt_481_sample_start_
            // RAW reenables for NGG
            type_cast_469_update_start_ o<-& (assign_stmt_481_sample_completed_ 0)
            // self-release: 
            assign_stmt_481_sample_start_ o<-& (assign_stmt_481_sample_completed_ 1)
            $null &-> (assign_stmt_481_update_start_)
            assign_stmt_481_update_start_ o<-& (assign_stmt_481_update_completed_ 0)
            // start: WAR dependencies for NGG_420_delayed_4_0
            // done: WAR dependencies for NGG_420_delayed_4_0
            // end:  				NGG_420_delayed_4_0 := NGG $buffering 4// bits of buffering = 128. 
            // start:  				NNJ := (NNG + NGG_420_delayed_4_0)// bits of buffering = 32. 
            //  file prog.linked.opt.aa, line 203
            // Source expression
            // (NNG + NGG_420_delayed_4_0)
            $T[ADD_u32_u32_485_sample_start_] 
            $T[ADD_u32_u32_485_sample_completed_] 
            $T[ADD_u32_u32_485_update_start_] 
            $T[ADD_u32_u32_485_update_completed_] 
            // NNG
            // NGG_420_delayed_4_0
            // start: Forward dependencies from NNG to transition ADD_u32_u32_485_sample_start_
            ADD_u32_u32_485_sample_start_ <-& (CONCAT_u1_u32_477_update_completed_)
            // done: Forward dependencies from NNG to transition ADD_u32_u32_485_sample_start_
            // start: Forward dependencies from NGG_420_delayed_4_0 to transition ADD_u32_u32_485_sample_start_
            ADD_u32_u32_485_sample_start_ <-& (assign_stmt_481_update_completed_)
            // done: Forward dependencies from NGG_420_delayed_4_0 to transition ADD_u32_u32_485_sample_start_
            ;;[ADD_u32_u32_485_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[ADD_u32_u32_485_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            ADD_u32_u32_485_sample_start_ &-> (ADD_u32_u32_485_Sample)
            ADD_u32_u32_485_sample_completed_ <-& (ADD_u32_u32_485_Sample)
            ADD_u32_u32_485_sample_completed_ &-> ($null)
            ADD_u32_u32_485_update_start_ &-> (ADD_u32_u32_485_Update)
            ADD_u32_u32_485_update_completed_ <-& (ADD_u32_u32_485_Update)
            // RAW reenables for NNG
            CONCAT_u1_u32_477_update_start_ o<-& (ADD_u32_u32_485_sample_completed_ 0)
            // RAW reenables for NGG_420_delayed_4_0
            assign_stmt_481_update_start_ o<-& (ADD_u32_u32_485_sample_completed_ 0)
            // self-release: 
            ADD_u32_u32_485_sample_start_ o<-& (ADD_u32_u32_485_sample_completed_ 1)
            $null &-> (ADD_u32_u32_485_update_start_)
            ADD_u32_u32_485_update_start_ o<-& (ADD_u32_u32_485_update_completed_ 0)
            // Target expression
            // (as target) NNJ
            // start: WAR dependencies for NNJ
            // done: WAR dependencies for NNJ
            // end:  				NNJ := (NNG + NGG_420_delayed_4_0)// bits of buffering = 32. 
            // start: 				$call accMemAccessDaemon (NNJ ) (rdatal rdatah ) 
            //  file prog.linked.opt.aa, line 204
            $T[call_stmt_490_sample_start_] 
            $T[call_stmt_490_sample_completed_] 
            $T[call_stmt_490_update_start_] 
            $T[call_stmt_490_update_completed_] 
            // Call input argument 0
            // NNJ
            // start: Forward dependencies from NNJ to transition call_stmt_490_sample_start_
            call_stmt_490_sample_start_ <-& (ADD_u32_u32_485_update_completed_)
            // done: Forward dependencies from NNJ to transition call_stmt_490_sample_start_
            // RAW reenables for NNJ
            ADD_u32_u32_485_update_start_ o<-& (call_stmt_490_sample_completed_ 0)
            ;;[call_stmt_490_Sample] 
            {
              $T [crr] $T [cra] 
            }
            ;;[call_stmt_490_Update] 
            {
              $T [ccr] $T [cca] 
            }
            call_stmt_490_sample_start_ &-> (call_stmt_490_Sample)
            call_stmt_490_sample_completed_ <-& (call_stmt_490_Sample)
            call_stmt_490_sample_completed_ &-> ($null)
            call_stmt_490_update_start_ &-> (call_stmt_490_Update)
            call_stmt_490_update_completed_ <-& (call_stmt_490_Update)
            // Call output argument 0
            // (as target) rdatal
            // Call output argument 1
            // (as target) rdatah
            // self-release: 
            call_stmt_490_sample_start_ o<-& (call_stmt_490_sample_completed_ 1)
            $null &-> (call_stmt_490_update_start_)
            call_stmt_490_update_start_ o<-& (call_stmt_490_update_completed_ 0)
            // start: WAR dependencies for rdatal
            // done: WAR dependencies for rdatal
            // start: WAR dependencies for rdatah
            // done: WAR dependencies for rdatah
            // end: 				$call accMemAccessDaemon (NNJ ) (rdatal rdatah ) 
            // start:  				rdatai1 := ( $slice rdatal 31 16 ) // bits of buffering = 16. 
            //  file prog.linked.opt.aa, line 205
            // Source expression
            // ( $slice rdatal 31 16 ) 
            $T[slice_493_sample_start_] 
            $T[slice_493_sample_completed_] 
            $T[slice_493_update_start_] 
            $T[slice_493_update_completed_] 
            // rdatal
            // start: Forward dependencies from rdatal to transition slice_493_sample_start_
            slice_493_sample_start_ <-& (call_stmt_490_update_completed_)
            // done: Forward dependencies from rdatal to transition slice_493_sample_start_
            ;;[slice_493_Sample] 
            {
              // unary expression 
              $T [rr] $T [ra] // (split) unary operation
            }
            ;;[slice_493_Update] 
            {
              // unary expression 
              $T [cr] $T [ca] //(split) unary operation
            }
            slice_493_sample_start_ &-> (slice_493_Sample)
            slice_493_sample_completed_ <-& (slice_493_Sample)
            slice_493_sample_completed_ &-> ($null)
            slice_493_update_start_ &-> (slice_493_Update)
            slice_493_update_completed_ <-& (slice_493_Update)
            // RAW reenables for rdatal
            call_stmt_490_update_start_ o<-& (slice_493_sample_completed_ 0)
            // self-release: 
            slice_493_sample_start_ o<-& (slice_493_sample_completed_ 1)
            $null &-> (slice_493_update_start_)
            slice_493_update_start_ o<-& (slice_493_update_completed_ 0)
            // Target expression
            // (as target) rdatai1
            // start: WAR dependencies for rdatai1
            // done: WAR dependencies for rdatai1
            // end:  				rdatai1 := ( $slice rdatal 31 16 ) // bits of buffering = 16. 
            // start:  				rdatai0 := ( $slice rdatal 15 0 ) // bits of buffering = 16. 
            //  file prog.linked.opt.aa, line 206
            // Source expression
            // ( $slice rdatal 15 0 ) 
            $T[slice_497_sample_start_] 
            $T[slice_497_sample_completed_] 
            $T[slice_497_update_start_] 
            $T[slice_497_update_completed_] 
            // rdatal
            // start: Forward dependencies from rdatal to transition slice_497_sample_start_
            slice_497_sample_start_ <-& (call_stmt_490_update_completed_)
            // done: Forward dependencies from rdatal to transition slice_497_sample_start_
            ;;[slice_497_Sample] 
            {
              // unary expression 
              $T [rr] $T [ra] // (split) unary operation
            }
            ;;[slice_497_Update] 
            {
              // unary expression 
              $T [cr] $T [ca] //(split) unary operation
            }
            slice_497_sample_start_ &-> (slice_497_Sample)
            slice_497_sample_completed_ <-& (slice_497_Sample)
            slice_497_sample_completed_ &-> ($null)
            slice_497_update_start_ &-> (slice_497_Update)
            slice_497_update_completed_ <-& (slice_497_Update)
            // RAW reenables for rdatal
            call_stmt_490_update_start_ o<-& (slice_497_sample_completed_ 0)
            // self-release: 
            slice_497_sample_start_ o<-& (slice_497_sample_completed_ 1)
            $null &-> (slice_497_update_start_)
            slice_497_update_start_ o<-& (slice_497_update_completed_ 0)
            // Target expression
            // (as target) rdatai0
            // start: WAR dependencies for rdatai0
            // done: WAR dependencies for rdatai0
            // end:  				rdatai0 := ( $slice rdatal 15 0 ) // bits of buffering = 16. 
            // start:  				PPJ := (PJ + 1 )// bits of buffering = 16. 
            //  file prog.linked.opt.aa, line 207
            // Source expression
            // (PJ + 1 )
            $T[ADD_u16_u16_502_sample_start_] 
            $T[ADD_u16_u16_502_sample_completed_] 
            $T[ADD_u16_u16_502_update_start_] 
            $T[ADD_u16_u16_502_update_completed_] 
            // PJ
            $T[LOAD_PJ_500_sample_start_] 
            $T[LOAD_PJ_500_sample_completed_] 
            $T[LOAD_PJ_500_update_start_] 
            $T[LOAD_PJ_500_update_completed_] 
            $T[LOAD_PJ_500_word_address_calculated] 
            $T[LOAD_PJ_500_root_address_calculated] 
            LOAD_PJ_500_word_address_calculated <-& (LOAD_PJ_500_root_address_calculated)
            ;;[LOAD_PJ_500_Sample] 
            {
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[LOAD_PJ_500_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
              ;;[LOAD_PJ_500_Merge] 
              {
                $T [merge_req] $T [merge_ack]
              }
            }
            LOAD_PJ_500_sample_start_ <-& (LOAD_PJ_500_word_address_calculated)
            // reenable-joins
            LOAD_PJ_500_sample_start_ &-> (LOAD_PJ_500_Sample)
            LOAD_PJ_500_sample_completed_ <-& (LOAD_PJ_500_Sample)
            LOAD_PJ_500_sample_completed_ &-> ($null)
            LOAD_PJ_500_update_start_ &-> (LOAD_PJ_500_Update)
            LOAD_PJ_500_update_completed_ <-& (LOAD_PJ_500_Update)
            // self-release: 
            LOAD_PJ_500_sample_start_ o<-& (LOAD_PJ_500_sample_completed_ 1)
            $null &-> (LOAD_PJ_500_update_start_)
            LOAD_PJ_500_update_start_ o<-& (LOAD_PJ_500_update_completed_ 0)
            // start: Forward dependencies from PJ to transition ADD_u16_u16_502_sample_start_
            ADD_u16_u16_502_sample_start_ <-& (LOAD_PJ_500_update_completed_)
            // done: Forward dependencies from PJ to transition ADD_u16_u16_502_sample_start_
            ;;[ADD_u16_u16_502_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[ADD_u16_u16_502_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            ADD_u16_u16_502_sample_start_ &-> (ADD_u16_u16_502_Sample)
            ADD_u16_u16_502_sample_completed_ <-& (ADD_u16_u16_502_Sample)
            ADD_u16_u16_502_sample_completed_ &-> ($null)
            ADD_u16_u16_502_update_start_ &-> (ADD_u16_u16_502_Update)
            ADD_u16_u16_502_update_completed_ <-& (ADD_u16_u16_502_Update)
            // RAW reenables for PJ
            LOAD_PJ_500_update_start_ o<-& (ADD_u16_u16_502_sample_completed_ 0)
            // self-release: 
            ADD_u16_u16_502_sample_start_ o<-& (ADD_u16_u16_502_sample_completed_ 1)
            $null &-> (ADD_u16_u16_502_update_start_)
            ADD_u16_u16_502_update_start_ o<-& (ADD_u16_u16_502_update_completed_ 0)
            // Target expression
            // (as target) PPJ
            // start: WAR dependencies for PPJ
            // done: WAR dependencies for PPJ
            // end:  				PPJ := (PJ + 1 )// bits of buffering = 16. 
            // start:  				PJ_440_delayed_7_0 := PJ $buffering 7// bits of buffering = 112. 
            //  file prog.linked.opt.aa, line 208
            // Source expression
            // PJ
            $T[LOAD_PJ_505_sample_start_] 
            $T[LOAD_PJ_505_sample_completed_] 
            $T[LOAD_PJ_505_update_start_] 
            $T[LOAD_PJ_505_update_completed_] 
            $T[LOAD_PJ_505_word_address_calculated] 
            $T[LOAD_PJ_505_root_address_calculated] 
            LOAD_PJ_505_word_address_calculated <-& (LOAD_PJ_505_root_address_calculated)
            ;;[LOAD_PJ_505_Sample] 
            {
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[LOAD_PJ_505_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
              ;;[LOAD_PJ_505_Merge] 
              {
                $T [merge_req] $T [merge_ack]
              }
            }
            LOAD_PJ_505_sample_start_ <-& (LOAD_PJ_505_word_address_calculated)
            // reenable-joins
            LOAD_PJ_505_sample_start_ &-> (LOAD_PJ_505_Sample)
            LOAD_PJ_505_sample_completed_ <-& (LOAD_PJ_505_Sample)
            LOAD_PJ_505_sample_completed_ &-> ($null)
            LOAD_PJ_505_update_start_ &-> (LOAD_PJ_505_Update)
            LOAD_PJ_505_update_completed_ <-& (LOAD_PJ_505_Update)
            // self-release: 
            LOAD_PJ_505_sample_start_ o<-& (LOAD_PJ_505_sample_completed_ 1)
            $null &-> (LOAD_PJ_505_update_start_)
            LOAD_PJ_505_update_start_ o<-& (LOAD_PJ_505_update_completed_ 0)
            // Target expression
            // (as target) PJ_440_delayed_7_0
            // start: WAR dependencies for PJ_440_delayed_7_0
            // done: WAR dependencies for PJ_440_delayed_7_0
            // end:  				PJ_440_delayed_7_0 := PJ $buffering 7// bits of buffering = 112. 
            // start:  				image[PJ_440_delayed_7_0] := rdatai0// bits of buffering = 16. 
            //  file prog.linked.opt.aa, line 209
            // Source expression
            // rdatai0
            // Target expression
            // image[PJ_440_delayed_7_0]
            $T[array_obj_ref_508_sample_start_] 
            $T[array_obj_ref_508_sample_completed_] 
            $T[array_obj_ref_508_update_start_] 
            $T[array_obj_ref_508_update_completed_] 
            $T[array_obj_ref_508_word_address_calculated] 
            $T[array_obj_ref_508_root_address_calculated] 
            $T[array_obj_ref_508_offset_calculated] 
            $T[array_obj_ref_508_index_resized_0] 
            $T[array_obj_ref_508_index_scaled_0] 
            $T[array_obj_ref_508_index_computed_0] 
            // PJ_440_delayed_7_0
            // start: Forward dependencies from PJ_440_delayed_7_0 to transition array_obj_ref_508_index_computed_0
            array_obj_ref_508_index_computed_0 <-& (LOAD_PJ_505_update_completed_)
            // done: Forward dependencies from PJ_440_delayed_7_0 to transition array_obj_ref_508_index_computed_0
            ;;[array_obj_ref_508_index_resize_0] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_508_index_computed_0 &-> (array_obj_ref_508_index_resize_0)
            array_obj_ref_508_index_resized_0 <-& (array_obj_ref_508_index_resize_0)
            ;;[array_obj_ref_508_index_scale_0] 
            {
              $T [scale_rename_req] $T [scale_rename_ack] // rename 
            }
            array_obj_ref_508_index_resized_0 &-> (array_obj_ref_508_index_scale_0)
            array_obj_ref_508_index_scaled_0 <-& (array_obj_ref_508_index_scale_0)
            ;;[array_obj_ref_508_final_index_sum_regn] 
            {
              $T [req] $T [ack] // rename
            }
            array_obj_ref_508_index_scaled_0 &-> (array_obj_ref_508_final_index_sum_regn)
            array_obj_ref_508_offset_calculated <-& (array_obj_ref_508_final_index_sum_regn)
            ;;[array_obj_ref_508_base_plus_offset] 
            {
              $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
            }
            array_obj_ref_508_offset_calculated &-> (array_obj_ref_508_base_plus_offset)
            array_obj_ref_508_root_address_calculated <-& (array_obj_ref_508_base_plus_offset)
            ;;[array_obj_ref_508_word_addrgen] 
            {
              $T [root_register_req] $T [root_register_ack]
            }
            array_obj_ref_508_root_address_calculated &-> (array_obj_ref_508_word_addrgen)
            array_obj_ref_508_word_address_calculated <-& (array_obj_ref_508_word_addrgen)
            ;;[array_obj_ref_508_Sample] 
            {
              ;;[array_obj_ref_508_Split] 
              {
                $T [split_req] $T [split_ack]
              }
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[array_obj_ref_508_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
            array_obj_ref_508_sample_start_ <-& (array_obj_ref_508_word_address_calculated)
            // reenable-joins
            LOAD_PJ_505_update_start_ o<-& (array_obj_ref_508_sample_completed_ 0)
            array_obj_ref_508_sample_start_ &-> (array_obj_ref_508_Sample)
            array_obj_ref_508_sample_completed_ <-& (array_obj_ref_508_Sample)
            array_obj_ref_508_sample_completed_ &-> ($null)
            array_obj_ref_508_update_start_ &-> (array_obj_ref_508_Update)
            array_obj_ref_508_update_completed_ <-& (array_obj_ref_508_Update)
            // self-release: 
            array_obj_ref_508_sample_start_ o<-& (array_obj_ref_508_sample_completed_ 1)
            $null &-> (array_obj_ref_508_update_start_)
            array_obj_ref_508_update_start_ o<-& (array_obj_ref_508_update_completed_ 0)
            // start: Forward dependencies from rdatai0 to transition array_obj_ref_508_sample_start_
            array_obj_ref_508_sample_start_ <-& (slice_497_update_completed_)
            // done: Forward dependencies from rdatai0 to transition array_obj_ref_508_sample_start_
            // RAW reenables for rdatai0
            slice_497_update_start_ o<-& (array_obj_ref_508_sample_completed_ 0)
            // end:  				image[PJ_440_delayed_7_0] := rdatai0// bits of buffering = 16. 
            // start:  				PPJ_444_delayed_6_0 := PPJ $buffering 6// bits of buffering = 96. 
            //  file prog.linked.opt.aa, line 210
            $T[assign_stmt_513_sample_start_] 
            $T[assign_stmt_513_sample_completed_] 
            $T[assign_stmt_513_update_start_] 
            $T[assign_stmt_513_update_completed_] 
            // Source expression
            // PPJ
            // Target expression
            // (as target) PPJ_444_delayed_6_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_513_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_513_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_513_sample_start_ &-> (assign_stmt_513_Sample)
            assign_stmt_513_sample_completed_ <-& (assign_stmt_513_Sample)
            assign_stmt_513_sample_completed_ &-> ($null)
            assign_stmt_513_update_start_ &-> (assign_stmt_513_Update)
            assign_stmt_513_update_completed_ <-& (assign_stmt_513_Update)
            // start: Forward dependencies from PPJ to transition assign_stmt_513_sample_start_
            assign_stmt_513_sample_start_ <-& (ADD_u16_u16_502_update_completed_)
            // done: Forward dependencies from PPJ to transition assign_stmt_513_sample_start_
            // RAW reenables for PPJ
            ADD_u16_u16_502_update_start_ o<-& (assign_stmt_513_sample_completed_ 0)
            // self-release: 
            assign_stmt_513_sample_start_ o<-& (assign_stmt_513_sample_completed_ 1)
            $null &-> (assign_stmt_513_update_start_)
            assign_stmt_513_update_start_ o<-& (assign_stmt_513_update_completed_ 0)
            // start: WAR dependencies for PPJ_444_delayed_6_0
            // done: WAR dependencies for PPJ_444_delayed_6_0
            // end:  				PPJ_444_delayed_6_0 := PPJ $buffering 6// bits of buffering = 96. 
            // start:  				image[PPJ_444_delayed_6_0] := rdatai1// bits of buffering = 16. 
            //  file prog.linked.opt.aa, line 211
            // Source expression
            // rdatai1
            // Target expression
            // image[PPJ_444_delayed_6_0]
            $T[array_obj_ref_515_sample_start_] 
            $T[array_obj_ref_515_sample_completed_] 
            $T[array_obj_ref_515_update_start_] 
            $T[array_obj_ref_515_update_completed_] 
            $T[array_obj_ref_515_word_address_calculated] 
            $T[array_obj_ref_515_root_address_calculated] 
            $T[array_obj_ref_515_offset_calculated] 
            $T[array_obj_ref_515_index_resized_0] 
            $T[array_obj_ref_515_index_scaled_0] 
            $T[array_obj_ref_515_index_computed_0] 
            // PPJ_444_delayed_6_0
            // start: Forward dependencies from PPJ_444_delayed_6_0 to transition array_obj_ref_515_index_computed_0
            array_obj_ref_515_index_computed_0 <-& (assign_stmt_513_update_completed_)
            // done: Forward dependencies from PPJ_444_delayed_6_0 to transition array_obj_ref_515_index_computed_0
            ;;[array_obj_ref_515_index_resize_0] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_515_index_computed_0 &-> (array_obj_ref_515_index_resize_0)
            array_obj_ref_515_index_resized_0 <-& (array_obj_ref_515_index_resize_0)
            ;;[array_obj_ref_515_index_scale_0] 
            {
              $T [scale_rename_req] $T [scale_rename_ack] // rename 
            }
            array_obj_ref_515_index_resized_0 &-> (array_obj_ref_515_index_scale_0)
            array_obj_ref_515_index_scaled_0 <-& (array_obj_ref_515_index_scale_0)
            ;;[array_obj_ref_515_final_index_sum_regn] 
            {
              $T [req] $T [ack] // rename
            }
            array_obj_ref_515_index_scaled_0 &-> (array_obj_ref_515_final_index_sum_regn)
            array_obj_ref_515_offset_calculated <-& (array_obj_ref_515_final_index_sum_regn)
            ;;[array_obj_ref_515_base_plus_offset] 
            {
              $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
            }
            array_obj_ref_515_offset_calculated &-> (array_obj_ref_515_base_plus_offset)
            array_obj_ref_515_root_address_calculated <-& (array_obj_ref_515_base_plus_offset)
            ;;[array_obj_ref_515_word_addrgen] 
            {
              $T [root_register_req] $T [root_register_ack]
            }
            array_obj_ref_515_root_address_calculated &-> (array_obj_ref_515_word_addrgen)
            array_obj_ref_515_word_address_calculated <-& (array_obj_ref_515_word_addrgen)
            ;;[array_obj_ref_515_Sample] 
            {
              ;;[array_obj_ref_515_Split] 
              {
                $T [split_req] $T [split_ack]
              }
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[array_obj_ref_515_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
            array_obj_ref_515_sample_start_ <-& (array_obj_ref_515_word_address_calculated)
            // reenable-joins
            assign_stmt_513_update_start_ o<-& (array_obj_ref_515_sample_completed_ 0)
            array_obj_ref_515_sample_start_ &-> (array_obj_ref_515_Sample)
            array_obj_ref_515_sample_completed_ <-& (array_obj_ref_515_Sample)
            array_obj_ref_515_sample_completed_ &-> ($null)
            array_obj_ref_515_update_start_ &-> (array_obj_ref_515_Update)
            array_obj_ref_515_update_completed_ <-& (array_obj_ref_515_Update)
            // self-release: 
            array_obj_ref_515_sample_start_ o<-& (array_obj_ref_515_sample_completed_ 1)
            $null &-> (array_obj_ref_515_update_start_)
            array_obj_ref_515_update_start_ o<-& (array_obj_ref_515_update_completed_ 0)
            // start: Forward dependencies from rdatai1 to transition array_obj_ref_515_sample_start_
            array_obj_ref_515_sample_start_ <-& (slice_493_update_completed_)
            // done: Forward dependencies from rdatai1 to transition array_obj_ref_515_sample_start_
            // RAW reenables for rdatai1
            slice_493_update_start_ o<-& (array_obj_ref_515_sample_completed_ 0)
            // end:  				image[PPJ_444_delayed_6_0] := rdatai1// bits of buffering = 16. 
            // start:  				rdatai3 := ( $slice rdatah 31 16 ) // bits of buffering = 16. 
            //  file prog.linked.opt.aa, line 212
            // Source expression
            // ( $slice rdatah 31 16 ) 
            $T[slice_520_sample_start_] 
            $T[slice_520_sample_completed_] 
            $T[slice_520_update_start_] 
            $T[slice_520_update_completed_] 
            // rdatah
            // start: Forward dependencies from rdatah to transition slice_520_sample_start_
            slice_520_sample_start_ <-& (call_stmt_490_update_completed_)
            // done: Forward dependencies from rdatah to transition slice_520_sample_start_
            ;;[slice_520_Sample] 
            {
              // unary expression 
              $T [rr] $T [ra] // (split) unary operation
            }
            ;;[slice_520_Update] 
            {
              // unary expression 
              $T [cr] $T [ca] //(split) unary operation
            }
            slice_520_sample_start_ &-> (slice_520_Sample)
            slice_520_sample_completed_ <-& (slice_520_Sample)
            slice_520_sample_completed_ &-> ($null)
            slice_520_update_start_ &-> (slice_520_Update)
            slice_520_update_completed_ <-& (slice_520_Update)
            // RAW reenables for rdatah
            call_stmt_490_update_start_ o<-& (slice_520_sample_completed_ 0)
            // self-release: 
            slice_520_sample_start_ o<-& (slice_520_sample_completed_ 1)
            $null &-> (slice_520_update_start_)
            slice_520_update_start_ o<-& (slice_520_update_completed_ 0)
            // Target expression
            // (as target) rdatai3
            // start: WAR dependencies for rdatai3
            // done: WAR dependencies for rdatai3
            // end:  				rdatai3 := ( $slice rdatah 31 16 ) // bits of buffering = 16. 
            // start:  				rdatai2 := ( $slice rdatah 15 0 ) // bits of buffering = 16. 
            //  file prog.linked.opt.aa, line 213
            // Source expression
            // ( $slice rdatah 15 0 ) 
            $T[slice_524_sample_start_] 
            $T[slice_524_sample_completed_] 
            $T[slice_524_update_start_] 
            $T[slice_524_update_completed_] 
            // rdatah
            // start: Forward dependencies from rdatah to transition slice_524_sample_start_
            slice_524_sample_start_ <-& (call_stmt_490_update_completed_)
            // done: Forward dependencies from rdatah to transition slice_524_sample_start_
            ;;[slice_524_Sample] 
            {
              // unary expression 
              $T [rr] $T [ra] // (split) unary operation
            }
            ;;[slice_524_Update] 
            {
              // unary expression 
              $T [cr] $T [ca] //(split) unary operation
            }
            slice_524_sample_start_ &-> (slice_524_Sample)
            slice_524_sample_completed_ <-& (slice_524_Sample)
            slice_524_sample_completed_ &-> ($null)
            slice_524_update_start_ &-> (slice_524_Update)
            slice_524_update_completed_ <-& (slice_524_Update)
            // RAW reenables for rdatah
            call_stmt_490_update_start_ o<-& (slice_524_sample_completed_ 0)
            // self-release: 
            slice_524_sample_start_ o<-& (slice_524_sample_completed_ 1)
            $null &-> (slice_524_update_start_)
            slice_524_update_start_ o<-& (slice_524_update_completed_ 0)
            // Target expression
            // (as target) rdatai2
            // start: WAR dependencies for rdatai2
            // done: WAR dependencies for rdatai2
            // end:  				rdatai2 := ( $slice rdatah 15 0 ) // bits of buffering = 16. 
            // start:  				PPPJ := (PJ + 2 )// bits of buffering = 16. 
            //  file prog.linked.opt.aa, line 214
            // Source expression
            // (PJ + 2 )
            $T[ADD_u16_u16_529_sample_start_] 
            $T[ADD_u16_u16_529_sample_completed_] 
            $T[ADD_u16_u16_529_update_start_] 
            $T[ADD_u16_u16_529_update_completed_] 
            // PJ
            $T[LOAD_PJ_527_sample_start_] 
            $T[LOAD_PJ_527_sample_completed_] 
            $T[LOAD_PJ_527_update_start_] 
            $T[LOAD_PJ_527_update_completed_] 
            $T[LOAD_PJ_527_word_address_calculated] 
            $T[LOAD_PJ_527_root_address_calculated] 
            LOAD_PJ_527_word_address_calculated <-& (LOAD_PJ_527_root_address_calculated)
            ;;[LOAD_PJ_527_Sample] 
            {
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[LOAD_PJ_527_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
              ;;[LOAD_PJ_527_Merge] 
              {
                $T [merge_req] $T [merge_ack]
              }
            }
            LOAD_PJ_527_sample_start_ <-& (LOAD_PJ_527_word_address_calculated)
            // reenable-joins
            LOAD_PJ_527_sample_start_ &-> (LOAD_PJ_527_Sample)
            LOAD_PJ_527_sample_completed_ <-& (LOAD_PJ_527_Sample)
            LOAD_PJ_527_sample_completed_ &-> ($null)
            LOAD_PJ_527_update_start_ &-> (LOAD_PJ_527_Update)
            LOAD_PJ_527_update_completed_ <-& (LOAD_PJ_527_Update)
            // self-release: 
            LOAD_PJ_527_sample_start_ o<-& (LOAD_PJ_527_sample_completed_ 1)
            $null &-> (LOAD_PJ_527_update_start_)
            LOAD_PJ_527_update_start_ o<-& (LOAD_PJ_527_update_completed_ 0)
            // start: Forward dependencies from PJ to transition ADD_u16_u16_529_sample_start_
            ADD_u16_u16_529_sample_start_ <-& (LOAD_PJ_527_update_completed_)
            // done: Forward dependencies from PJ to transition ADD_u16_u16_529_sample_start_
            ;;[ADD_u16_u16_529_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[ADD_u16_u16_529_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            ADD_u16_u16_529_sample_start_ &-> (ADD_u16_u16_529_Sample)
            ADD_u16_u16_529_sample_completed_ <-& (ADD_u16_u16_529_Sample)
            ADD_u16_u16_529_sample_completed_ &-> ($null)
            ADD_u16_u16_529_update_start_ &-> (ADD_u16_u16_529_Update)
            ADD_u16_u16_529_update_completed_ <-& (ADD_u16_u16_529_Update)
            // RAW reenables for PJ
            LOAD_PJ_527_update_start_ o<-& (ADD_u16_u16_529_sample_completed_ 0)
            // self-release: 
            ADD_u16_u16_529_sample_start_ o<-& (ADD_u16_u16_529_sample_completed_ 1)
            $null &-> (ADD_u16_u16_529_update_start_)
            ADD_u16_u16_529_update_start_ o<-& (ADD_u16_u16_529_update_completed_ 0)
            // Target expression
            // (as target) PPPJ
            // start: WAR dependencies for PPPJ
            // done: WAR dependencies for PPPJ
            // end:  				PPPJ := (PJ + 2 )// bits of buffering = 16. 
            // start:  				PPPPJ := (PJ + 3 )// bits of buffering = 16. 
            //  file prog.linked.opt.aa, line 215
            // Source expression
            // (PJ + 3 )
            $T[ADD_u16_u16_534_sample_start_] 
            $T[ADD_u16_u16_534_sample_completed_] 
            $T[ADD_u16_u16_534_update_start_] 
            $T[ADD_u16_u16_534_update_completed_] 
            // PJ
            $T[LOAD_PJ_532_sample_start_] 
            $T[LOAD_PJ_532_sample_completed_] 
            $T[LOAD_PJ_532_update_start_] 
            $T[LOAD_PJ_532_update_completed_] 
            $T[LOAD_PJ_532_word_address_calculated] 
            $T[LOAD_PJ_532_root_address_calculated] 
            LOAD_PJ_532_word_address_calculated <-& (LOAD_PJ_532_root_address_calculated)
            ;;[LOAD_PJ_532_Sample] 
            {
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[LOAD_PJ_532_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
              ;;[LOAD_PJ_532_Merge] 
              {
                $T [merge_req] $T [merge_ack]
              }
            }
            LOAD_PJ_532_sample_start_ <-& (LOAD_PJ_532_word_address_calculated)
            // reenable-joins
            LOAD_PJ_532_sample_start_ &-> (LOAD_PJ_532_Sample)
            LOAD_PJ_532_sample_completed_ <-& (LOAD_PJ_532_Sample)
            LOAD_PJ_532_sample_completed_ &-> ($null)
            LOAD_PJ_532_update_start_ &-> (LOAD_PJ_532_Update)
            LOAD_PJ_532_update_completed_ <-& (LOAD_PJ_532_Update)
            // self-release: 
            LOAD_PJ_532_sample_start_ o<-& (LOAD_PJ_532_sample_completed_ 1)
            $null &-> (LOAD_PJ_532_update_start_)
            LOAD_PJ_532_update_start_ o<-& (LOAD_PJ_532_update_completed_ 0)
            // start: Forward dependencies from PJ to transition ADD_u16_u16_534_sample_start_
            ADD_u16_u16_534_sample_start_ <-& (LOAD_PJ_532_update_completed_)
            // done: Forward dependencies from PJ to transition ADD_u16_u16_534_sample_start_
            ;;[ADD_u16_u16_534_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[ADD_u16_u16_534_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            ADD_u16_u16_534_sample_start_ &-> (ADD_u16_u16_534_Sample)
            ADD_u16_u16_534_sample_completed_ <-& (ADD_u16_u16_534_Sample)
            ADD_u16_u16_534_sample_completed_ &-> ($null)
            ADD_u16_u16_534_update_start_ &-> (ADD_u16_u16_534_Update)
            ADD_u16_u16_534_update_completed_ <-& (ADD_u16_u16_534_Update)
            // RAW reenables for PJ
            LOAD_PJ_532_update_start_ o<-& (ADD_u16_u16_534_sample_completed_ 0)
            // self-release: 
            ADD_u16_u16_534_sample_start_ o<-& (ADD_u16_u16_534_sample_completed_ 1)
            $null &-> (ADD_u16_u16_534_update_start_)
            ADD_u16_u16_534_update_start_ o<-& (ADD_u16_u16_534_update_completed_ 0)
            // Target expression
            // (as target) PPPPJ
            // start: WAR dependencies for PPPPJ
            // done: WAR dependencies for PPPPJ
            // end:  				PPPPJ := (PJ + 3 )// bits of buffering = 16. 
            // start:  				PPPJ_466_delayed_6_0 := PPPJ $buffering 6// bits of buffering = 96. 
            //  file prog.linked.opt.aa, line 216
            $T[assign_stmt_538_sample_start_] 
            $T[assign_stmt_538_sample_completed_] 
            $T[assign_stmt_538_update_start_] 
            $T[assign_stmt_538_update_completed_] 
            // Source expression
            // PPPJ
            // Target expression
            // (as target) PPPJ_466_delayed_6_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_538_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_538_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_538_sample_start_ &-> (assign_stmt_538_Sample)
            assign_stmt_538_sample_completed_ <-& (assign_stmt_538_Sample)
            assign_stmt_538_sample_completed_ &-> ($null)
            assign_stmt_538_update_start_ &-> (assign_stmt_538_Update)
            assign_stmt_538_update_completed_ <-& (assign_stmt_538_Update)
            // start: Forward dependencies from PPPJ to transition assign_stmt_538_sample_start_
            assign_stmt_538_sample_start_ <-& (ADD_u16_u16_529_update_completed_)
            // done: Forward dependencies from PPPJ to transition assign_stmt_538_sample_start_
            // RAW reenables for PPPJ
            ADD_u16_u16_529_update_start_ o<-& (assign_stmt_538_sample_completed_ 0)
            // self-release: 
            assign_stmt_538_sample_start_ o<-& (assign_stmt_538_sample_completed_ 1)
            $null &-> (assign_stmt_538_update_start_)
            assign_stmt_538_update_start_ o<-& (assign_stmt_538_update_completed_ 0)
            // start: WAR dependencies for PPPJ_466_delayed_6_0
            // done: WAR dependencies for PPPJ_466_delayed_6_0
            // end:  				PPPJ_466_delayed_6_0 := PPPJ $buffering 6// bits of buffering = 96. 
            // start:  				image[PPPJ_466_delayed_6_0] := rdatai2// bits of buffering = 16. 
            //  file prog.linked.opt.aa, line 217
            // Source expression
            // rdatai2
            // Target expression
            // image[PPPJ_466_delayed_6_0]
            $T[array_obj_ref_540_sample_start_] 
            $T[array_obj_ref_540_sample_completed_] 
            $T[array_obj_ref_540_update_start_] 
            $T[array_obj_ref_540_update_completed_] 
            $T[array_obj_ref_540_word_address_calculated] 
            $T[array_obj_ref_540_root_address_calculated] 
            $T[array_obj_ref_540_offset_calculated] 
            $T[array_obj_ref_540_index_resized_0] 
            $T[array_obj_ref_540_index_scaled_0] 
            $T[array_obj_ref_540_index_computed_0] 
            // PPPJ_466_delayed_6_0
            // start: Forward dependencies from PPPJ_466_delayed_6_0 to transition array_obj_ref_540_index_computed_0
            array_obj_ref_540_index_computed_0 <-& (assign_stmt_538_update_completed_)
            // done: Forward dependencies from PPPJ_466_delayed_6_0 to transition array_obj_ref_540_index_computed_0
            ;;[array_obj_ref_540_index_resize_0] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_540_index_computed_0 &-> (array_obj_ref_540_index_resize_0)
            array_obj_ref_540_index_resized_0 <-& (array_obj_ref_540_index_resize_0)
            ;;[array_obj_ref_540_index_scale_0] 
            {
              $T [scale_rename_req] $T [scale_rename_ack] // rename 
            }
            array_obj_ref_540_index_resized_0 &-> (array_obj_ref_540_index_scale_0)
            array_obj_ref_540_index_scaled_0 <-& (array_obj_ref_540_index_scale_0)
            ;;[array_obj_ref_540_final_index_sum_regn] 
            {
              $T [req] $T [ack] // rename
            }
            array_obj_ref_540_index_scaled_0 &-> (array_obj_ref_540_final_index_sum_regn)
            array_obj_ref_540_offset_calculated <-& (array_obj_ref_540_final_index_sum_regn)
            ;;[array_obj_ref_540_base_plus_offset] 
            {
              $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
            }
            array_obj_ref_540_offset_calculated &-> (array_obj_ref_540_base_plus_offset)
            array_obj_ref_540_root_address_calculated <-& (array_obj_ref_540_base_plus_offset)
            ;;[array_obj_ref_540_word_addrgen] 
            {
              $T [root_register_req] $T [root_register_ack]
            }
            array_obj_ref_540_root_address_calculated &-> (array_obj_ref_540_word_addrgen)
            array_obj_ref_540_word_address_calculated <-& (array_obj_ref_540_word_addrgen)
            ;;[array_obj_ref_540_Sample] 
            {
              ;;[array_obj_ref_540_Split] 
              {
                $T [split_req] $T [split_ack]
              }
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[array_obj_ref_540_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
            array_obj_ref_540_sample_start_ <-& (array_obj_ref_540_word_address_calculated)
            // reenable-joins
            assign_stmt_538_update_start_ o<-& (array_obj_ref_540_sample_completed_ 0)
            array_obj_ref_540_sample_start_ &-> (array_obj_ref_540_Sample)
            array_obj_ref_540_sample_completed_ <-& (array_obj_ref_540_Sample)
            array_obj_ref_540_sample_completed_ &-> ($null)
            array_obj_ref_540_update_start_ &-> (array_obj_ref_540_Update)
            array_obj_ref_540_update_completed_ <-& (array_obj_ref_540_Update)
            // self-release: 
            array_obj_ref_540_sample_start_ o<-& (array_obj_ref_540_sample_completed_ 1)
            $null &-> (array_obj_ref_540_update_start_)
            array_obj_ref_540_update_start_ o<-& (array_obj_ref_540_update_completed_ 0)
            // start: Forward dependencies from rdatai2 to transition array_obj_ref_540_sample_start_
            array_obj_ref_540_sample_start_ <-& (slice_524_update_completed_)
            // done: Forward dependencies from rdatai2 to transition array_obj_ref_540_sample_start_
            // RAW reenables for rdatai2
            slice_524_update_start_ o<-& (array_obj_ref_540_sample_completed_ 0)
            // end:  				image[PPPJ_466_delayed_6_0] := rdatai2// bits of buffering = 16. 
            // start:  				PPPPJ_470_delayed_6_0 := PPPPJ $buffering 6// bits of buffering = 96. 
            //  file prog.linked.opt.aa, line 218
            $T[assign_stmt_545_sample_start_] 
            $T[assign_stmt_545_sample_completed_] 
            $T[assign_stmt_545_update_start_] 
            $T[assign_stmt_545_update_completed_] 
            // Source expression
            // PPPPJ
            // Target expression
            // (as target) PPPPJ_470_delayed_6_0
            // both source and target are implicit: use interlock 
            // Interlock 
            ;;[assign_stmt_545_Sample] 
            {
              $T [req] $T [ack] // interlock-sample.
            }
            ;;[assign_stmt_545_Update] 
            {
              $T [req] $T [ack] // interlock-update.
            }
            assign_stmt_545_sample_start_ &-> (assign_stmt_545_Sample)
            assign_stmt_545_sample_completed_ <-& (assign_stmt_545_Sample)
            assign_stmt_545_sample_completed_ &-> ($null)
            assign_stmt_545_update_start_ &-> (assign_stmt_545_Update)
            assign_stmt_545_update_completed_ <-& (assign_stmt_545_Update)
            // start: Forward dependencies from PPPPJ to transition assign_stmt_545_sample_start_
            assign_stmt_545_sample_start_ <-& (ADD_u16_u16_534_update_completed_)
            // done: Forward dependencies from PPPPJ to transition assign_stmt_545_sample_start_
            // RAW reenables for PPPPJ
            ADD_u16_u16_534_update_start_ o<-& (assign_stmt_545_sample_completed_ 0)
            // self-release: 
            assign_stmt_545_sample_start_ o<-& (assign_stmt_545_sample_completed_ 1)
            $null &-> (assign_stmt_545_update_start_)
            assign_stmt_545_update_start_ o<-& (assign_stmt_545_update_completed_ 0)
            // start: WAR dependencies for PPPPJ_470_delayed_6_0
            // done: WAR dependencies for PPPPJ_470_delayed_6_0
            // end:  				PPPPJ_470_delayed_6_0 := PPPPJ $buffering 6// bits of buffering = 96. 
            // start:  				image[PPPPJ_470_delayed_6_0] := rdatai3// bits of buffering = 16. 
            //  file prog.linked.opt.aa, line 219
            // Source expression
            // rdatai3
            // Target expression
            // image[PPPPJ_470_delayed_6_0]
            $T[array_obj_ref_547_sample_start_] 
            $T[array_obj_ref_547_sample_completed_] 
            $T[array_obj_ref_547_update_start_] 
            $T[array_obj_ref_547_update_completed_] 
            $T[array_obj_ref_547_word_address_calculated] 
            $T[array_obj_ref_547_root_address_calculated] 
            $T[array_obj_ref_547_offset_calculated] 
            $T[array_obj_ref_547_index_resized_0] 
            $T[array_obj_ref_547_index_scaled_0] 
            $T[array_obj_ref_547_index_computed_0] 
            // PPPPJ_470_delayed_6_0
            // start: Forward dependencies from PPPPJ_470_delayed_6_0 to transition array_obj_ref_547_index_computed_0
            array_obj_ref_547_index_computed_0 <-& (assign_stmt_545_update_completed_)
            // done: Forward dependencies from PPPPJ_470_delayed_6_0 to transition array_obj_ref_547_index_computed_0
            ;;[array_obj_ref_547_index_resize_0] 
            {
              $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
            }
            array_obj_ref_547_index_computed_0 &-> (array_obj_ref_547_index_resize_0)
            array_obj_ref_547_index_resized_0 <-& (array_obj_ref_547_index_resize_0)
            ;;[array_obj_ref_547_index_scale_0] 
            {
              $T [scale_rename_req] $T [scale_rename_ack] // rename 
            }
            array_obj_ref_547_index_resized_0 &-> (array_obj_ref_547_index_scale_0)
            array_obj_ref_547_index_scaled_0 <-& (array_obj_ref_547_index_scale_0)
            ;;[array_obj_ref_547_final_index_sum_regn] 
            {
              $T [req] $T [ack] // rename
            }
            array_obj_ref_547_index_scaled_0 &-> (array_obj_ref_547_final_index_sum_regn)
            array_obj_ref_547_offset_calculated <-& (array_obj_ref_547_final_index_sum_regn)
            ;;[array_obj_ref_547_base_plus_offset] 
            {
              $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
            }
            array_obj_ref_547_offset_calculated &-> (array_obj_ref_547_base_plus_offset)
            array_obj_ref_547_root_address_calculated <-& (array_obj_ref_547_base_plus_offset)
            ;;[array_obj_ref_547_word_addrgen] 
            {
              $T [root_register_req] $T [root_register_ack]
            }
            array_obj_ref_547_root_address_calculated &-> (array_obj_ref_547_word_addrgen)
            array_obj_ref_547_word_address_calculated <-& (array_obj_ref_547_word_addrgen)
            ;;[array_obj_ref_547_Sample] 
            {
              ;;[array_obj_ref_547_Split] 
              {
                $T [split_req] $T [split_ack]
              }
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[array_obj_ref_547_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
            array_obj_ref_547_sample_start_ <-& (array_obj_ref_547_word_address_calculated)
            // reenable-joins
            assign_stmt_545_update_start_ o<-& (array_obj_ref_547_sample_completed_ 0)
            array_obj_ref_547_sample_start_ &-> (array_obj_ref_547_Sample)
            array_obj_ref_547_sample_completed_ <-& (array_obj_ref_547_Sample)
            array_obj_ref_547_sample_completed_ &-> ($null)
            array_obj_ref_547_update_start_ &-> (array_obj_ref_547_Update)
            array_obj_ref_547_update_completed_ <-& (array_obj_ref_547_Update)
            // self-release: 
            array_obj_ref_547_sample_start_ o<-& (array_obj_ref_547_sample_completed_ 1)
            $null &-> (array_obj_ref_547_update_start_)
            array_obj_ref_547_update_start_ o<-& (array_obj_ref_547_update_completed_ 0)
            // start: Forward dependencies from rdatai3 to transition array_obj_ref_547_sample_start_
            array_obj_ref_547_sample_start_ <-& (slice_520_update_completed_)
            // done: Forward dependencies from rdatai3 to transition array_obj_ref_547_sample_start_
            // RAW reenables for rdatai3
            slice_520_update_start_ o<-& (array_obj_ref_547_sample_completed_ 0)
            // end:  				image[PPPPJ_470_delayed_6_0] := rdatai3// bits of buffering = 16. 
            // start:  				NJ := (J + 32 )// bits of buffering = 12. 
            //  file prog.linked.opt.aa, line 220
            // Source expression
            // (J + 32 )
            $T[ADD_u12_u12_553_sample_start_] 
            $T[ADD_u12_u12_553_sample_completed_] 
            $T[ADD_u12_u12_553_update_start_] 
            $T[ADD_u12_u12_553_update_completed_] 
            // J
            // start: Forward dependencies from J to transition ADD_u12_u12_553_sample_start_
            ADD_u12_u12_553_sample_start_ <-& (phi_stmt_457_update_completed_)
            // done: Forward dependencies from J to transition ADD_u12_u12_553_sample_start_
            ;;[ADD_u12_u12_553_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[ADD_u12_u12_553_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            ADD_u12_u12_553_sample_start_ &-> (ADD_u12_u12_553_Sample)
            ADD_u12_u12_553_sample_completed_ <-& (ADD_u12_u12_553_Sample)
            ADD_u12_u12_553_sample_completed_ &-> ($null)
            ADD_u12_u12_553_update_start_ &-> (ADD_u12_u12_553_Update)
            ADD_u12_u12_553_update_completed_ <-& (ADD_u12_u12_553_Update)
            // RAW reenables for J
            phi_stmt_457_update_start_ o<-& (ADD_u12_u12_553_sample_completed_ 0)
            // self-release: 
            ADD_u12_u12_553_sample_start_ o<-& (ADD_u12_u12_553_sample_completed_ 1)
            $null &-> (ADD_u12_u12_553_update_start_)
            ADD_u12_u12_553_update_start_ o<-& (ADD_u12_u12_553_update_completed_ 0)
            // Target expression
            // (as target) NJ
            // start: WAR dependencies for NJ
            // WAR dependency: Read: NJ before Write: 				NJ := (J + 32 )// bits of buffering = 12. 
            ADD_u12_u12_553_update_start_ <-& (phi_stmt_457_sample_completed_)
            phi_stmt_457_sample_start_ o<-& (ADD_u12_u12_553_update_completed_ 0)
            // WAR dependency: release  Read: NJ with Write: 				NJ := (J + 32 )// bits of buffering = 12. 
            // done: WAR dependencies for NJ
            // end:  				NJ := (J + 32 ) $buffering 2// bits of buffering = 24. 
            // start:  				PJ := (PJ + 4 )// bits of buffering = 16. 
            //  file prog.linked.opt.aa, line 221
            // Source expression
            // (PJ + 4 )
            $T[ADD_u16_u16_558_sample_start_] 
            $T[ADD_u16_u16_558_sample_completed_] 
            $T[ADD_u16_u16_558_update_start_] 
            $T[ADD_u16_u16_558_update_completed_] 
            // PJ
            $T[LOAD_PJ_556_sample_start_] 
            $T[LOAD_PJ_556_sample_completed_] 
            $T[LOAD_PJ_556_update_start_] 
            $T[LOAD_PJ_556_update_completed_] 
            $T[LOAD_PJ_556_word_address_calculated] 
            $T[LOAD_PJ_556_root_address_calculated] 
            LOAD_PJ_556_word_address_calculated <-& (LOAD_PJ_556_root_address_calculated)
            ;;[LOAD_PJ_556_Sample] 
            {
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[LOAD_PJ_556_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
              ;;[LOAD_PJ_556_Merge] 
              {
                $T [merge_req] $T [merge_ack]
              }
            }
            LOAD_PJ_556_sample_start_ <-& (LOAD_PJ_556_word_address_calculated)
            // reenable-joins
            LOAD_PJ_556_sample_start_ &-> (LOAD_PJ_556_Sample)
            LOAD_PJ_556_sample_completed_ <-& (LOAD_PJ_556_Sample)
            LOAD_PJ_556_sample_completed_ &-> ($null)
            LOAD_PJ_556_update_start_ &-> (LOAD_PJ_556_Update)
            LOAD_PJ_556_update_completed_ <-& (LOAD_PJ_556_Update)
            // self-release: 
            LOAD_PJ_556_sample_start_ o<-& (LOAD_PJ_556_sample_completed_ 1)
            $null &-> (LOAD_PJ_556_update_start_)
            LOAD_PJ_556_update_start_ o<-& (LOAD_PJ_556_update_completed_ 0)
            // start: Forward dependencies from PJ to transition ADD_u16_u16_558_sample_start_
            ADD_u16_u16_558_sample_start_ <-& (LOAD_PJ_556_update_completed_)
            // done: Forward dependencies from PJ to transition ADD_u16_u16_558_sample_start_
            ;;[ADD_u16_u16_558_Sample] 
            {
              // binary expression 
              $T [rr] $T [ra]  // (split) binary operation 
            }
            ;;[ADD_u16_u16_558_Update] 
            {
              // binary expression 
              $T [cr] $T [ca] // (split) binary operation 
            }
            ADD_u16_u16_558_sample_start_ &-> (ADD_u16_u16_558_Sample)
            ADD_u16_u16_558_sample_completed_ <-& (ADD_u16_u16_558_Sample)
            ADD_u16_u16_558_sample_completed_ &-> ($null)
            ADD_u16_u16_558_update_start_ &-> (ADD_u16_u16_558_Update)
            ADD_u16_u16_558_update_completed_ <-& (ADD_u16_u16_558_Update)
            // RAW reenables for PJ
            LOAD_PJ_556_update_start_ o<-& (ADD_u16_u16_558_sample_completed_ 0)
            // self-release: 
            ADD_u16_u16_558_sample_start_ o<-& (ADD_u16_u16_558_sample_completed_ 1)
            $null &-> (ADD_u16_u16_558_update_start_)
            ADD_u16_u16_558_update_start_ o<-& (ADD_u16_u16_558_update_completed_ 0)
            // Target expression
            // (as target) PJ
            $T[STORE_PJ_555_sample_start_] 
            $T[STORE_PJ_555_sample_completed_] 
            $T[STORE_PJ_555_update_start_] 
            $T[STORE_PJ_555_update_completed_] 
            // PJ
            $T[STORE_PJ_555_word_address_calculated] 
            $T[STORE_PJ_555_root_address_calculated] 
            STORE_PJ_555_word_address_calculated <-& (STORE_PJ_555_root_address_calculated)
            ;;[STORE_PJ_555_Sample] 
            {
              ;;[STORE_PJ_555_Split] 
              {
                $T [split_req] $T [split_ack]
              }
              ||[word_access_start] 
              {
                ;;[word_0] 
                {
                  $T [rr] $T [ra] 
                }
              }
            }
            ;;[STORE_PJ_555_Update] 
            {
              ||[word_access_complete] 
              {
                ;;[word_0] 
                {
                  $T [cr] $T [ca] 
                }
              }
            }
            STORE_PJ_555_sample_start_ <-& (STORE_PJ_555_word_address_calculated)
            // reenable-joins
            STORE_PJ_555_sample_start_ &-> (STORE_PJ_555_Sample)
            STORE_PJ_555_sample_completed_ <-& (STORE_PJ_555_Sample)
            STORE_PJ_555_sample_completed_ &-> ($null)
            STORE_PJ_555_update_start_ &-> (STORE_PJ_555_Update)
            STORE_PJ_555_update_completed_ <-& (STORE_PJ_555_Update)
            // self-release: 
            STORE_PJ_555_sample_start_ o<-& (STORE_PJ_555_sample_completed_ 1)
            $null &-> (STORE_PJ_555_update_start_)
            STORE_PJ_555_update_start_ o<-& (STORE_PJ_555_update_completed_ 0)
            // start: Forward dependencies from (PJ + 4 ) to transition STORE_PJ_555_sample_start_
            STORE_PJ_555_sample_start_ <-& (ADD_u16_u16_558_update_completed_)
            // done: Forward dependencies from (PJ + 4 ) to transition STORE_PJ_555_sample_start_
            // RAW reenables for (PJ + 4 )
            ADD_u16_u16_558_update_start_ o<-& (STORE_PJ_555_sample_completed_ 0)
            // end:  				PJ := (PJ + 4 )// bits of buffering = 16. 
            // (NJ < 128 )
            // NJ
            $T [loop_body_delay_to_condition_start] $delay
            loop_body_start &-> (loop_body_delay_to_condition_start)
            loop_body_delay_to_condition_start &-> (condition_evaluated)
            // start: Forward dependencies from (NJ < 128 ) to transition condition_evaluated
            condition_evaluated <-& (ADD_u12_u12_553_update_completed_)
            // done: Forward dependencies from (NJ < 128 ) to transition condition_evaluated
            condition_evaluated &-> ($null)
            // load-store dependencies..
            // memory-space  memory_space_5
            //  call_stmt_490 store
            // reenable across ring for memory space memory_space_5
            // leading and trailing sets are the same... no ring dependency
            // memory-space  memory_space_3
            //  array_obj_ref_508 store
            //  array_obj_ref_515 store
            $T [array_obj_ref_508_array_obj_ref_515_delay] $delay
            // array_obj_ref_508(store) -> array_obj_ref_515(store)
            array_obj_ref_515_sample_start_ <-& (array_obj_ref_508_array_obj_ref_515_delay)
            array_obj_ref_508_array_obj_ref_515_delay <-& (array_obj_ref_508_sample_completed_)
            //  array_obj_ref_540 store
            $T [array_obj_ref_515_array_obj_ref_540_delay] $delay
            // array_obj_ref_515(store) -> array_obj_ref_540(store)
            array_obj_ref_540_sample_start_ <-& (array_obj_ref_515_array_obj_ref_540_delay)
            array_obj_ref_515_array_obj_ref_540_delay <-& (array_obj_ref_515_sample_completed_)
            //  array_obj_ref_547 store
            $T [array_obj_ref_540_array_obj_ref_547_delay] $delay
            // array_obj_ref_540(store) -> array_obj_ref_547(store)
            array_obj_ref_547_sample_start_ <-& (array_obj_ref_540_array_obj_ref_547_delay)
            array_obj_ref_540_array_obj_ref_547_delay <-& (array_obj_ref_540_sample_completed_)
            // reenable across ring for memory space memory_space_3
            $T[ring_reenable_memory_space_3] 
            // ordered memory-subsystem.
            ring_reenable_memory_space_3 <-& (array_obj_ref_547_sample_completed_)
            array_obj_ref_508_sample_start_ o<-& (ring_reenable_memory_space_3 1)
            // memory-space  memory_space_6
            //  LOAD_one_475 load
            // reenable across ring for memory space memory_space_6
            // leading and trailing sets are the same... no ring dependency
            // memory-space  memory_space_0
            //  LOAD_PJ_500 load
            //  LOAD_PJ_505 load
            //  LOAD_PJ_527 load
            //  LOAD_PJ_532 load
            //  LOAD_PJ_556 load
            //  STORE_PJ_555 store
            $T [LOAD_PJ_500_STORE_PJ_555_delay] $delay
            // LOAD_PJ_500(load) -> STORE_PJ_555(store)
            STORE_PJ_555_sample_start_ <-& (LOAD_PJ_500_STORE_PJ_555_delay)
            LOAD_PJ_500_STORE_PJ_555_delay <-& (LOAD_PJ_500_sample_completed_)
            $T [LOAD_PJ_505_STORE_PJ_555_delay] $delay
            // LOAD_PJ_505(load) -> STORE_PJ_555(store)
            STORE_PJ_555_sample_start_ <-& (LOAD_PJ_505_STORE_PJ_555_delay)
            LOAD_PJ_505_STORE_PJ_555_delay <-& (LOAD_PJ_505_sample_completed_)
            $T [LOAD_PJ_527_STORE_PJ_555_delay] $delay
            // LOAD_PJ_527(load) -> STORE_PJ_555(store)
            STORE_PJ_555_sample_start_ <-& (LOAD_PJ_527_STORE_PJ_555_delay)
            LOAD_PJ_527_STORE_PJ_555_delay <-& (LOAD_PJ_527_sample_completed_)
            $T [LOAD_PJ_532_STORE_PJ_555_delay] $delay
            // LOAD_PJ_532(load) -> STORE_PJ_555(store)
            STORE_PJ_555_sample_start_ <-& (LOAD_PJ_532_STORE_PJ_555_delay)
            LOAD_PJ_532_STORE_PJ_555_delay <-& (LOAD_PJ_532_sample_completed_)
            $T [LOAD_PJ_556_STORE_PJ_555_delay] $delay
            // LOAD_PJ_556(load) -> STORE_PJ_555(store)
            STORE_PJ_555_sample_start_ <-& (LOAD_PJ_556_STORE_PJ_555_delay)
            LOAD_PJ_556_STORE_PJ_555_delay <-& (LOAD_PJ_556_sample_completed_)
            // reenable across ring for memory space memory_space_0
            $T[ring_reenable_memory_space_0] 
            // ordered memory-subsystem.
            ring_reenable_memory_space_0 <-& (STORE_PJ_555_sample_completed_)
            LOAD_PJ_500_sample_start_ o<-& (ring_reenable_memory_space_0 1)
            LOAD_PJ_505_sample_start_ o<-& (ring_reenable_memory_space_0 1)
            LOAD_PJ_527_sample_start_ o<-& (ring_reenable_memory_space_0 1)
            LOAD_PJ_532_sample_start_ o<-& (ring_reenable_memory_space_0 1)
            LOAD_PJ_556_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          }
          ( first_time_through_loop_body  back_edge_to_loop_body) 
          ( condition_evaluated )
          ;; [loop_exit] 
          {
            $T [ack] 
          }
          ;; [loop_taken] 
          {
            $T [ack] 
          }
          do_while_stmt_455__entry__ <-| ($entry)
          loop_body_done <-| ( do_while_stmt_455_loop_body ) 
          condition_done |-> (loop_exit loop_taken)
          do_while_stmt_455__exit__ |-> ($exit)
          $bind condition_done <= do_while_stmt_455_loop_body : condition_evaluated
          $bind do_while_stmt_455__entry__  => do_while_stmt_455_loop_body : first_time_through_loop_body 
          $bind loop_back  => do_while_stmt_455_loop_body : back_edge_to_loop_body 
          $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_455__exit__)
        }
        do_while_stmt_455__entry__ |-> (do_while_stmt_455)
        do_while_stmt_455__exit__ <-| (do_while_stmt_455)
        do_while_stmt_455__entry__ <-| (branch_block_stmt_454__entry__)
        do_while_stmt_455__exit__ |-> (branch_block_stmt_454__exit__)
      }
      branch_block_stmt_454__entry__ |-> (branch_block_stmt_454)
      branch_block_stmt_454__exit__ <-| (branch_block_stmt_454)
      <>[branch_block_stmt_565] // Branch Block  file prog.linked.opt.aa, line 224
      {
        $P [branch_block_stmt_565__entry__]
        branch_block_stmt_565__entry__ <-| ($entry)
        $P [branch_block_stmt_565__exit__]
        branch_block_stmt_565__exit__ |-> ($exit)
        $P [merge_stmt_566__entry__] 
        $P [merge_stmt_566__exit__] 
        $P [assign_stmt_575__entry__] 
        $P [assign_stmt_575__exit__] 
        $P [branch_block_stmt_576__entry__] 
        $P [branch_block_stmt_576__exit__] 
        $P [call_stmt_624_to_assign_stmt_638__entry__] 
        $P [call_stmt_624_to_assign_stmt_638__exit__] 
        $P [branch_block_stmt_639__entry__] 
        $P [branch_block_stmt_639__exit__] 
        $P [call_stmt_705_to_assign_stmt_730__entry__] 
        $P [call_stmt_705_to_assign_stmt_730__exit__] 
        $P [if_stmt_731__entry__] 
        $P [if_stmt_731__exit__] 
        ::[assign_stmt_575] 
        {
          // start:  			total := 0 // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 230
          // Target expression
          // (as target) total
          $T[STORE_total_573_sample_start_] 
          $T[STORE_total_573_sample_completed_] 
          $T[STORE_total_573_update_start_] 
          $T[STORE_total_573_update_completed_] 
          // total
          $T[STORE_total_573_word_address_calculated] 
          $T[STORE_total_573_root_address_calculated] 
          STORE_total_573_word_address_calculated <-& (STORE_total_573_root_address_calculated)
          ;;[STORE_total_573_Sample] 
          {
            ;;[STORE_total_573_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[STORE_total_573_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          STORE_total_573_sample_start_ <-& (STORE_total_573_word_address_calculated)
          STORE_total_573_sample_start_ &-> (STORE_total_573_Sample)
          STORE_total_573_sample_completed_ <-& (STORE_total_573_Sample)
          STORE_total_573_sample_completed_ &-> ($null)
          STORE_total_573_update_start_ &-> (STORE_total_573_Update)
          STORE_total_573_update_completed_ <-& (STORE_total_573_Update)
          // end:  			total := 0 // bits of buffering = 16. 
          // load-store dependencies..
          // memory-space  memory_space_7
          //  STORE_total_573 store
        }
        assign_stmt_575__entry__ |-> (assign_stmt_575)
        assign_stmt_575__exit__ <-| (assign_stmt_575)
        <>[branch_block_stmt_576] // Branch Block  file prog.linked.opt.aa, line 231
        {
          $P [branch_block_stmt_576__entry__]
          branch_block_stmt_576__entry__ <-| ($entry)
          $P [branch_block_stmt_576__exit__]
          branch_block_stmt_576__exit__ |-> ($exit)
          $P [do_while_stmt_577__entry__] 
          $P [do_while_stmt_577__exit__] 
          // do-while-statement  
          //  file prog.linked.opt.aa, line 233
          <o> [do_while_stmt_577]  $depth 7 $buffering 2 
          {
            $P[do_while_stmt_577__entry__] 
            $P[do_while_stmt_577__exit__] 
            $P[loop_back] 
            $P[condition_done] 
            $P[loop_body_done] 
            $pipeline [do_while_stmt_577_loop_body] 
            {
              // Pipelined!
              $T[back_edge_to_loop_body] 
              $T[first_time_through_loop_body] 
              $T[loop_body_start] 
              $T[condition_evaluated] 
              $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
              $entry <-& (loop_body_start)
              $T[aggregated_phi_sample_req] 
              $T[aggregated_phi_sample_ack] 
              $T[aggregated_phi_update_req] 
              $T[aggregated_phi_update_ack] 
              // do not loop-back unless all phi's have used up their triggering tokens.
              condition_evaluated <-& (aggregated_phi_update_ack)
              aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
              // start:  PHI statement phi_stmt_579
              // 					$phi K := 					  ($bitcast ($uint<32>) 0  ) $on   $entry 					  NK $on   $loopback 
              // type of target is $uint<32>
              $T[phi_stmt_579_sample_start_] 
              $T[phi_stmt_579_sample_completed_] 
              $T[phi_stmt_579_update_start_] 
              $T[phi_stmt_579_update_completed_] 
              $T[phi_stmt_579_sample_start__ps] 
              phi_stmt_579_sample_start__ps <-& (aggregated_phi_sample_req)
              $T[phi_stmt_579_sample_completed__ps] 
              phi_stmt_579_sample_completed__ps &-> (aggregated_phi_sample_ack)
              $T[phi_stmt_579_update_start__ps] 
              phi_stmt_579_update_start__ps <-& (aggregated_phi_update_req)
              $T[phi_stmt_579_update_completed__ps] 
              phi_stmt_579_update_completed_ <-& (phi_stmt_579_update_completed__ps)
              aggregated_phi_sample_req <-& (phi_stmt_579_sample_start_)
              aggregated_phi_sample_ack &-> (phi_stmt_579_sample_completed_)
              aggregated_phi_update_req <-& (phi_stmt_579_update_start_)
              $T[phi_stmt_579_loopback_trigger] 
              phi_stmt_579_loopback_trigger <-& (back_edge_to_loop_body)
              $T[phi_stmt_579_loopback_sample_req] 
              $T[phi_stmt_579_loopback_sample_req_ps] 
              phi_stmt_579_loopback_sample_req <-& (phi_stmt_579_loopback_sample_req_ps)
              phi_stmt_579_loopback_sample_req &-> ($null)
              $T[phi_stmt_579_entry_trigger] 
              phi_stmt_579_entry_trigger <-& (first_time_through_loop_body)
              $T[phi_stmt_579_entry_sample_req] 
              $T[phi_stmt_579_entry_sample_req_ps] 
              phi_stmt_579_entry_sample_req <-& (phi_stmt_579_entry_sample_req_ps)
              phi_stmt_579_entry_sample_req &-> ($null)
              phi_stmt_579_update_start_ o<-& (phi_stmt_579_update_completed_ 0)
              phi_stmt_579_sample_start_ o<-& (phi_stmt_579_sample_completed_ 1)
              $T[phi_stmt_579_merged_reqs] 
              $T[phi_stmt_579_phi_mux_ack] 
              $T[phi_stmt_579_phi_mux_ack_ps] 
              phi_stmt_579_phi_mux_ack_ps <-& (phi_stmt_579_phi_mux_ack)
              aggregated_phi_update_ack <-& (phi_stmt_579_update_completed_)
              $T[type_cast_582_sample_start__ps] 
              $T[type_cast_582_sample_completed__ps] 
              $T[type_cast_582_update_start__ps] 
              $T[type_cast_582_update_completed__ps] 
              // dummies for constant expression source for phi
              $T[type_cast_582_sample_start_] 
              $T[type_cast_582_sample_completed_] 
              type_cast_582_sample_completed_ <-& (type_cast_582_sample_start_)
              $T[type_cast_582_update_start_] 
              $T [type_cast_582_update_completed_] $delay 
              type_cast_582_update_completed_ <-& (type_cast_582_update_start_)
              // Phi start dependency for implicit/constant alternative.
              type_cast_582_sample_start_ <-& (type_cast_582_sample_start__ps)
              type_cast_582_update_start_ <-& (type_cast_582_update_start__ps)
              // Phi complete dependency.
              type_cast_582_sample_completed__ps <-& (type_cast_582_sample_completed_)
              type_cast_582_update_completed__ps <-& (type_cast_582_update_completed_)
              $T[R_NK_583_sample_start__ps] 
              $T[R_NK_583_sample_completed__ps] 
              $T[R_NK_583_update_start__ps] 
              $T[R_NK_583_update_completed__ps] 
              // interlock for implicit-variable-ref/signal-read in Phi alternative 1
              $T[R_NK_583_sample_start_] 
              $T[R_NK_583_sample_completed_] 
              $T[R_NK_583_update_start_] 
              $T[R_NK_583_update_completed_] 
              ;;[R_NK_583_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              R_NK_583_sample_start_ &-> (R_NK_583_Sample)
              R_NK_583_sample_completed_ <-& (R_NK_583_Sample)
              ;;[R_NK_583_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              R_NK_583_update_start_ &-> (R_NK_583_Update)
              R_NK_583_update_completed_ <-& (R_NK_583_Update)
              // RAW reenables for NK
              // Phi start dependency for implicit/constant alternative.
              R_NK_583_sample_start_ <-& (R_NK_583_sample_start__ps)
              R_NK_583_update_start_ <-& (R_NK_583_update_start__ps)
              // Phi complete dependency.
              R_NK_583_sample_completed__ps <-& (R_NK_583_sample_completed_)
              R_NK_583_update_completed__ps <-& (R_NK_583_update_completed_)
              $phisequencer [ phi_stmt_579_phi_seq] : 
              phi_stmt_579_entry_trigger type_cast_582_sample_start__ps type_cast_582_sample_completed__ps type_cast_582_update_start__ps type_cast_582_update_completed__ps phi_stmt_579_loopback_trigger R_NK_583_sample_start__ps R_NK_583_sample_completed__ps R_NK_583_update_start__ps R_NK_583_update_completed__ps :
              phi_stmt_579_sample_start__ps phi_stmt_579_sample_completed__ps phi_stmt_579_update_start__ps phi_stmt_579_update_completed__ps :
              phi_stmt_579_entry_sample_req_ps phi_stmt_579_loopback_sample_req_ps : 
              phi_stmt_579_phi_mux_ack_ps
              // done: PHI Statement phi_stmt_579
              // start:  					imag1 := image[K]// bits of buffering = 16. 
              //  file prog.linked.opt.aa, line 239
              // Source expression
              // image[K]
              $T[array_obj_ref_587_base_address_calculated] 
              $T[array_obj_ref_587_sample_start_] 
              $T[array_obj_ref_587_sample_completed_] 
              $T[array_obj_ref_587_update_start_] 
              $T[array_obj_ref_587_update_completed_] 
              $T[array_obj_ref_587_word_address_calculated] 
              $T[array_obj_ref_587_root_address_calculated] 
              $T[array_obj_ref_587_offset_calculated] 
              $T[array_obj_ref_587_index_resized_0] 
              $T[array_obj_ref_587_index_scaled_0] 
              $T[array_obj_ref_587_index_computed_0] 
              // K
              // start: Forward dependencies from K to transition array_obj_ref_587_index_computed_0
              array_obj_ref_587_index_computed_0 <-& (phi_stmt_579_update_completed_)
              // done: Forward dependencies from K to transition array_obj_ref_587_index_computed_0
              ;;[array_obj_ref_587_index_resize_0] 
              {
                $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
              }
              array_obj_ref_587_index_computed_0 &-> (array_obj_ref_587_index_resize_0)
              array_obj_ref_587_index_resized_0 <-& (array_obj_ref_587_index_resize_0)
              ;;[array_obj_ref_587_index_scale_0] 
              {
                $T [scale_rename_req] $T [scale_rename_ack] // rename 
              }
              array_obj_ref_587_index_resized_0 &-> (array_obj_ref_587_index_scale_0)
              array_obj_ref_587_index_scaled_0 <-& (array_obj_ref_587_index_scale_0)
              ;;[array_obj_ref_587_final_index_sum_regn] 
              {
                $T [req] $T [ack] // rename
              }
              array_obj_ref_587_index_scaled_0 &-> (array_obj_ref_587_final_index_sum_regn)
              array_obj_ref_587_offset_calculated <-& (array_obj_ref_587_final_index_sum_regn)
              ;;[array_obj_ref_587_base_plus_offset] 
              {
                $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
              }
              array_obj_ref_587_offset_calculated &-> (array_obj_ref_587_base_plus_offset)
              array_obj_ref_587_root_address_calculated <-& (array_obj_ref_587_base_plus_offset)
              ;;[array_obj_ref_587_word_addrgen] 
              {
                $T [root_register_req] $T [root_register_ack]
              }
              array_obj_ref_587_root_address_calculated &-> (array_obj_ref_587_word_addrgen)
              array_obj_ref_587_word_address_calculated <-& (array_obj_ref_587_word_addrgen)
              ;;[array_obj_ref_587_Sample] 
              {
                ||[word_access_start] 
                {
                  ;;[word_0] 
                  {
                    $T [rr] $T [ra] 
                  }
                }
              }
              ;;[array_obj_ref_587_Update] 
              {
                ||[word_access_complete] 
                {
                  ;;[word_0] 
                  {
                    $T [cr] $T [ca] 
                  }
                }
                ;;[array_obj_ref_587_Merge] 
                {
                  $T [merge_req] $T [merge_ack]
                }
              }
              array_obj_ref_587_sample_start_ <-& (array_obj_ref_587_word_address_calculated)
              // reenable-joins
              phi_stmt_579_update_start_ o<-& (array_obj_ref_587_sample_completed_ 0)
              array_obj_ref_587_sample_start_ &-> (array_obj_ref_587_Sample)
              array_obj_ref_587_sample_completed_ <-& (array_obj_ref_587_Sample)
              array_obj_ref_587_sample_completed_ &-> ($null)
              array_obj_ref_587_update_start_ &-> (array_obj_ref_587_Update)
              array_obj_ref_587_update_completed_ <-& (array_obj_ref_587_Update)
              // self-release: 
              array_obj_ref_587_sample_start_ o<-& (array_obj_ref_587_sample_completed_ 1)
              $null &-> (array_obj_ref_587_update_start_)
              array_obj_ref_587_update_start_ o<-& (array_obj_ref_587_update_completed_ 0)
              // Target expression
              // (as target) imag1
              // start: WAR dependencies for imag1
              // done: WAR dependencies for imag1
              // end:  					imag1 := image[K]// bits of buffering = 16. 
              // start:  					ker1 := kernel[K]// bits of buffering = 16. 
              //  file prog.linked.opt.aa, line 240
              // Source expression
              // kernel[K]
              $T[array_obj_ref_591_base_address_calculated] 
              $T[array_obj_ref_591_sample_start_] 
              $T[array_obj_ref_591_sample_completed_] 
              $T[array_obj_ref_591_update_start_] 
              $T[array_obj_ref_591_update_completed_] 
              $T[array_obj_ref_591_word_address_calculated] 
              $T[array_obj_ref_591_root_address_calculated] 
              $T[array_obj_ref_591_offset_calculated] 
              $T[array_obj_ref_591_index_resized_0] 
              $T[array_obj_ref_591_index_scaled_0] 
              $T[array_obj_ref_591_index_computed_0] 
              // K
              // start: Forward dependencies from K to transition array_obj_ref_591_index_computed_0
              array_obj_ref_591_index_computed_0 <-& (phi_stmt_579_update_completed_)
              // done: Forward dependencies from K to transition array_obj_ref_591_index_computed_0
              ;;[array_obj_ref_591_index_resize_0] 
              {
                $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
              }
              array_obj_ref_591_index_computed_0 &-> (array_obj_ref_591_index_resize_0)
              array_obj_ref_591_index_resized_0 <-& (array_obj_ref_591_index_resize_0)
              ;;[array_obj_ref_591_index_scale_0] 
              {
                $T [scale_rename_req] $T [scale_rename_ack] // rename 
              }
              array_obj_ref_591_index_resized_0 &-> (array_obj_ref_591_index_scale_0)
              array_obj_ref_591_index_scaled_0 <-& (array_obj_ref_591_index_scale_0)
              ;;[array_obj_ref_591_final_index_sum_regn] 
              {
                $T [req] $T [ack] // rename
              }
              array_obj_ref_591_index_scaled_0 &-> (array_obj_ref_591_final_index_sum_regn)
              array_obj_ref_591_offset_calculated <-& (array_obj_ref_591_final_index_sum_regn)
              ;;[array_obj_ref_591_base_plus_offset] 
              {
                $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
              }
              array_obj_ref_591_offset_calculated &-> (array_obj_ref_591_base_plus_offset)
              array_obj_ref_591_root_address_calculated <-& (array_obj_ref_591_base_plus_offset)
              ;;[array_obj_ref_591_word_addrgen] 
              {
                $T [root_register_req] $T [root_register_ack]
              }
              array_obj_ref_591_root_address_calculated &-> (array_obj_ref_591_word_addrgen)
              array_obj_ref_591_word_address_calculated <-& (array_obj_ref_591_word_addrgen)
              ;;[array_obj_ref_591_Sample] 
              {
                ||[word_access_start] 
                {
                  ;;[word_0] 
                  {
                    $T [rr] $T [ra] 
                  }
                }
              }
              ;;[array_obj_ref_591_Update] 
              {
                ||[word_access_complete] 
                {
                  ;;[word_0] 
                  {
                    $T [cr] $T [ca] 
                  }
                }
                ;;[array_obj_ref_591_Merge] 
                {
                  $T [merge_req] $T [merge_ack]
                }
              }
              array_obj_ref_591_sample_start_ <-& (array_obj_ref_591_word_address_calculated)
              // reenable-joins
              phi_stmt_579_update_start_ o<-& (array_obj_ref_591_sample_completed_ 0)
              array_obj_ref_591_sample_start_ &-> (array_obj_ref_591_Sample)
              array_obj_ref_591_sample_completed_ <-& (array_obj_ref_591_Sample)
              array_obj_ref_591_sample_completed_ &-> ($null)
              array_obj_ref_591_update_start_ &-> (array_obj_ref_591_Update)
              array_obj_ref_591_update_completed_ <-& (array_obj_ref_591_Update)
              // self-release: 
              array_obj_ref_591_sample_start_ o<-& (array_obj_ref_591_sample_completed_ 1)
              $null &-> (array_obj_ref_591_update_start_)
              array_obj_ref_591_update_start_ o<-& (array_obj_ref_591_update_completed_ 0)
              // Target expression
              // (as target) ker1
              // start: WAR dependencies for ker1
              // done: WAR dependencies for ker1
              // end:  					ker1 := kernel[K]// bits of buffering = 16. 
              // start:  					K_517_delayed_5_0 := K $buffering 5// bits of buffering = 160. 
              //  file prog.linked.opt.aa, line 241
              $T[assign_stmt_595_sample_start_] 
              $T[assign_stmt_595_sample_completed_] 
              $T[assign_stmt_595_update_start_] 
              $T[assign_stmt_595_update_completed_] 
              // Source expression
              // K
              // Target expression
              // (as target) K_517_delayed_5_0
              // both source and target are implicit: use interlock 
              // Interlock 
              ;;[assign_stmt_595_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              ;;[assign_stmt_595_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              assign_stmt_595_sample_start_ &-> (assign_stmt_595_Sample)
              assign_stmt_595_sample_completed_ <-& (assign_stmt_595_Sample)
              assign_stmt_595_sample_completed_ &-> ($null)
              assign_stmt_595_update_start_ &-> (assign_stmt_595_Update)
              assign_stmt_595_update_completed_ <-& (assign_stmt_595_Update)
              // start: Forward dependencies from K to transition assign_stmt_595_sample_start_
              assign_stmt_595_sample_start_ <-& (phi_stmt_579_update_completed_)
              // done: Forward dependencies from K to transition assign_stmt_595_sample_start_
              // RAW reenables for K
              phi_stmt_579_update_start_ o<-& (assign_stmt_595_sample_completed_ 0)
              // self-release: 
              assign_stmt_595_sample_start_ o<-& (assign_stmt_595_sample_completed_ 1)
              $null &-> (assign_stmt_595_update_start_)
              assign_stmt_595_update_start_ o<-& (assign_stmt_595_update_completed_ 0)
              // start: WAR dependencies for K_517_delayed_5_0
              // done: WAR dependencies for K_517_delayed_5_0
              // end:  					K_517_delayed_5_0 := K $buffering 5// bits of buffering = 160. 
              // start:  					a[K_517_delayed_5_0] := (imag1 * ker1)// bits of buffering = 16. 
              //  file prog.linked.opt.aa, line 242
              // Source expression
              // (imag1 * ker1)
              $T[MUL_u16_u16_600_sample_start_] 
              $T[MUL_u16_u16_600_sample_completed_] 
              $T[MUL_u16_u16_600_update_start_] 
              $T[MUL_u16_u16_600_update_completed_] 
              // imag1
              // ker1
              // start: Forward dependencies from imag1 to transition MUL_u16_u16_600_sample_start_
              MUL_u16_u16_600_sample_start_ <-& (array_obj_ref_587_update_completed_)
              // done: Forward dependencies from imag1 to transition MUL_u16_u16_600_sample_start_
              // start: Forward dependencies from ker1 to transition MUL_u16_u16_600_sample_start_
              MUL_u16_u16_600_sample_start_ <-& (array_obj_ref_591_update_completed_)
              // done: Forward dependencies from ker1 to transition MUL_u16_u16_600_sample_start_
              ;;[MUL_u16_u16_600_Sample] 
              {
                // binary expression 
                $T [rr] $T [ra]  // (split) binary operation 
              }
              ;;[MUL_u16_u16_600_Update] 
              {
                // binary expression 
                $T [cr] $T [ca] // (split) binary operation 
              }
              MUL_u16_u16_600_sample_start_ &-> (MUL_u16_u16_600_Sample)
              MUL_u16_u16_600_sample_completed_ <-& (MUL_u16_u16_600_Sample)
              MUL_u16_u16_600_sample_completed_ &-> ($null)
              MUL_u16_u16_600_update_start_ &-> (MUL_u16_u16_600_Update)
              MUL_u16_u16_600_update_completed_ <-& (MUL_u16_u16_600_Update)
              // RAW reenables for imag1
              array_obj_ref_587_update_start_ o<-& (MUL_u16_u16_600_sample_completed_ 0)
              // RAW reenables for ker1
              array_obj_ref_591_update_start_ o<-& (MUL_u16_u16_600_sample_completed_ 0)
              // self-release: 
              MUL_u16_u16_600_sample_start_ o<-& (MUL_u16_u16_600_sample_completed_ 1)
              $null &-> (MUL_u16_u16_600_update_start_)
              MUL_u16_u16_600_update_start_ o<-& (MUL_u16_u16_600_update_completed_ 0)
              // Target expression
              // a[K_517_delayed_5_0]
              $T[array_obj_ref_597_sample_start_] 
              $T[array_obj_ref_597_sample_completed_] 
              $T[array_obj_ref_597_update_start_] 
              $T[array_obj_ref_597_update_completed_] 
              $T[array_obj_ref_597_word_address_calculated] 
              $T[array_obj_ref_597_root_address_calculated] 
              $T[array_obj_ref_597_offset_calculated] 
              $T[array_obj_ref_597_index_resized_0] 
              $T[array_obj_ref_597_index_scaled_0] 
              $T[array_obj_ref_597_index_computed_0] 
              // K_517_delayed_5_0
              // start: Forward dependencies from K_517_delayed_5_0 to transition array_obj_ref_597_index_computed_0
              array_obj_ref_597_index_computed_0 <-& (assign_stmt_595_update_completed_)
              // done: Forward dependencies from K_517_delayed_5_0 to transition array_obj_ref_597_index_computed_0
              ;;[array_obj_ref_597_index_resize_0] 
              {
                $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
              }
              array_obj_ref_597_index_computed_0 &-> (array_obj_ref_597_index_resize_0)
              array_obj_ref_597_index_resized_0 <-& (array_obj_ref_597_index_resize_0)
              ;;[array_obj_ref_597_index_scale_0] 
              {
                $T [scale_rename_req] $T [scale_rename_ack] // rename 
              }
              array_obj_ref_597_index_resized_0 &-> (array_obj_ref_597_index_scale_0)
              array_obj_ref_597_index_scaled_0 <-& (array_obj_ref_597_index_scale_0)
              ;;[array_obj_ref_597_final_index_sum_regn] 
              {
                $T [req] $T [ack] // rename
              }
              array_obj_ref_597_index_scaled_0 &-> (array_obj_ref_597_final_index_sum_regn)
              array_obj_ref_597_offset_calculated <-& (array_obj_ref_597_final_index_sum_regn)
              ;;[array_obj_ref_597_base_plus_offset] 
              {
                $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
              }
              array_obj_ref_597_offset_calculated &-> (array_obj_ref_597_base_plus_offset)
              array_obj_ref_597_root_address_calculated <-& (array_obj_ref_597_base_plus_offset)
              ;;[array_obj_ref_597_word_addrgen] 
              {
                $T [root_register_req] $T [root_register_ack]
              }
              array_obj_ref_597_root_address_calculated &-> (array_obj_ref_597_word_addrgen)
              array_obj_ref_597_word_address_calculated <-& (array_obj_ref_597_word_addrgen)
              ;;[array_obj_ref_597_Sample] 
              {
                ;;[array_obj_ref_597_Split] 
                {
                  $T [split_req] $T [split_ack]
                }
                ||[word_access_start] 
                {
                  ;;[word_0] 
                  {
                    $T [rr] $T [ra] 
                  }
                }
              }
              ;;[array_obj_ref_597_Update] 
              {
                ||[word_access_complete] 
                {
                  ;;[word_0] 
                  {
                    $T [cr] $T [ca] 
                  }
                }
              }
              array_obj_ref_597_sample_start_ <-& (array_obj_ref_597_word_address_calculated)
              // reenable-joins
              assign_stmt_595_update_start_ o<-& (array_obj_ref_597_sample_completed_ 0)
              array_obj_ref_597_sample_start_ &-> (array_obj_ref_597_Sample)
              array_obj_ref_597_sample_completed_ <-& (array_obj_ref_597_Sample)
              array_obj_ref_597_sample_completed_ &-> ($null)
              array_obj_ref_597_update_start_ &-> (array_obj_ref_597_Update)
              array_obj_ref_597_update_completed_ <-& (array_obj_ref_597_Update)
              // self-release: 
              array_obj_ref_597_sample_start_ o<-& (array_obj_ref_597_sample_completed_ 1)
              $null &-> (array_obj_ref_597_update_start_)
              array_obj_ref_597_update_start_ o<-& (array_obj_ref_597_update_completed_ 0)
              // start: Forward dependencies from (imag1 * ker1) to transition array_obj_ref_597_sample_start_
              array_obj_ref_597_sample_start_ <-& (MUL_u16_u16_600_update_completed_)
              // done: Forward dependencies from (imag1 * ker1) to transition array_obj_ref_597_sample_start_
              // RAW reenables for (imag1 * ker1)
              MUL_u16_u16_600_update_start_ o<-& (array_obj_ref_597_sample_completed_ 0)
              // end:  					a[K_517_delayed_5_0] := (imag1 * ker1)// bits of buffering = 16. 
              // start:  					total := (total + a[K])// bits of buffering = 16. 
              //  file prog.linked.opt.aa, line 243
              // Source expression
              // (total + a[K])
              $T[ADD_u16_u16_606_sample_start_] 
              $T[ADD_u16_u16_606_sample_completed_] 
              $T[ADD_u16_u16_606_update_start_] 
              $T[ADD_u16_u16_606_update_completed_] 
              // total
              $T[LOAD_total_603_sample_start_] 
              $T[LOAD_total_603_sample_completed_] 
              $T[LOAD_total_603_update_start_] 
              $T[LOAD_total_603_update_completed_] 
              $T[LOAD_total_603_word_address_calculated] 
              $T[LOAD_total_603_root_address_calculated] 
              LOAD_total_603_word_address_calculated <-& (LOAD_total_603_root_address_calculated)
              ;;[LOAD_total_603_Sample] 
              {
                ||[word_access_start] 
                {
                  ;;[word_0] 
                  {
                    $T [rr] $T [ra] 
                  }
                }
              }
              ;;[LOAD_total_603_Update] 
              {
                ||[word_access_complete] 
                {
                  ;;[word_0] 
                  {
                    $T [cr] $T [ca] 
                  }
                }
                ;;[LOAD_total_603_Merge] 
                {
                  $T [merge_req] $T [merge_ack]
                }
              }
              LOAD_total_603_sample_start_ <-& (LOAD_total_603_word_address_calculated)
              // reenable-joins
              LOAD_total_603_sample_start_ &-> (LOAD_total_603_Sample)
              LOAD_total_603_sample_completed_ <-& (LOAD_total_603_Sample)
              LOAD_total_603_sample_completed_ &-> ($null)
              LOAD_total_603_update_start_ &-> (LOAD_total_603_Update)
              LOAD_total_603_update_completed_ <-& (LOAD_total_603_Update)
              // self-release: 
              LOAD_total_603_sample_start_ o<-& (LOAD_total_603_sample_completed_ 1)
              $null &-> (LOAD_total_603_update_start_)
              LOAD_total_603_update_start_ o<-& (LOAD_total_603_update_completed_ 0)
              // a[K]
              $T[array_obj_ref_605_base_address_calculated] 
              $T[array_obj_ref_605_sample_start_] 
              $T[array_obj_ref_605_sample_completed_] 
              $T[array_obj_ref_605_update_start_] 
              $T[array_obj_ref_605_update_completed_] 
              $T[array_obj_ref_605_word_address_calculated] 
              $T[array_obj_ref_605_root_address_calculated] 
              $T[array_obj_ref_605_offset_calculated] 
              $T[array_obj_ref_605_index_resized_0] 
              $T[array_obj_ref_605_index_scaled_0] 
              $T[array_obj_ref_605_index_computed_0] 
              // K
              // start: Forward dependencies from K to transition array_obj_ref_605_index_computed_0
              array_obj_ref_605_index_computed_0 <-& (phi_stmt_579_update_completed_)
              // done: Forward dependencies from K to transition array_obj_ref_605_index_computed_0
              ;;[array_obj_ref_605_index_resize_0] 
              {
                $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
              }
              array_obj_ref_605_index_computed_0 &-> (array_obj_ref_605_index_resize_0)
              array_obj_ref_605_index_resized_0 <-& (array_obj_ref_605_index_resize_0)
              ;;[array_obj_ref_605_index_scale_0] 
              {
                $T [scale_rename_req] $T [scale_rename_ack] // rename 
              }
              array_obj_ref_605_index_resized_0 &-> (array_obj_ref_605_index_scale_0)
              array_obj_ref_605_index_scaled_0 <-& (array_obj_ref_605_index_scale_0)
              ;;[array_obj_ref_605_final_index_sum_regn] 
              {
                $T [req] $T [ack] // rename
              }
              array_obj_ref_605_index_scaled_0 &-> (array_obj_ref_605_final_index_sum_regn)
              array_obj_ref_605_offset_calculated <-& (array_obj_ref_605_final_index_sum_regn)
              ;;[array_obj_ref_605_base_plus_offset] 
              {
                $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
              }
              array_obj_ref_605_offset_calculated &-> (array_obj_ref_605_base_plus_offset)
              array_obj_ref_605_root_address_calculated <-& (array_obj_ref_605_base_plus_offset)
              ;;[array_obj_ref_605_word_addrgen] 
              {
                $T [root_register_req] $T [root_register_ack]
              }
              array_obj_ref_605_root_address_calculated &-> (array_obj_ref_605_word_addrgen)
              array_obj_ref_605_word_address_calculated <-& (array_obj_ref_605_word_addrgen)
              ;;[array_obj_ref_605_Sample] 
              {
                ||[word_access_start] 
                {
                  ;;[word_0] 
                  {
                    $T [rr] $T [ra] 
                  }
                }
              }
              ;;[array_obj_ref_605_Update] 
              {
                ||[word_access_complete] 
                {
                  ;;[word_0] 
                  {
                    $T [cr] $T [ca] 
                  }
                }
                ;;[array_obj_ref_605_Merge] 
                {
                  $T [merge_req] $T [merge_ack]
                }
              }
              array_obj_ref_605_sample_start_ <-& (array_obj_ref_605_word_address_calculated)
              // reenable-joins
              phi_stmt_579_update_start_ o<-& (array_obj_ref_605_sample_completed_ 0)
              array_obj_ref_605_sample_start_ &-> (array_obj_ref_605_Sample)
              array_obj_ref_605_sample_completed_ <-& (array_obj_ref_605_Sample)
              array_obj_ref_605_sample_completed_ &-> ($null)
              array_obj_ref_605_update_start_ &-> (array_obj_ref_605_Update)
              array_obj_ref_605_update_completed_ <-& (array_obj_ref_605_Update)
              // self-release: 
              array_obj_ref_605_sample_start_ o<-& (array_obj_ref_605_sample_completed_ 1)
              $null &-> (array_obj_ref_605_update_start_)
              array_obj_ref_605_update_start_ o<-& (array_obj_ref_605_update_completed_ 0)
              // start: Forward dependencies from total to transition ADD_u16_u16_606_sample_start_
              ADD_u16_u16_606_sample_start_ <-& (LOAD_total_603_update_completed_)
              // done: Forward dependencies from total to transition ADD_u16_u16_606_sample_start_
              // start: Forward dependencies from a[K] to transition ADD_u16_u16_606_sample_start_
              ADD_u16_u16_606_sample_start_ <-& (array_obj_ref_605_update_completed_)
              // done: Forward dependencies from a[K] to transition ADD_u16_u16_606_sample_start_
              ;;[ADD_u16_u16_606_Sample] 
              {
                // binary expression 
                $T [rr] $T [ra]  // (split) binary operation 
              }
              ;;[ADD_u16_u16_606_Update] 
              {
                // binary expression 
                $T [cr] $T [ca] // (split) binary operation 
              }
              ADD_u16_u16_606_sample_start_ &-> (ADD_u16_u16_606_Sample)
              ADD_u16_u16_606_sample_completed_ <-& (ADD_u16_u16_606_Sample)
              ADD_u16_u16_606_sample_completed_ &-> ($null)
              ADD_u16_u16_606_update_start_ &-> (ADD_u16_u16_606_Update)
              ADD_u16_u16_606_update_completed_ <-& (ADD_u16_u16_606_Update)
              // RAW reenables for total
              LOAD_total_603_update_start_ o<-& (ADD_u16_u16_606_sample_completed_ 0)
              // RAW reenables for a[K]
              array_obj_ref_605_update_start_ o<-& (ADD_u16_u16_606_sample_completed_ 0)
              // self-release: 
              ADD_u16_u16_606_sample_start_ o<-& (ADD_u16_u16_606_sample_completed_ 1)
              $null &-> (ADD_u16_u16_606_update_start_)
              ADD_u16_u16_606_update_start_ o<-& (ADD_u16_u16_606_update_completed_ 0)
              // Target expression
              // (as target) total
              $T[STORE_total_602_sample_start_] 
              $T[STORE_total_602_sample_completed_] 
              $T[STORE_total_602_update_start_] 
              $T[STORE_total_602_update_completed_] 
              // total
              $T[STORE_total_602_word_address_calculated] 
              $T[STORE_total_602_root_address_calculated] 
              STORE_total_602_word_address_calculated <-& (STORE_total_602_root_address_calculated)
              ;;[STORE_total_602_Sample] 
              {
                ;;[STORE_total_602_Split] 
                {
                  $T [split_req] $T [split_ack]
                }
                ||[word_access_start] 
                {
                  ;;[word_0] 
                  {
                    $T [rr] $T [ra] 
                  }
                }
              }
              ;;[STORE_total_602_Update] 
              {
                ||[word_access_complete] 
                {
                  ;;[word_0] 
                  {
                    $T [cr] $T [ca] 
                  }
                }
              }
              STORE_total_602_sample_start_ <-& (STORE_total_602_word_address_calculated)
              // reenable-joins
              STORE_total_602_sample_start_ &-> (STORE_total_602_Sample)
              STORE_total_602_sample_completed_ <-& (STORE_total_602_Sample)
              STORE_total_602_sample_completed_ &-> ($null)
              STORE_total_602_update_start_ &-> (STORE_total_602_Update)
              STORE_total_602_update_completed_ <-& (STORE_total_602_Update)
              // self-release: 
              STORE_total_602_sample_start_ o<-& (STORE_total_602_sample_completed_ 1)
              $null &-> (STORE_total_602_update_start_)
              STORE_total_602_update_start_ o<-& (STORE_total_602_update_completed_ 0)
              // start: Forward dependencies from (total + a[K]) to transition STORE_total_602_sample_start_
              STORE_total_602_sample_start_ <-& (ADD_u16_u16_606_update_completed_)
              // done: Forward dependencies from (total + a[K]) to transition STORE_total_602_sample_start_
              // RAW reenables for (total + a[K])
              ADD_u16_u16_606_update_start_ o<-& (STORE_total_602_sample_completed_ 0)
              // end:  					total := (total + a[K])// bits of buffering = 16. 
              // start:  					NK := (K + 1 )// bits of buffering = 32. 
              //  file prog.linked.opt.aa, line 244
              // Source expression
              // (K + 1 )
              $T[ADD_u32_u32_611_sample_start_] 
              $T[ADD_u32_u32_611_sample_completed_] 
              $T[ADD_u32_u32_611_update_start_] 
              $T[ADD_u32_u32_611_update_completed_] 
              // K
              // start: Forward dependencies from K to transition ADD_u32_u32_611_sample_start_
              ADD_u32_u32_611_sample_start_ <-& (phi_stmt_579_update_completed_)
              // done: Forward dependencies from K to transition ADD_u32_u32_611_sample_start_
              ;;[ADD_u32_u32_611_Sample] 
              {
                // binary expression 
                $T [rr] $T [ra]  // (split) binary operation 
              }
              ;;[ADD_u32_u32_611_Update] 
              {
                // binary expression 
                $T [cr] $T [ca] // (split) binary operation 
              }
              ADD_u32_u32_611_sample_start_ &-> (ADD_u32_u32_611_Sample)
              ADD_u32_u32_611_sample_completed_ <-& (ADD_u32_u32_611_Sample)
              ADD_u32_u32_611_sample_completed_ &-> ($null)
              ADD_u32_u32_611_update_start_ &-> (ADD_u32_u32_611_Update)
              ADD_u32_u32_611_update_completed_ <-& (ADD_u32_u32_611_Update)
              // RAW reenables for K
              phi_stmt_579_update_start_ o<-& (ADD_u32_u32_611_sample_completed_ 0)
              // self-release: 
              ADD_u32_u32_611_sample_start_ o<-& (ADD_u32_u32_611_sample_completed_ 1)
              $null &-> (ADD_u32_u32_611_update_start_)
              ADD_u32_u32_611_update_start_ o<-& (ADD_u32_u32_611_update_completed_ 0)
              // Target expression
              // (as target) NK
              // start: WAR dependencies for NK
              // WAR dependency: Read: NK before Write: 					NK := (K + 1 )// bits of buffering = 32. 
              ADD_u32_u32_611_update_start_ <-& (phi_stmt_579_sample_completed_)
              phi_stmt_579_sample_start_ o<-& (ADD_u32_u32_611_update_completed_ 0)
              // WAR dependency: release  Read: NK with Write: 					NK := (K + 1 )// bits of buffering = 32. 
              // done: WAR dependencies for NK
              // end:  					NK := (K + 1 ) $buffering 2// bits of buffering = 64. 
              // (NK < 16 )
              // NK
              $T [loop_body_delay_to_condition_start] $delay
              loop_body_start &-> (loop_body_delay_to_condition_start)
              loop_body_delay_to_condition_start &-> (condition_evaluated)
              // start: Forward dependencies from (NK < 16 ) to transition condition_evaluated
              condition_evaluated <-& (ADD_u32_u32_611_update_completed_)
              // done: Forward dependencies from (NK < 16 ) to transition condition_evaluated
              condition_evaluated &-> ($null)
              // load-store dependencies..
              // memory-space  memory_space_7
              //  LOAD_total_603 load
              //  STORE_total_602 store
              $T [LOAD_total_603_STORE_total_602_delay] $delay
              // LOAD_total_603(load) -> STORE_total_602(store)
              STORE_total_602_sample_start_ <-& (LOAD_total_603_STORE_total_602_delay)
              LOAD_total_603_STORE_total_602_delay <-& (LOAD_total_603_sample_completed_)
              // reenable across ring for memory space memory_space_7
              $T[ring_reenable_memory_space_7] 
              // ordered memory-subsystem.
              ring_reenable_memory_space_7 <-& (STORE_total_602_sample_completed_)
              LOAD_total_603_sample_start_ o<-& (ring_reenable_memory_space_7 1)
              // memory-space  memory_space_3
              //  array_obj_ref_587 load
              // reenable across ring for memory space memory_space_3
              // leading and trailing sets are the same... no ring dependency
              // memory-space  memory_space_2
              //  array_obj_ref_597 store
              //  array_obj_ref_605 load
              $T [array_obj_ref_597_array_obj_ref_605_delay] $delay
              // array_obj_ref_597(store) -> array_obj_ref_605(load)
              array_obj_ref_605_sample_start_ <-& (array_obj_ref_597_array_obj_ref_605_delay)
              array_obj_ref_597_array_obj_ref_605_delay <-& (array_obj_ref_597_sample_completed_)
              // reenable across ring for memory space memory_space_2
              $T[ring_reenable_memory_space_2] 
              // ordered memory-subsystem.
              ring_reenable_memory_space_2 <-& (array_obj_ref_597_sample_completed_)
              // ordered memory-subsystem.
              ring_reenable_memory_space_2 <-& (array_obj_ref_605_sample_completed_)
              array_obj_ref_597_sample_start_ o<-& (ring_reenable_memory_space_2 1)
              // memory-space  memory_space_4
              //  array_obj_ref_591 load
              // reenable across ring for memory space memory_space_4
              // leading and trailing sets are the same... no ring dependency
            }
            ( first_time_through_loop_body  back_edge_to_loop_body) 
            ( condition_evaluated )
            ;; [loop_exit] 
            {
              $T [ack] 
            }
            ;; [loop_taken] 
            {
              $T [ack] 
            }
            do_while_stmt_577__entry__ <-| ($entry)
            loop_body_done <-| ( do_while_stmt_577_loop_body ) 
            condition_done |-> (loop_exit loop_taken)
            do_while_stmt_577__exit__ |-> ($exit)
            $bind condition_done <= do_while_stmt_577_loop_body : condition_evaluated
            $bind do_while_stmt_577__entry__  => do_while_stmt_577_loop_body : first_time_through_loop_body 
            $bind loop_back  => do_while_stmt_577_loop_body : back_edge_to_loop_body 
            $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_577__exit__)
          }
          do_while_stmt_577__entry__ |-> (do_while_stmt_577)
          do_while_stmt_577__exit__ <-| (do_while_stmt_577)
          do_while_stmt_577__entry__ <-| (branch_block_stmt_576__entry__)
          do_while_stmt_577__exit__ |-> (branch_block_stmt_576__exit__)
        }
        branch_block_stmt_576__entry__ |-> (branch_block_stmt_576)
        branch_block_stmt_576__exit__ <-| (branch_block_stmt_576)
        ::[call_stmt_624_to_assign_stmt_638] 
        {
          // start: 			$call accessMem (0  (L + G) total ) (rdata ) 
          //  file prog.linked.opt.aa, line 247
          $T[call_stmt_624_sample_start_] 
          $T[call_stmt_624_sample_completed_] 
          $T[call_stmt_624_update_start_] 
          $T[call_stmt_624_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // (L + G)
          $T[ADD_u12_u12_621_sample_start_] 
          $T[ADD_u12_u12_621_sample_completed_] 
          $T[ADD_u12_u12_621_update_start_] 
          $T[ADD_u12_u12_621_update_completed_] 
          // L
          // G
          // start: Forward dependencies from L to transition ADD_u12_u12_621_sample_start_
          // done: Forward dependencies from L to transition ADD_u12_u12_621_sample_start_
          // start: Forward dependencies from G to transition ADD_u12_u12_621_sample_start_
          // done: Forward dependencies from G to transition ADD_u12_u12_621_sample_start_
          ;;[ADD_u12_u12_621_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u12_u12_621_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u12_u12_621_sample_start_ &-> (ADD_u12_u12_621_Sample)
          ADD_u12_u12_621_sample_completed_ <-& (ADD_u12_u12_621_Sample)
          ADD_u12_u12_621_sample_completed_ &-> ($null)
          ADD_u12_u12_621_update_start_ &-> (ADD_u12_u12_621_Update)
          ADD_u12_u12_621_update_completed_ <-& (ADD_u12_u12_621_Update)
          // Call input argument 2
          // total
          $T[LOAD_total_622_sample_start_] 
          $T[LOAD_total_622_sample_completed_] 
          $T[LOAD_total_622_update_start_] 
          $T[LOAD_total_622_update_completed_] 
          $T[LOAD_total_622_word_address_calculated] 
          $T[LOAD_total_622_root_address_calculated] 
          LOAD_total_622_word_address_calculated <-& (LOAD_total_622_root_address_calculated)
          ;;[LOAD_total_622_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[LOAD_total_622_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[LOAD_total_622_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          LOAD_total_622_sample_start_ <-& (LOAD_total_622_word_address_calculated)
          LOAD_total_622_sample_start_ &-> (LOAD_total_622_Sample)
          LOAD_total_622_sample_completed_ <-& (LOAD_total_622_Sample)
          LOAD_total_622_sample_completed_ &-> ($null)
          LOAD_total_622_update_start_ &-> (LOAD_total_622_Update)
          LOAD_total_622_update_completed_ <-& (LOAD_total_622_Update)
          // start: Forward dependencies from (L + G) to transition call_stmt_624_sample_start_
          call_stmt_624_sample_start_ <-& (ADD_u12_u12_621_update_completed_)
          // done: Forward dependencies from (L + G) to transition call_stmt_624_sample_start_
          // start: Forward dependencies from total to transition call_stmt_624_sample_start_
          call_stmt_624_sample_start_ <-& (LOAD_total_622_update_completed_)
          // done: Forward dependencies from total to transition call_stmt_624_sample_start_
          ;;[call_stmt_624_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_624_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_624_sample_start_ &-> (call_stmt_624_Sample)
          call_stmt_624_sample_completed_ <-& (call_stmt_624_Sample)
          call_stmt_624_sample_completed_ &-> ($null)
          call_stmt_624_update_start_ &-> (call_stmt_624_Update)
          call_stmt_624_update_completed_ <-& (call_stmt_624_Update)
          // Call output argument 0
          // (as target) rdata
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // end: 			$call accessMem (0  (L + G) total ) (rdata ) 
          // start:  			f := (zer && (L + G))// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 248
          // Source expression
          // (zer && (L + G))
          $T[CONCAT_u4_u16_630_sample_start_] 
          $T[CONCAT_u4_u16_630_sample_completed_] 
          $T[CONCAT_u4_u16_630_update_start_] 
          $T[CONCAT_u4_u16_630_update_completed_] 
          // zer
          $T[LOAD_zer_626_sample_start_] 
          $T[LOAD_zer_626_sample_completed_] 
          $T[LOAD_zer_626_update_start_] 
          $T[LOAD_zer_626_update_completed_] 
          $T[LOAD_zer_626_word_address_calculated] 
          $T[LOAD_zer_626_root_address_calculated] 
          LOAD_zer_626_word_address_calculated <-& (LOAD_zer_626_root_address_calculated)
          ;;[LOAD_zer_626_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[LOAD_zer_626_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[LOAD_zer_626_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          LOAD_zer_626_sample_start_ <-& (LOAD_zer_626_word_address_calculated)
          LOAD_zer_626_sample_start_ &-> (LOAD_zer_626_Sample)
          LOAD_zer_626_sample_completed_ <-& (LOAD_zer_626_Sample)
          LOAD_zer_626_sample_completed_ &-> ($null)
          LOAD_zer_626_update_start_ &-> (LOAD_zer_626_Update)
          LOAD_zer_626_update_completed_ <-& (LOAD_zer_626_Update)
          // (L + G)
          // L
          // G
          // start: Forward dependencies from zer to transition CONCAT_u4_u16_630_sample_start_
          CONCAT_u4_u16_630_sample_start_ <-& (LOAD_zer_626_update_completed_)
          // done: Forward dependencies from zer to transition CONCAT_u4_u16_630_sample_start_
          // start: Forward dependencies from (L + G) to transition CONCAT_u4_u16_630_sample_start_
          // done: Forward dependencies from (L + G) to transition CONCAT_u4_u16_630_sample_start_
          ;;[CONCAT_u4_u16_630_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u4_u16_630_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u4_u16_630_sample_start_ &-> (CONCAT_u4_u16_630_Sample)
          CONCAT_u4_u16_630_sample_completed_ <-& (CONCAT_u4_u16_630_Sample)
          CONCAT_u4_u16_630_sample_completed_ &-> ($null)
          CONCAT_u4_u16_630_update_start_ &-> (CONCAT_u4_u16_630_Update)
          CONCAT_u4_u16_630_update_completed_ <-& (CONCAT_u4_u16_630_Update)
          // Target expression
          // (as target) f
          // start: WAR dependencies for f
          // done: WAR dependencies for f
          // end:  			f := (zer && (L + G))// bits of buffering = 16. 
          // start:  			acc_mem_add := f// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 249
          // Source expression
          // f
          // Target expression
          // (as target) acc_mem_add
          $T[WPIPE_acc_mem_add_632_sample_start_] 
          $T[WPIPE_acc_mem_add_632_sample_completed_] 
          $T[WPIPE_acc_mem_add_632_update_start_] 
          $T[WPIPE_acc_mem_add_632_update_completed_] 
          ;;[WPIPE_acc_mem_add_632_Sample] 
          {
            // pipe write sample-start acc_mem_add
            $T [req] $T [ack] 
          }
          ;;[WPIPE_acc_mem_add_632_Update] 
          {
            // pipe write update (complete) acc_mem_add
            $T [req] $T [ack] 
          }
          WPIPE_acc_mem_add_632_sample_start_ &-> (WPIPE_acc_mem_add_632_Sample)
          WPIPE_acc_mem_add_632_sample_completed_ <-& (WPIPE_acc_mem_add_632_Sample)
          WPIPE_acc_mem_add_632_update_start_ <-& (WPIPE_acc_mem_add_632_sample_completed_)
          WPIPE_acc_mem_add_632_update_start_ &-> (WPIPE_acc_mem_add_632_Update)
          WPIPE_acc_mem_add_632_update_completed_ <-& (WPIPE_acc_mem_add_632_Update)
          // start: Forward dependencies from f to transition WPIPE_acc_mem_add_632_sample_start_
          WPIPE_acc_mem_add_632_sample_start_ <-& (CONCAT_u4_u16_630_update_completed_)
          // done: Forward dependencies from f to transition WPIPE_acc_mem_add_632_sample_start_
          // end:  			acc_mem_add := f// bits of buffering = 16. 
          // start:  			acc_mem := mem_array[f]// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 250
          // Source expression
          // mem_array[f]
          $T[array_obj_ref_637_base_address_calculated] 
          $T[array_obj_ref_637_sample_start_] 
          $T[array_obj_ref_637_sample_completed_] 
          $T[array_obj_ref_637_update_start_] 
          $T[array_obj_ref_637_update_completed_] 
          $T[array_obj_ref_637_word_address_calculated] 
          $T[array_obj_ref_637_root_address_calculated] 
          $T[array_obj_ref_637_offset_calculated] 
          $T[array_obj_ref_637_index_resized_0] 
          $T[array_obj_ref_637_index_scaled_0] 
          $T[array_obj_ref_637_index_computed_0] 
          // f
          // start: Forward dependencies from f to transition array_obj_ref_637_index_computed_0
          array_obj_ref_637_index_computed_0 <-& (CONCAT_u4_u16_630_update_completed_)
          // done: Forward dependencies from f to transition array_obj_ref_637_index_computed_0
          ;;[array_obj_ref_637_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_637_index_computed_0 &-> (array_obj_ref_637_index_resize_0)
          array_obj_ref_637_index_resized_0 <-& (array_obj_ref_637_index_resize_0)
          ;;[array_obj_ref_637_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_637_index_resized_0 &-> (array_obj_ref_637_index_scale_0)
          array_obj_ref_637_index_scaled_0 <-& (array_obj_ref_637_index_scale_0)
          ;;[array_obj_ref_637_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_637_index_scaled_0 &-> (array_obj_ref_637_final_index_sum_regn)
          array_obj_ref_637_offset_calculated <-& (array_obj_ref_637_final_index_sum_regn)
          ;;[array_obj_ref_637_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_637_offset_calculated &-> (array_obj_ref_637_base_plus_offset)
          array_obj_ref_637_root_address_calculated <-& (array_obj_ref_637_base_plus_offset)
          ;;[array_obj_ref_637_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_637_root_address_calculated &-> (array_obj_ref_637_word_addrgen)
          array_obj_ref_637_word_address_calculated <-& (array_obj_ref_637_word_addrgen)
          ;;[array_obj_ref_637_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_637_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_637_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_637_sample_start_ <-& (array_obj_ref_637_word_address_calculated)
          array_obj_ref_637_sample_start_ &-> (array_obj_ref_637_Sample)
          array_obj_ref_637_sample_completed_ <-& (array_obj_ref_637_Sample)
          array_obj_ref_637_sample_completed_ &-> ($null)
          array_obj_ref_637_update_start_ &-> (array_obj_ref_637_Update)
          array_obj_ref_637_update_completed_ <-& (array_obj_ref_637_Update)
          // Target expression
          // (as target) acc_mem
          $T[WPIPE_acc_mem_635_sample_start_] 
          $T[WPIPE_acc_mem_635_sample_completed_] 
          $T[WPIPE_acc_mem_635_update_start_] 
          $T[WPIPE_acc_mem_635_update_completed_] 
          ;;[WPIPE_acc_mem_635_Sample] 
          {
            // pipe write sample-start acc_mem
            $T [req] $T [ack] 
          }
          ;;[WPIPE_acc_mem_635_Update] 
          {
            // pipe write update (complete) acc_mem
            $T [req] $T [ack] 
          }
          WPIPE_acc_mem_635_sample_start_ &-> (WPIPE_acc_mem_635_Sample)
          WPIPE_acc_mem_635_sample_completed_ <-& (WPIPE_acc_mem_635_Sample)
          WPIPE_acc_mem_635_update_start_ <-& (WPIPE_acc_mem_635_sample_completed_)
          WPIPE_acc_mem_635_update_start_ &-> (WPIPE_acc_mem_635_Update)
          WPIPE_acc_mem_635_update_completed_ <-& (WPIPE_acc_mem_635_Update)
          // start: Forward dependencies from mem_array[f] to transition WPIPE_acc_mem_635_sample_start_
          WPIPE_acc_mem_635_sample_start_ <-& (array_obj_ref_637_update_completed_)
          // done: Forward dependencies from mem_array[f] to transition WPIPE_acc_mem_635_sample_start_
          // end:  			acc_mem := mem_array[f]// bits of buffering = 16. 
          // load-store dependencies..
          // memory-space  memory_space_5
          //  call_stmt_624 store
          //  array_obj_ref_637 load
          $T [call_stmt_624_array_obj_ref_637_delay] $delay
          // call_stmt_624(store) -> array_obj_ref_637(load)
          array_obj_ref_637_sample_start_ <-& (call_stmt_624_array_obj_ref_637_delay)
          call_stmt_624_array_obj_ref_637_delay <-& (call_stmt_624_update_completed_)
          // memory-space  memory_space_7
          //  LOAD_total_622 load
          // memory-space  memory_space_8
          //  LOAD_zer_626 load
          // pipe read/write dependencies for pipe acc_mem
          // read-dependencies for pipe acc_mem
          // write-dependencies for pipe acc_mem
          // signal dependencies for acc_mem
          // pipe read/write dependencies for pipe acc_mem_add
          // read-dependencies for pipe acc_mem_add
          // write-dependencies for pipe acc_mem_add
          // signal dependencies for acc_mem_add
        }
        call_stmt_624_to_assign_stmt_638__entry__ |-> (call_stmt_624_to_assign_stmt_638)
        call_stmt_624_to_assign_stmt_638__exit__ <-| (call_stmt_624_to_assign_stmt_638)
        <>[branch_block_stmt_639] // Branch Block  file prog.linked.opt.aa, line 251
        {
          $P [branch_block_stmt_639__entry__]
          branch_block_stmt_639__entry__ <-| ($entry)
          $P [branch_block_stmt_639__exit__]
          branch_block_stmt_639__exit__ |-> ($exit)
          $P [do_while_stmt_640__entry__] 
          $P [do_while_stmt_640__exit__] 
          // do-while-statement  
          //  file prog.linked.opt.aa, line 253
          <o> [do_while_stmt_640]  $depth 7 $buffering 2 
          {
            $P[do_while_stmt_640__entry__] 
            $P[do_while_stmt_640__exit__] 
            $P[loop_back] 
            $P[condition_done] 
            $P[loop_body_done] 
            $pipeline [do_while_stmt_640_loop_body] 
            {
              // Pipelined!
              $T[back_edge_to_loop_body] 
              $T[first_time_through_loop_body] 
              $T[loop_body_start] 
              $T[condition_evaluated] 
              $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
              $entry <-& (loop_body_start)
              $T[aggregated_phi_sample_req] 
              $T[aggregated_phi_sample_ack] 
              $T[aggregated_phi_update_req] 
              $T[aggregated_phi_update_ack] 
              // do not loop-back unless all phi's have used up their triggering tokens.
              condition_evaluated <-& (aggregated_phi_update_ack)
              aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
              // start:  PHI statement phi_stmt_642
              // 					$phi H := 					  ($bitcast ($uint<12>) 0  ) $on   $entry 					  NH $on   $loopback 
              // type of target is $uint<12>
              $T[phi_stmt_642_sample_start_] 
              $T[phi_stmt_642_sample_completed_] 
              $T[phi_stmt_642_update_start_] 
              $T[phi_stmt_642_update_completed_] 
              $T[phi_stmt_642_sample_start__ps] 
              phi_stmt_642_sample_start__ps <-& (aggregated_phi_sample_req)
              $T[phi_stmt_642_sample_completed__ps] 
              phi_stmt_642_sample_completed__ps &-> (aggregated_phi_sample_ack)
              $T[phi_stmt_642_update_start__ps] 
              phi_stmt_642_update_start__ps <-& (aggregated_phi_update_req)
              $T[phi_stmt_642_update_completed__ps] 
              phi_stmt_642_update_completed_ <-& (phi_stmt_642_update_completed__ps)
              aggregated_phi_sample_req <-& (phi_stmt_642_sample_start_)
              aggregated_phi_sample_ack &-> (phi_stmt_642_sample_completed_)
              aggregated_phi_update_req <-& (phi_stmt_642_update_start_)
              $T[phi_stmt_642_loopback_trigger] 
              phi_stmt_642_loopback_trigger <-& (back_edge_to_loop_body)
              $T[phi_stmt_642_loopback_sample_req] 
              $T[phi_stmt_642_loopback_sample_req_ps] 
              phi_stmt_642_loopback_sample_req <-& (phi_stmt_642_loopback_sample_req_ps)
              phi_stmt_642_loopback_sample_req &-> ($null)
              $T[phi_stmt_642_entry_trigger] 
              phi_stmt_642_entry_trigger <-& (first_time_through_loop_body)
              $T[phi_stmt_642_entry_sample_req] 
              $T[phi_stmt_642_entry_sample_req_ps] 
              phi_stmt_642_entry_sample_req <-& (phi_stmt_642_entry_sample_req_ps)
              phi_stmt_642_entry_sample_req &-> ($null)
              phi_stmt_642_update_start_ o<-& (phi_stmt_642_update_completed_ 0)
              phi_stmt_642_sample_start_ o<-& (phi_stmt_642_sample_completed_ 1)
              $T[phi_stmt_642_merged_reqs] 
              $T[phi_stmt_642_phi_mux_ack] 
              $T[phi_stmt_642_phi_mux_ack_ps] 
              phi_stmt_642_phi_mux_ack_ps <-& (phi_stmt_642_phi_mux_ack)
              aggregated_phi_update_ack <-& (phi_stmt_642_update_completed_)
              $T[type_cast_645_sample_start__ps] 
              $T[type_cast_645_sample_completed__ps] 
              $T[type_cast_645_update_start__ps] 
              $T[type_cast_645_update_completed__ps] 
              // dummies for constant expression source for phi
              $T[type_cast_645_sample_start_] 
              $T[type_cast_645_sample_completed_] 
              type_cast_645_sample_completed_ <-& (type_cast_645_sample_start_)
              $T[type_cast_645_update_start_] 
              $T [type_cast_645_update_completed_] $delay 
              type_cast_645_update_completed_ <-& (type_cast_645_update_start_)
              // Phi start dependency for implicit/constant alternative.
              type_cast_645_sample_start_ <-& (type_cast_645_sample_start__ps)
              type_cast_645_update_start_ <-& (type_cast_645_update_start__ps)
              // Phi complete dependency.
              type_cast_645_sample_completed__ps <-& (type_cast_645_sample_completed_)
              type_cast_645_update_completed__ps <-& (type_cast_645_update_completed_)
              $T[R_NH_646_sample_start__ps] 
              $T[R_NH_646_sample_completed__ps] 
              $T[R_NH_646_update_start__ps] 
              $T[R_NH_646_update_completed__ps] 
              // interlock for implicit-variable-ref/signal-read in Phi alternative 1
              $T[R_NH_646_sample_start_] 
              $T[R_NH_646_sample_completed_] 
              $T[R_NH_646_update_start_] 
              $T[R_NH_646_update_completed_] 
              ;;[R_NH_646_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              R_NH_646_sample_start_ &-> (R_NH_646_Sample)
              R_NH_646_sample_completed_ <-& (R_NH_646_Sample)
              ;;[R_NH_646_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              R_NH_646_update_start_ &-> (R_NH_646_Update)
              R_NH_646_update_completed_ <-& (R_NH_646_Update)
              // RAW reenables for NH
              // Phi start dependency for implicit/constant alternative.
              R_NH_646_sample_start_ <-& (R_NH_646_sample_start__ps)
              R_NH_646_update_start_ <-& (R_NH_646_update_start__ps)
              // Phi complete dependency.
              R_NH_646_sample_completed__ps <-& (R_NH_646_sample_completed_)
              R_NH_646_update_completed__ps <-& (R_NH_646_update_completed_)
              $phisequencer [ phi_stmt_642_phi_seq] : 
              phi_stmt_642_entry_trigger type_cast_645_sample_start__ps type_cast_645_sample_completed__ps type_cast_645_update_start__ps type_cast_645_update_completed__ps phi_stmt_642_loopback_trigger R_NH_646_sample_start__ps R_NH_646_sample_completed__ps R_NH_646_update_start__ps R_NH_646_update_completed__ps :
              phi_stmt_642_sample_start__ps phi_stmt_642_sample_completed__ps phi_stmt_642_update_start__ps phi_stmt_642_update_completed__ps :
              phi_stmt_642_entry_sample_req_ps phi_stmt_642_loopback_sample_req_ps : 
              phi_stmt_642_phi_mux_ack_ps
              // done: PHI Statement phi_stmt_642
              // start:  					HH := (H + 1 )// bits of buffering = 12. 
              //  file prog.linked.opt.aa, line 259
              // Source expression
              // (H + 1 )
              $T[ADD_u12_u12_651_sample_start_] 
              $T[ADD_u12_u12_651_sample_completed_] 
              $T[ADD_u12_u12_651_update_start_] 
              $T[ADD_u12_u12_651_update_completed_] 
              // H
              // start: Forward dependencies from H to transition ADD_u12_u12_651_sample_start_
              ADD_u12_u12_651_sample_start_ <-& (phi_stmt_642_update_completed_)
              // done: Forward dependencies from H to transition ADD_u12_u12_651_sample_start_
              ;;[ADD_u12_u12_651_Sample] 
              {
                // binary expression 
                $T [rr] $T [ra]  // (split) binary operation 
              }
              ;;[ADD_u12_u12_651_Update] 
              {
                // binary expression 
                $T [cr] $T [ca] // (split) binary operation 
              }
              ADD_u12_u12_651_sample_start_ &-> (ADD_u12_u12_651_Sample)
              ADD_u12_u12_651_sample_completed_ <-& (ADD_u12_u12_651_Sample)
              ADD_u12_u12_651_sample_completed_ &-> ($null)
              ADD_u12_u12_651_update_start_ &-> (ADD_u12_u12_651_Update)
              ADD_u12_u12_651_update_completed_ <-& (ADD_u12_u12_651_Update)
              // RAW reenables for H
              phi_stmt_642_update_start_ o<-& (ADD_u12_u12_651_sample_completed_ 0)
              // self-release: 
              ADD_u12_u12_651_sample_start_ o<-& (ADD_u12_u12_651_sample_completed_ 1)
              $null &-> (ADD_u12_u12_651_update_start_)
              ADD_u12_u12_651_update_start_ o<-& (ADD_u12_u12_651_update_completed_ 0)
              // Target expression
              // (as target) HH
              // start: WAR dependencies for HH
              // done: WAR dependencies for HH
              // end:  					HH := (H + 1 )// bits of buffering = 12. 
              // start:  					H_574_delayed_5_0 := H $buffering 5// bits of buffering = 60. 
              //  file prog.linked.opt.aa, line 260
              $T[assign_stmt_655_sample_start_] 
              $T[assign_stmt_655_sample_completed_] 
              $T[assign_stmt_655_update_start_] 
              $T[assign_stmt_655_update_completed_] 
              // Source expression
              // H
              // Target expression
              // (as target) H_574_delayed_5_0
              // both source and target are implicit: use interlock 
              // Interlock 
              ;;[assign_stmt_655_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              ;;[assign_stmt_655_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              assign_stmt_655_sample_start_ &-> (assign_stmt_655_Sample)
              assign_stmt_655_sample_completed_ <-& (assign_stmt_655_Sample)
              assign_stmt_655_sample_completed_ &-> ($null)
              assign_stmt_655_update_start_ &-> (assign_stmt_655_Update)
              assign_stmt_655_update_completed_ <-& (assign_stmt_655_Update)
              // start: Forward dependencies from H to transition assign_stmt_655_sample_start_
              assign_stmt_655_sample_start_ <-& (phi_stmt_642_update_completed_)
              // done: Forward dependencies from H to transition assign_stmt_655_sample_start_
              // RAW reenables for H
              phi_stmt_642_update_start_ o<-& (assign_stmt_655_sample_completed_ 0)
              // self-release: 
              assign_stmt_655_sample_start_ o<-& (assign_stmt_655_sample_completed_ 1)
              $null &-> (assign_stmt_655_update_start_)
              assign_stmt_655_update_start_ o<-& (assign_stmt_655_update_completed_ 0)
              // start: WAR dependencies for H_574_delayed_5_0
              // done: WAR dependencies for H_574_delayed_5_0
              // end:  					H_574_delayed_5_0 := H $buffering 5// bits of buffering = 60. 
              // start:  					image[H_574_delayed_5_0] := image[HH]// bits of buffering = 16. 
              //  file prog.linked.opt.aa, line 261
              // Source expression
              // image[HH]
              $T[array_obj_ref_659_base_address_calculated] 
              $T[array_obj_ref_659_sample_start_] 
              $T[array_obj_ref_659_sample_completed_] 
              $T[array_obj_ref_659_update_start_] 
              $T[array_obj_ref_659_update_completed_] 
              $T[array_obj_ref_659_word_address_calculated] 
              $T[array_obj_ref_659_root_address_calculated] 
              $T[array_obj_ref_659_offset_calculated] 
              $T[array_obj_ref_659_index_resized_0] 
              $T[array_obj_ref_659_index_scaled_0] 
              $T[array_obj_ref_659_index_computed_0] 
              // HH
              // start: Forward dependencies from HH to transition array_obj_ref_659_index_computed_0
              array_obj_ref_659_index_computed_0 <-& (ADD_u12_u12_651_update_completed_)
              // done: Forward dependencies from HH to transition array_obj_ref_659_index_computed_0
              ;;[array_obj_ref_659_index_resize_0] 
              {
                $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
              }
              array_obj_ref_659_index_computed_0 &-> (array_obj_ref_659_index_resize_0)
              array_obj_ref_659_index_resized_0 <-& (array_obj_ref_659_index_resize_0)
              ;;[array_obj_ref_659_index_scale_0] 
              {
                $T [scale_rename_req] $T [scale_rename_ack] // rename 
              }
              array_obj_ref_659_index_resized_0 &-> (array_obj_ref_659_index_scale_0)
              array_obj_ref_659_index_scaled_0 <-& (array_obj_ref_659_index_scale_0)
              ;;[array_obj_ref_659_final_index_sum_regn] 
              {
                $T [req] $T [ack] // rename
              }
              array_obj_ref_659_index_scaled_0 &-> (array_obj_ref_659_final_index_sum_regn)
              array_obj_ref_659_offset_calculated <-& (array_obj_ref_659_final_index_sum_regn)
              ;;[array_obj_ref_659_base_plus_offset] 
              {
                $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
              }
              array_obj_ref_659_offset_calculated &-> (array_obj_ref_659_base_plus_offset)
              array_obj_ref_659_root_address_calculated <-& (array_obj_ref_659_base_plus_offset)
              ;;[array_obj_ref_659_word_addrgen] 
              {
                $T [root_register_req] $T [root_register_ack]
              }
              array_obj_ref_659_root_address_calculated &-> (array_obj_ref_659_word_addrgen)
              array_obj_ref_659_word_address_calculated <-& (array_obj_ref_659_word_addrgen)
              ;;[array_obj_ref_659_Sample] 
              {
                ||[word_access_start] 
                {
                  ;;[word_0] 
                  {
                    $T [rr] $T [ra] 
                  }
                }
              }
              ;;[array_obj_ref_659_Update] 
              {
                ||[word_access_complete] 
                {
                  ;;[word_0] 
                  {
                    $T [cr] $T [ca] 
                  }
                }
                ;;[array_obj_ref_659_Merge] 
                {
                  $T [merge_req] $T [merge_ack]
                }
              }
              array_obj_ref_659_sample_start_ <-& (array_obj_ref_659_word_address_calculated)
              // reenable-joins
              ADD_u12_u12_651_update_start_ o<-& (array_obj_ref_659_sample_completed_ 0)
              array_obj_ref_659_sample_start_ &-> (array_obj_ref_659_Sample)
              array_obj_ref_659_sample_completed_ <-& (array_obj_ref_659_Sample)
              array_obj_ref_659_sample_completed_ &-> ($null)
              array_obj_ref_659_update_start_ &-> (array_obj_ref_659_Update)
              array_obj_ref_659_update_completed_ <-& (array_obj_ref_659_Update)
              // self-release: 
              array_obj_ref_659_sample_start_ o<-& (array_obj_ref_659_sample_completed_ 1)
              $null &-> (array_obj_ref_659_update_start_)
              array_obj_ref_659_update_start_ o<-& (array_obj_ref_659_update_completed_ 0)
              // Target expression
              // image[H_574_delayed_5_0]
              $T[array_obj_ref_657_sample_start_] 
              $T[array_obj_ref_657_sample_completed_] 
              $T[array_obj_ref_657_update_start_] 
              $T[array_obj_ref_657_update_completed_] 
              $T[array_obj_ref_657_word_address_calculated] 
              $T[array_obj_ref_657_root_address_calculated] 
              $T[array_obj_ref_657_offset_calculated] 
              $T[array_obj_ref_657_index_resized_0] 
              $T[array_obj_ref_657_index_scaled_0] 
              $T[array_obj_ref_657_index_computed_0] 
              // H_574_delayed_5_0
              // start: Forward dependencies from H_574_delayed_5_0 to transition array_obj_ref_657_index_computed_0
              array_obj_ref_657_index_computed_0 <-& (assign_stmt_655_update_completed_)
              // done: Forward dependencies from H_574_delayed_5_0 to transition array_obj_ref_657_index_computed_0
              ;;[array_obj_ref_657_index_resize_0] 
              {
                $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
              }
              array_obj_ref_657_index_computed_0 &-> (array_obj_ref_657_index_resize_0)
              array_obj_ref_657_index_resized_0 <-& (array_obj_ref_657_index_resize_0)
              ;;[array_obj_ref_657_index_scale_0] 
              {
                $T [scale_rename_req] $T [scale_rename_ack] // rename 
              }
              array_obj_ref_657_index_resized_0 &-> (array_obj_ref_657_index_scale_0)
              array_obj_ref_657_index_scaled_0 <-& (array_obj_ref_657_index_scale_0)
              ;;[array_obj_ref_657_final_index_sum_regn] 
              {
                $T [req] $T [ack] // rename
              }
              array_obj_ref_657_index_scaled_0 &-> (array_obj_ref_657_final_index_sum_regn)
              array_obj_ref_657_offset_calculated <-& (array_obj_ref_657_final_index_sum_regn)
              ;;[array_obj_ref_657_base_plus_offset] 
              {
                $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
              }
              array_obj_ref_657_offset_calculated &-> (array_obj_ref_657_base_plus_offset)
              array_obj_ref_657_root_address_calculated <-& (array_obj_ref_657_base_plus_offset)
              ;;[array_obj_ref_657_word_addrgen] 
              {
                $T [root_register_req] $T [root_register_ack]
              }
              array_obj_ref_657_root_address_calculated &-> (array_obj_ref_657_word_addrgen)
              array_obj_ref_657_word_address_calculated <-& (array_obj_ref_657_word_addrgen)
              ;;[array_obj_ref_657_Sample] 
              {
                ;;[array_obj_ref_657_Split] 
                {
                  $T [split_req] $T [split_ack]
                }
                ||[word_access_start] 
                {
                  ;;[word_0] 
                  {
                    $T [rr] $T [ra] 
                  }
                }
              }
              ;;[array_obj_ref_657_Update] 
              {
                ||[word_access_complete] 
                {
                  ;;[word_0] 
                  {
                    $T [cr] $T [ca] 
                  }
                }
              }
              array_obj_ref_657_sample_start_ <-& (array_obj_ref_657_word_address_calculated)
              // reenable-joins
              assign_stmt_655_update_start_ o<-& (array_obj_ref_657_sample_completed_ 0)
              array_obj_ref_657_sample_start_ &-> (array_obj_ref_657_Sample)
              array_obj_ref_657_sample_completed_ <-& (array_obj_ref_657_Sample)
              array_obj_ref_657_sample_completed_ &-> ($null)
              array_obj_ref_657_update_start_ &-> (array_obj_ref_657_Update)
              array_obj_ref_657_update_completed_ <-& (array_obj_ref_657_Update)
              // self-release: 
              array_obj_ref_657_sample_start_ o<-& (array_obj_ref_657_sample_completed_ 1)
              $null &-> (array_obj_ref_657_update_start_)
              array_obj_ref_657_update_start_ o<-& (array_obj_ref_657_update_completed_ 0)
              // start: Forward dependencies from image[HH] to transition array_obj_ref_657_sample_start_
              array_obj_ref_657_sample_start_ <-& (array_obj_ref_659_update_completed_)
              // done: Forward dependencies from image[HH] to transition array_obj_ref_657_sample_start_
              // RAW reenables for image[HH]
              array_obj_ref_659_update_start_ o<-& (array_obj_ref_657_sample_completed_ 0)
              // end:  					image[H_574_delayed_5_0] := image[HH]// bits of buffering = 16. 
              // start:  					HHH := (H + 2 )// bits of buffering = 12. 
              //  file prog.linked.opt.aa, line 262
              // Source expression
              // (H + 2 )
              $T[ADD_u12_u12_664_sample_start_] 
              $T[ADD_u12_u12_664_sample_completed_] 
              $T[ADD_u12_u12_664_update_start_] 
              $T[ADD_u12_u12_664_update_completed_] 
              // H
              // start: Forward dependencies from H to transition ADD_u12_u12_664_sample_start_
              ADD_u12_u12_664_sample_start_ <-& (phi_stmt_642_update_completed_)
              // done: Forward dependencies from H to transition ADD_u12_u12_664_sample_start_
              ;;[ADD_u12_u12_664_Sample] 
              {
                // binary expression 
                $T [rr] $T [ra]  // (split) binary operation 
              }
              ;;[ADD_u12_u12_664_Update] 
              {
                // binary expression 
                $T [cr] $T [ca] // (split) binary operation 
              }
              ADD_u12_u12_664_sample_start_ &-> (ADD_u12_u12_664_Sample)
              ADD_u12_u12_664_sample_completed_ <-& (ADD_u12_u12_664_Sample)
              ADD_u12_u12_664_sample_completed_ &-> ($null)
              ADD_u12_u12_664_update_start_ &-> (ADD_u12_u12_664_Update)
              ADD_u12_u12_664_update_completed_ <-& (ADD_u12_u12_664_Update)
              // RAW reenables for H
              phi_stmt_642_update_start_ o<-& (ADD_u12_u12_664_sample_completed_ 0)
              // self-release: 
              ADD_u12_u12_664_sample_start_ o<-& (ADD_u12_u12_664_sample_completed_ 1)
              $null &-> (ADD_u12_u12_664_update_start_)
              ADD_u12_u12_664_update_start_ o<-& (ADD_u12_u12_664_update_completed_ 0)
              // Target expression
              // (as target) HHH
              // start: WAR dependencies for HHH
              // done: WAR dependencies for HHH
              // end:  					HHH := (H + 2 )// bits of buffering = 12. 
              // start:  					HH_584_delayed_4_0 := HH $buffering 4// bits of buffering = 48. 
              //  file prog.linked.opt.aa, line 263
              $T[assign_stmt_668_sample_start_] 
              $T[assign_stmt_668_sample_completed_] 
              $T[assign_stmt_668_update_start_] 
              $T[assign_stmt_668_update_completed_] 
              // Source expression
              // HH
              // Target expression
              // (as target) HH_584_delayed_4_0
              // both source and target are implicit: use interlock 
              // Interlock 
              ;;[assign_stmt_668_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              ;;[assign_stmt_668_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              assign_stmt_668_sample_start_ &-> (assign_stmt_668_Sample)
              assign_stmt_668_sample_completed_ <-& (assign_stmt_668_Sample)
              assign_stmt_668_sample_completed_ &-> ($null)
              assign_stmt_668_update_start_ &-> (assign_stmt_668_Update)
              assign_stmt_668_update_completed_ <-& (assign_stmt_668_Update)
              // start: Forward dependencies from HH to transition assign_stmt_668_sample_start_
              assign_stmt_668_sample_start_ <-& (ADD_u12_u12_651_update_completed_)
              // done: Forward dependencies from HH to transition assign_stmt_668_sample_start_
              // RAW reenables for HH
              ADD_u12_u12_651_update_start_ o<-& (assign_stmt_668_sample_completed_ 0)
              // self-release: 
              assign_stmt_668_sample_start_ o<-& (assign_stmt_668_sample_completed_ 1)
              $null &-> (assign_stmt_668_update_start_)
              assign_stmt_668_update_start_ o<-& (assign_stmt_668_update_completed_ 0)
              // start: WAR dependencies for HH_584_delayed_4_0
              // done: WAR dependencies for HH_584_delayed_4_0
              // end:  					HH_584_delayed_4_0 := HH $buffering 4// bits of buffering = 48. 
              // start:  					image[HH_584_delayed_4_0] := image[HHH]// bits of buffering = 16. 
              //  file prog.linked.opt.aa, line 264
              // Source expression
              // image[HHH]
              $T[array_obj_ref_672_base_address_calculated] 
              $T[array_obj_ref_672_sample_start_] 
              $T[array_obj_ref_672_sample_completed_] 
              $T[array_obj_ref_672_update_start_] 
              $T[array_obj_ref_672_update_completed_] 
              $T[array_obj_ref_672_word_address_calculated] 
              $T[array_obj_ref_672_root_address_calculated] 
              $T[array_obj_ref_672_offset_calculated] 
              $T[array_obj_ref_672_index_resized_0] 
              $T[array_obj_ref_672_index_scaled_0] 
              $T[array_obj_ref_672_index_computed_0] 
              // HHH
              // start: Forward dependencies from HHH to transition array_obj_ref_672_index_computed_0
              array_obj_ref_672_index_computed_0 <-& (ADD_u12_u12_664_update_completed_)
              // done: Forward dependencies from HHH to transition array_obj_ref_672_index_computed_0
              ;;[array_obj_ref_672_index_resize_0] 
              {
                $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
              }
              array_obj_ref_672_index_computed_0 &-> (array_obj_ref_672_index_resize_0)
              array_obj_ref_672_index_resized_0 <-& (array_obj_ref_672_index_resize_0)
              ;;[array_obj_ref_672_index_scale_0] 
              {
                $T [scale_rename_req] $T [scale_rename_ack] // rename 
              }
              array_obj_ref_672_index_resized_0 &-> (array_obj_ref_672_index_scale_0)
              array_obj_ref_672_index_scaled_0 <-& (array_obj_ref_672_index_scale_0)
              ;;[array_obj_ref_672_final_index_sum_regn] 
              {
                $T [req] $T [ack] // rename
              }
              array_obj_ref_672_index_scaled_0 &-> (array_obj_ref_672_final_index_sum_regn)
              array_obj_ref_672_offset_calculated <-& (array_obj_ref_672_final_index_sum_regn)
              ;;[array_obj_ref_672_base_plus_offset] 
              {
                $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
              }
              array_obj_ref_672_offset_calculated &-> (array_obj_ref_672_base_plus_offset)
              array_obj_ref_672_root_address_calculated <-& (array_obj_ref_672_base_plus_offset)
              ;;[array_obj_ref_672_word_addrgen] 
              {
                $T [root_register_req] $T [root_register_ack]
              }
              array_obj_ref_672_root_address_calculated &-> (array_obj_ref_672_word_addrgen)
              array_obj_ref_672_word_address_calculated <-& (array_obj_ref_672_word_addrgen)
              ;;[array_obj_ref_672_Sample] 
              {
                ||[word_access_start] 
                {
                  ;;[word_0] 
                  {
                    $T [rr] $T [ra] 
                  }
                }
              }
              ;;[array_obj_ref_672_Update] 
              {
                ||[word_access_complete] 
                {
                  ;;[word_0] 
                  {
                    $T [cr] $T [ca] 
                  }
                }
                ;;[array_obj_ref_672_Merge] 
                {
                  $T [merge_req] $T [merge_ack]
                }
              }
              array_obj_ref_672_sample_start_ <-& (array_obj_ref_672_word_address_calculated)
              // reenable-joins
              ADD_u12_u12_664_update_start_ o<-& (array_obj_ref_672_sample_completed_ 0)
              array_obj_ref_672_sample_start_ &-> (array_obj_ref_672_Sample)
              array_obj_ref_672_sample_completed_ <-& (array_obj_ref_672_Sample)
              array_obj_ref_672_sample_completed_ &-> ($null)
              array_obj_ref_672_update_start_ &-> (array_obj_ref_672_Update)
              array_obj_ref_672_update_completed_ <-& (array_obj_ref_672_Update)
              // self-release: 
              array_obj_ref_672_sample_start_ o<-& (array_obj_ref_672_sample_completed_ 1)
              $null &-> (array_obj_ref_672_update_start_)
              array_obj_ref_672_update_start_ o<-& (array_obj_ref_672_update_completed_ 0)
              // Target expression
              // image[HH_584_delayed_4_0]
              $T[array_obj_ref_670_sample_start_] 
              $T[array_obj_ref_670_sample_completed_] 
              $T[array_obj_ref_670_update_start_] 
              $T[array_obj_ref_670_update_completed_] 
              $T[array_obj_ref_670_word_address_calculated] 
              $T[array_obj_ref_670_root_address_calculated] 
              $T[array_obj_ref_670_offset_calculated] 
              $T[array_obj_ref_670_index_resized_0] 
              $T[array_obj_ref_670_index_scaled_0] 
              $T[array_obj_ref_670_index_computed_0] 
              // HH_584_delayed_4_0
              // start: Forward dependencies from HH_584_delayed_4_0 to transition array_obj_ref_670_index_computed_0
              array_obj_ref_670_index_computed_0 <-& (assign_stmt_668_update_completed_)
              // done: Forward dependencies from HH_584_delayed_4_0 to transition array_obj_ref_670_index_computed_0
              ;;[array_obj_ref_670_index_resize_0] 
              {
                $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
              }
              array_obj_ref_670_index_computed_0 &-> (array_obj_ref_670_index_resize_0)
              array_obj_ref_670_index_resized_0 <-& (array_obj_ref_670_index_resize_0)
              ;;[array_obj_ref_670_index_scale_0] 
              {
                $T [scale_rename_req] $T [scale_rename_ack] // rename 
              }
              array_obj_ref_670_index_resized_0 &-> (array_obj_ref_670_index_scale_0)
              array_obj_ref_670_index_scaled_0 <-& (array_obj_ref_670_index_scale_0)
              ;;[array_obj_ref_670_final_index_sum_regn] 
              {
                $T [req] $T [ack] // rename
              }
              array_obj_ref_670_index_scaled_0 &-> (array_obj_ref_670_final_index_sum_regn)
              array_obj_ref_670_offset_calculated <-& (array_obj_ref_670_final_index_sum_regn)
              ;;[array_obj_ref_670_base_plus_offset] 
              {
                $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
              }
              array_obj_ref_670_offset_calculated &-> (array_obj_ref_670_base_plus_offset)
              array_obj_ref_670_root_address_calculated <-& (array_obj_ref_670_base_plus_offset)
              ;;[array_obj_ref_670_word_addrgen] 
              {
                $T [root_register_req] $T [root_register_ack]
              }
              array_obj_ref_670_root_address_calculated &-> (array_obj_ref_670_word_addrgen)
              array_obj_ref_670_word_address_calculated <-& (array_obj_ref_670_word_addrgen)
              ;;[array_obj_ref_670_Sample] 
              {
                ;;[array_obj_ref_670_Split] 
                {
                  $T [split_req] $T [split_ack]
                }
                ||[word_access_start] 
                {
                  ;;[word_0] 
                  {
                    $T [rr] $T [ra] 
                  }
                }
              }
              ;;[array_obj_ref_670_Update] 
              {
                ||[word_access_complete] 
                {
                  ;;[word_0] 
                  {
                    $T [cr] $T [ca] 
                  }
                }
              }
              array_obj_ref_670_sample_start_ <-& (array_obj_ref_670_word_address_calculated)
              // reenable-joins
              assign_stmt_668_update_start_ o<-& (array_obj_ref_670_sample_completed_ 0)
              array_obj_ref_670_sample_start_ &-> (array_obj_ref_670_Sample)
              array_obj_ref_670_sample_completed_ <-& (array_obj_ref_670_Sample)
              array_obj_ref_670_sample_completed_ &-> ($null)
              array_obj_ref_670_update_start_ &-> (array_obj_ref_670_Update)
              array_obj_ref_670_update_completed_ <-& (array_obj_ref_670_Update)
              // self-release: 
              array_obj_ref_670_sample_start_ o<-& (array_obj_ref_670_sample_completed_ 1)
              $null &-> (array_obj_ref_670_update_start_)
              array_obj_ref_670_update_start_ o<-& (array_obj_ref_670_update_completed_ 0)
              // start: Forward dependencies from image[HHH] to transition array_obj_ref_670_sample_start_
              array_obj_ref_670_sample_start_ <-& (array_obj_ref_672_update_completed_)
              // done: Forward dependencies from image[HHH] to transition array_obj_ref_670_sample_start_
              // RAW reenables for image[HHH]
              array_obj_ref_672_update_start_ o<-& (array_obj_ref_670_sample_completed_ 0)
              // end:  					image[HH_584_delayed_4_0] := image[HHH]// bits of buffering = 16. 
              // start:  					HHHH := (H + 3 )// bits of buffering = 12. 
              //  file prog.linked.opt.aa, line 265
              // Source expression
              // (H + 3 )
              $T[ADD_u12_u12_677_sample_start_] 
              $T[ADD_u12_u12_677_sample_completed_] 
              $T[ADD_u12_u12_677_update_start_] 
              $T[ADD_u12_u12_677_update_completed_] 
              // H
              // start: Forward dependencies from H to transition ADD_u12_u12_677_sample_start_
              ADD_u12_u12_677_sample_start_ <-& (phi_stmt_642_update_completed_)
              // done: Forward dependencies from H to transition ADD_u12_u12_677_sample_start_
              ;;[ADD_u12_u12_677_Sample] 
              {
                // binary expression 
                $T [rr] $T [ra]  // (split) binary operation 
              }
              ;;[ADD_u12_u12_677_Update] 
              {
                // binary expression 
                $T [cr] $T [ca] // (split) binary operation 
              }
              ADD_u12_u12_677_sample_start_ &-> (ADD_u12_u12_677_Sample)
              ADD_u12_u12_677_sample_completed_ <-& (ADD_u12_u12_677_Sample)
              ADD_u12_u12_677_sample_completed_ &-> ($null)
              ADD_u12_u12_677_update_start_ &-> (ADD_u12_u12_677_Update)
              ADD_u12_u12_677_update_completed_ <-& (ADD_u12_u12_677_Update)
              // RAW reenables for H
              phi_stmt_642_update_start_ o<-& (ADD_u12_u12_677_sample_completed_ 0)
              // self-release: 
              ADD_u12_u12_677_sample_start_ o<-& (ADD_u12_u12_677_sample_completed_ 1)
              $null &-> (ADD_u12_u12_677_update_start_)
              ADD_u12_u12_677_update_start_ o<-& (ADD_u12_u12_677_update_completed_ 0)
              // Target expression
              // (as target) HHHH
              // start: WAR dependencies for HHHH
              // done: WAR dependencies for HHHH
              // end:  					HHHH := (H + 3 )// bits of buffering = 12. 
              // start:  					HHH_594_delayed_4_0 := HHH $buffering 4// bits of buffering = 48. 
              //  file prog.linked.opt.aa, line 266
              $T[assign_stmt_681_sample_start_] 
              $T[assign_stmt_681_sample_completed_] 
              $T[assign_stmt_681_update_start_] 
              $T[assign_stmt_681_update_completed_] 
              // Source expression
              // HHH
              // Target expression
              // (as target) HHH_594_delayed_4_0
              // both source and target are implicit: use interlock 
              // Interlock 
              ;;[assign_stmt_681_Sample] 
              {
                $T [req] $T [ack] // interlock-sample.
              }
              ;;[assign_stmt_681_Update] 
              {
                $T [req] $T [ack] // interlock-update.
              }
              assign_stmt_681_sample_start_ &-> (assign_stmt_681_Sample)
              assign_stmt_681_sample_completed_ <-& (assign_stmt_681_Sample)
              assign_stmt_681_sample_completed_ &-> ($null)
              assign_stmt_681_update_start_ &-> (assign_stmt_681_Update)
              assign_stmt_681_update_completed_ <-& (assign_stmt_681_Update)
              // start: Forward dependencies from HHH to transition assign_stmt_681_sample_start_
              assign_stmt_681_sample_start_ <-& (ADD_u12_u12_664_update_completed_)
              // done: Forward dependencies from HHH to transition assign_stmt_681_sample_start_
              // RAW reenables for HHH
              ADD_u12_u12_664_update_start_ o<-& (assign_stmt_681_sample_completed_ 0)
              // self-release: 
              assign_stmt_681_sample_start_ o<-& (assign_stmt_681_sample_completed_ 1)
              $null &-> (assign_stmt_681_update_start_)
              assign_stmt_681_update_start_ o<-& (assign_stmt_681_update_completed_ 0)
              // start: WAR dependencies for HHH_594_delayed_4_0
              // done: WAR dependencies for HHH_594_delayed_4_0
              // end:  					HHH_594_delayed_4_0 := HHH $buffering 4// bits of buffering = 48. 
              // start:  					image[HHH_594_delayed_4_0] := image[HHHH]// bits of buffering = 16. 
              //  file prog.linked.opt.aa, line 267
              // Source expression
              // image[HHHH]
              $T[array_obj_ref_685_base_address_calculated] 
              $T[array_obj_ref_685_sample_start_] 
              $T[array_obj_ref_685_sample_completed_] 
              $T[array_obj_ref_685_update_start_] 
              $T[array_obj_ref_685_update_completed_] 
              $T[array_obj_ref_685_word_address_calculated] 
              $T[array_obj_ref_685_root_address_calculated] 
              $T[array_obj_ref_685_offset_calculated] 
              $T[array_obj_ref_685_index_resized_0] 
              $T[array_obj_ref_685_index_scaled_0] 
              $T[array_obj_ref_685_index_computed_0] 
              // HHHH
              // start: Forward dependencies from HHHH to transition array_obj_ref_685_index_computed_0
              array_obj_ref_685_index_computed_0 <-& (ADD_u12_u12_677_update_completed_)
              // done: Forward dependencies from HHHH to transition array_obj_ref_685_index_computed_0
              ;;[array_obj_ref_685_index_resize_0] 
              {
                $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
              }
              array_obj_ref_685_index_computed_0 &-> (array_obj_ref_685_index_resize_0)
              array_obj_ref_685_index_resized_0 <-& (array_obj_ref_685_index_resize_0)
              ;;[array_obj_ref_685_index_scale_0] 
              {
                $T [scale_rename_req] $T [scale_rename_ack] // rename 
              }
              array_obj_ref_685_index_resized_0 &-> (array_obj_ref_685_index_scale_0)
              array_obj_ref_685_index_scaled_0 <-& (array_obj_ref_685_index_scale_0)
              ;;[array_obj_ref_685_final_index_sum_regn] 
              {
                $T [req] $T [ack] // rename
              }
              array_obj_ref_685_index_scaled_0 &-> (array_obj_ref_685_final_index_sum_regn)
              array_obj_ref_685_offset_calculated <-& (array_obj_ref_685_final_index_sum_regn)
              ;;[array_obj_ref_685_base_plus_offset] 
              {
                $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
              }
              array_obj_ref_685_offset_calculated &-> (array_obj_ref_685_base_plus_offset)
              array_obj_ref_685_root_address_calculated <-& (array_obj_ref_685_base_plus_offset)
              ;;[array_obj_ref_685_word_addrgen] 
              {
                $T [root_register_req] $T [root_register_ack]
              }
              array_obj_ref_685_root_address_calculated &-> (array_obj_ref_685_word_addrgen)
              array_obj_ref_685_word_address_calculated <-& (array_obj_ref_685_word_addrgen)
              ;;[array_obj_ref_685_Sample] 
              {
                ||[word_access_start] 
                {
                  ;;[word_0] 
                  {
                    $T [rr] $T [ra] 
                  }
                }
              }
              ;;[array_obj_ref_685_Update] 
              {
                ||[word_access_complete] 
                {
                  ;;[word_0] 
                  {
                    $T [cr] $T [ca] 
                  }
                }
                ;;[array_obj_ref_685_Merge] 
                {
                  $T [merge_req] $T [merge_ack]
                }
              }
              array_obj_ref_685_sample_start_ <-& (array_obj_ref_685_word_address_calculated)
              // reenable-joins
              ADD_u12_u12_677_update_start_ o<-& (array_obj_ref_685_sample_completed_ 0)
              array_obj_ref_685_sample_start_ &-> (array_obj_ref_685_Sample)
              array_obj_ref_685_sample_completed_ <-& (array_obj_ref_685_Sample)
              array_obj_ref_685_sample_completed_ &-> ($null)
              array_obj_ref_685_update_start_ &-> (array_obj_ref_685_Update)
              array_obj_ref_685_update_completed_ <-& (array_obj_ref_685_Update)
              // self-release: 
              array_obj_ref_685_sample_start_ o<-& (array_obj_ref_685_sample_completed_ 1)
              $null &-> (array_obj_ref_685_update_start_)
              array_obj_ref_685_update_start_ o<-& (array_obj_ref_685_update_completed_ 0)
              // Target expression
              // image[HHH_594_delayed_4_0]
              $T[array_obj_ref_683_sample_start_] 
              $T[array_obj_ref_683_sample_completed_] 
              $T[array_obj_ref_683_update_start_] 
              $T[array_obj_ref_683_update_completed_] 
              $T[array_obj_ref_683_word_address_calculated] 
              $T[array_obj_ref_683_root_address_calculated] 
              $T[array_obj_ref_683_offset_calculated] 
              $T[array_obj_ref_683_index_resized_0] 
              $T[array_obj_ref_683_index_scaled_0] 
              $T[array_obj_ref_683_index_computed_0] 
              // HHH_594_delayed_4_0
              // start: Forward dependencies from HHH_594_delayed_4_0 to transition array_obj_ref_683_index_computed_0
              array_obj_ref_683_index_computed_0 <-& (assign_stmt_681_update_completed_)
              // done: Forward dependencies from HHH_594_delayed_4_0 to transition array_obj_ref_683_index_computed_0
              ;;[array_obj_ref_683_index_resize_0] 
              {
                $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
              }
              array_obj_ref_683_index_computed_0 &-> (array_obj_ref_683_index_resize_0)
              array_obj_ref_683_index_resized_0 <-& (array_obj_ref_683_index_resize_0)
              ;;[array_obj_ref_683_index_scale_0] 
              {
                $T [scale_rename_req] $T [scale_rename_ack] // rename 
              }
              array_obj_ref_683_index_resized_0 &-> (array_obj_ref_683_index_scale_0)
              array_obj_ref_683_index_scaled_0 <-& (array_obj_ref_683_index_scale_0)
              ;;[array_obj_ref_683_final_index_sum_regn] 
              {
                $T [req] $T [ack] // rename
              }
              array_obj_ref_683_index_scaled_0 &-> (array_obj_ref_683_final_index_sum_regn)
              array_obj_ref_683_offset_calculated <-& (array_obj_ref_683_final_index_sum_regn)
              ;;[array_obj_ref_683_base_plus_offset] 
              {
                $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
              }
              array_obj_ref_683_offset_calculated &-> (array_obj_ref_683_base_plus_offset)
              array_obj_ref_683_root_address_calculated <-& (array_obj_ref_683_base_plus_offset)
              ;;[array_obj_ref_683_word_addrgen] 
              {
                $T [root_register_req] $T [root_register_ack]
              }
              array_obj_ref_683_root_address_calculated &-> (array_obj_ref_683_word_addrgen)
              array_obj_ref_683_word_address_calculated <-& (array_obj_ref_683_word_addrgen)
              ;;[array_obj_ref_683_Sample] 
              {
                ;;[array_obj_ref_683_Split] 
                {
                  $T [split_req] $T [split_ack]
                }
                ||[word_access_start] 
                {
                  ;;[word_0] 
                  {
                    $T [rr] $T [ra] 
                  }
                }
              }
              ;;[array_obj_ref_683_Update] 
              {
                ||[word_access_complete] 
                {
                  ;;[word_0] 
                  {
                    $T [cr] $T [ca] 
                  }
                }
              }
              array_obj_ref_683_sample_start_ <-& (array_obj_ref_683_word_address_calculated)
              // reenable-joins
              assign_stmt_681_update_start_ o<-& (array_obj_ref_683_sample_completed_ 0)
              array_obj_ref_683_sample_start_ &-> (array_obj_ref_683_Sample)
              array_obj_ref_683_sample_completed_ <-& (array_obj_ref_683_Sample)
              array_obj_ref_683_sample_completed_ &-> ($null)
              array_obj_ref_683_update_start_ &-> (array_obj_ref_683_Update)
              array_obj_ref_683_update_completed_ <-& (array_obj_ref_683_Update)
              // self-release: 
              array_obj_ref_683_sample_start_ o<-& (array_obj_ref_683_sample_completed_ 1)
              $null &-> (array_obj_ref_683_update_start_)
              array_obj_ref_683_update_start_ o<-& (array_obj_ref_683_update_completed_ 0)
              // start: Forward dependencies from image[HHHH] to transition array_obj_ref_683_sample_start_
              array_obj_ref_683_sample_start_ <-& (array_obj_ref_685_update_completed_)
              // done: Forward dependencies from image[HHHH] to transition array_obj_ref_683_sample_start_
              // RAW reenables for image[HHHH]
              array_obj_ref_685_update_start_ o<-& (array_obj_ref_683_sample_completed_ 0)
              // end:  					image[HHH_594_delayed_4_0] := image[HHHH]// bits of buffering = 16. 
              // start:  					NH := (H + 4 )// bits of buffering = 12. 
              //  file prog.linked.opt.aa, line 268
              // Source expression
              // (H + 4 )
              $T[ADD_u12_u12_690_sample_start_] 
              $T[ADD_u12_u12_690_sample_completed_] 
              $T[ADD_u12_u12_690_update_start_] 
              $T[ADD_u12_u12_690_update_completed_] 
              // H
              // start: Forward dependencies from H to transition ADD_u12_u12_690_sample_start_
              ADD_u12_u12_690_sample_start_ <-& (phi_stmt_642_update_completed_)
              // done: Forward dependencies from H to transition ADD_u12_u12_690_sample_start_
              ;;[ADD_u12_u12_690_Sample] 
              {
                // binary expression 
                $T [rr] $T [ra]  // (split) binary operation 
              }
              ;;[ADD_u12_u12_690_Update] 
              {
                // binary expression 
                $T [cr] $T [ca] // (split) binary operation 
              }
              ADD_u12_u12_690_sample_start_ &-> (ADD_u12_u12_690_Sample)
              ADD_u12_u12_690_sample_completed_ <-& (ADD_u12_u12_690_Sample)
              ADD_u12_u12_690_sample_completed_ &-> ($null)
              ADD_u12_u12_690_update_start_ &-> (ADD_u12_u12_690_Update)
              ADD_u12_u12_690_update_completed_ <-& (ADD_u12_u12_690_Update)
              // RAW reenables for H
              phi_stmt_642_update_start_ o<-& (ADD_u12_u12_690_sample_completed_ 0)
              // self-release: 
              ADD_u12_u12_690_sample_start_ o<-& (ADD_u12_u12_690_sample_completed_ 1)
              $null &-> (ADD_u12_u12_690_update_start_)
              ADD_u12_u12_690_update_start_ o<-& (ADD_u12_u12_690_update_completed_ 0)
              // Target expression
              // (as target) NH
              // start: WAR dependencies for NH
              // WAR dependency: Read: NH before Write: 					NH := (H + 4 )// bits of buffering = 12. 
              ADD_u12_u12_690_update_start_ <-& (phi_stmt_642_sample_completed_)
              phi_stmt_642_sample_start_ o<-& (ADD_u12_u12_690_update_completed_ 0)
              // WAR dependency: release  Read: NH with Write: 					NH := (H + 4 )// bits of buffering = 12. 
              // done: WAR dependencies for NH
              // end:  					NH := (H + 4 ) $buffering 2// bits of buffering = 24. 
              // (NH < 16 )
              // NH
              $T [loop_body_delay_to_condition_start] $delay
              loop_body_start &-> (loop_body_delay_to_condition_start)
              loop_body_delay_to_condition_start &-> (condition_evaluated)
              // start: Forward dependencies from (NH < 16 ) to transition condition_evaluated
              condition_evaluated <-& (ADD_u12_u12_690_update_completed_)
              // done: Forward dependencies from (NH < 16 ) to transition condition_evaluated
              condition_evaluated &-> ($null)
              // load-store dependencies..
              // memory-space  memory_space_3
              //  array_obj_ref_659 load
              //  array_obj_ref_657 store
              $T [array_obj_ref_659_array_obj_ref_657_delay] $delay
              // array_obj_ref_659(load) -> array_obj_ref_657(store)
              array_obj_ref_657_sample_start_ <-& (array_obj_ref_659_array_obj_ref_657_delay)
              array_obj_ref_659_array_obj_ref_657_delay <-& (array_obj_ref_659_sample_completed_)
              //  array_obj_ref_672 load
              $T [array_obj_ref_657_array_obj_ref_672_delay] $delay
              // array_obj_ref_657(store) -> array_obj_ref_672(load)
              array_obj_ref_672_sample_start_ <-& (array_obj_ref_657_array_obj_ref_672_delay)
              array_obj_ref_657_array_obj_ref_672_delay <-& (array_obj_ref_657_sample_completed_)
              //  array_obj_ref_670 store
              $T [array_obj_ref_672_array_obj_ref_670_delay] $delay
              // array_obj_ref_672(load) -> array_obj_ref_670(store)
              array_obj_ref_670_sample_start_ <-& (array_obj_ref_672_array_obj_ref_670_delay)
              array_obj_ref_672_array_obj_ref_670_delay <-& (array_obj_ref_672_sample_completed_)
              //  array_obj_ref_685 load
              $T [array_obj_ref_670_array_obj_ref_685_delay] $delay
              // array_obj_ref_670(store) -> array_obj_ref_685(load)
              array_obj_ref_685_sample_start_ <-& (array_obj_ref_670_array_obj_ref_685_delay)
              array_obj_ref_670_array_obj_ref_685_delay <-& (array_obj_ref_670_sample_completed_)
              //  array_obj_ref_683 store
              $T [array_obj_ref_685_array_obj_ref_683_delay] $delay
              // array_obj_ref_685(load) -> array_obj_ref_683(store)
              array_obj_ref_683_sample_start_ <-& (array_obj_ref_685_array_obj_ref_683_delay)
              array_obj_ref_685_array_obj_ref_683_delay <-& (array_obj_ref_685_sample_completed_)
              // reenable across ring for memory space memory_space_3
              $T[ring_reenable_memory_space_3] 
              // ordered memory-subsystem.
              ring_reenable_memory_space_3 <-& (array_obj_ref_683_sample_completed_)
              array_obj_ref_659_sample_start_ o<-& (ring_reenable_memory_space_3 1)
            }
            ( first_time_through_loop_body  back_edge_to_loop_body) 
            ( condition_evaluated )
            ;; [loop_exit] 
            {
              $T [ack] 
            }
            ;; [loop_taken] 
            {
              $T [ack] 
            }
            do_while_stmt_640__entry__ <-| ($entry)
            loop_body_done <-| ( do_while_stmt_640_loop_body ) 
            condition_done |-> (loop_exit loop_taken)
            do_while_stmt_640__exit__ |-> ($exit)
            $bind condition_done <= do_while_stmt_640_loop_body : condition_evaluated
            $bind do_while_stmt_640__entry__  => do_while_stmt_640_loop_body : first_time_through_loop_body 
            $bind loop_back  => do_while_stmt_640_loop_body : back_edge_to_loop_body 
            $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_640__exit__)
          }
          do_while_stmt_640__entry__ |-> (do_while_stmt_640)
          do_while_stmt_640__exit__ <-| (do_while_stmt_640)
          do_while_stmt_640__entry__ <-| (branch_block_stmt_639__entry__)
          do_while_stmt_640__exit__ |-> (branch_block_stmt_639__exit__)
        }
        branch_block_stmt_639__entry__ |-> (branch_block_stmt_639)
        branch_block_stmt_639__exit__ <-| (branch_block_stmt_639)
        ::[call_stmt_705_to_assign_stmt_730] 
        {
          // start: 			$call accessMem_v (1  ((L + G) + 4 ) 0  ) (rdatar ) 
          //  file prog.linked.opt.aa, line 271
          $T[call_stmt_705_sample_start_] 
          $T[call_stmt_705_sample_completed_] 
          $T[call_stmt_705_update_start_] 
          $T[call_stmt_705_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // ((L + G) + 4 )
          $T[ADD_u12_u12_702_sample_start_] 
          $T[ADD_u12_u12_702_sample_completed_] 
          $T[ADD_u12_u12_702_update_start_] 
          $T[ADD_u12_u12_702_update_completed_] 
          // (L + G)
          // L
          // G
          // start: Forward dependencies from (L + G) to transition ADD_u12_u12_702_sample_start_
          // done: Forward dependencies from (L + G) to transition ADD_u12_u12_702_sample_start_
          ;;[ADD_u12_u12_702_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u12_u12_702_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u12_u12_702_sample_start_ &-> (ADD_u12_u12_702_Sample)
          ADD_u12_u12_702_sample_completed_ <-& (ADD_u12_u12_702_Sample)
          ADD_u12_u12_702_sample_completed_ &-> ($null)
          ADD_u12_u12_702_update_start_ &-> (ADD_u12_u12_702_Update)
          ADD_u12_u12_702_update_completed_ <-& (ADD_u12_u12_702_Update)
          // Call input argument 2
          // start: Forward dependencies from ((L + G) + 4 ) to transition call_stmt_705_sample_start_
          call_stmt_705_sample_start_ <-& (ADD_u12_u12_702_update_completed_)
          // done: Forward dependencies from ((L + G) + 4 ) to transition call_stmt_705_sample_start_
          ;;[call_stmt_705_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_705_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_705_sample_start_ &-> (call_stmt_705_Sample)
          call_stmt_705_sample_completed_ <-& (call_stmt_705_Sample)
          call_stmt_705_sample_completed_ &-> ($null)
          call_stmt_705_update_start_ &-> (call_stmt_705_Update)
          call_stmt_705_update_completed_ <-& (call_stmt_705_Update)
          // Call output argument 0
          // (as target) rdatar
          // start: WAR dependencies for rdatar
          // done: WAR dependencies for rdatar
          // end: 			$call accessMem_v (1  ((L + G) + 4 ) 0  ) (rdatar ) 
          // start:  			image[15 ] := ( $slice rdatar 63 48 ) // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 272
          // Source expression
          // ( $slice rdatar 63 48 ) 
          $T[slice_709_sample_start_] 
          $T[slice_709_sample_completed_] 
          $T[slice_709_update_start_] 
          $T[slice_709_update_completed_] 
          // rdatar
          // start: Forward dependencies from rdatar to transition slice_709_sample_start_
          slice_709_sample_start_ <-& (call_stmt_705_update_completed_)
          // done: Forward dependencies from rdatar to transition slice_709_sample_start_
          ;;[slice_709_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_709_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_709_sample_start_ &-> (slice_709_Sample)
          slice_709_sample_completed_ <-& (slice_709_Sample)
          slice_709_sample_completed_ &-> ($null)
          slice_709_update_start_ &-> (slice_709_Update)
          slice_709_update_completed_ <-& (slice_709_Update)
          // Target expression
          // image[15 ]
          $T[array_obj_ref_707_sample_start_] 
          $T[array_obj_ref_707_sample_completed_] 
          $T[array_obj_ref_707_update_start_] 
          $T[array_obj_ref_707_update_completed_] 
          $T[array_obj_ref_707_word_address_calculated] 
          $T[array_obj_ref_707_root_address_calculated] 
          array_obj_ref_707_word_address_calculated <-& (array_obj_ref_707_root_address_calculated)
          ;;[array_obj_ref_707_Sample] 
          {
            ;;[array_obj_ref_707_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_707_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_707_sample_start_ <-& (array_obj_ref_707_word_address_calculated)
          array_obj_ref_707_sample_start_ &-> (array_obj_ref_707_Sample)
          array_obj_ref_707_sample_completed_ <-& (array_obj_ref_707_Sample)
          array_obj_ref_707_sample_completed_ &-> ($null)
          array_obj_ref_707_update_start_ &-> (array_obj_ref_707_Update)
          array_obj_ref_707_update_completed_ <-& (array_obj_ref_707_Update)
          // start: Forward dependencies from ( $slice rdatar 63 48 )  to transition array_obj_ref_707_sample_start_
          array_obj_ref_707_sample_start_ <-& (slice_709_update_completed_)
          // done: Forward dependencies from ( $slice rdatar 63 48 )  to transition array_obj_ref_707_sample_start_
          // end:  			image[15 ] := ( $slice rdatar 63 48 ) // bits of buffering = 16. 
          // start:  			image[11 ] := ( $slice rdatar 47 32 ) // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 273
          // Source expression
          // ( $slice rdatar 47 32 ) 
          $T[slice_714_sample_start_] 
          $T[slice_714_sample_completed_] 
          $T[slice_714_update_start_] 
          $T[slice_714_update_completed_] 
          // rdatar
          // start: Forward dependencies from rdatar to transition slice_714_sample_start_
          slice_714_sample_start_ <-& (call_stmt_705_update_completed_)
          // done: Forward dependencies from rdatar to transition slice_714_sample_start_
          ;;[slice_714_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_714_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_714_sample_start_ &-> (slice_714_Sample)
          slice_714_sample_completed_ <-& (slice_714_Sample)
          slice_714_sample_completed_ &-> ($null)
          slice_714_update_start_ &-> (slice_714_Update)
          slice_714_update_completed_ <-& (slice_714_Update)
          // Target expression
          // image[11 ]
          $T[array_obj_ref_712_sample_start_] 
          $T[array_obj_ref_712_sample_completed_] 
          $T[array_obj_ref_712_update_start_] 
          $T[array_obj_ref_712_update_completed_] 
          $T[array_obj_ref_712_word_address_calculated] 
          $T[array_obj_ref_712_root_address_calculated] 
          array_obj_ref_712_word_address_calculated <-& (array_obj_ref_712_root_address_calculated)
          ;;[array_obj_ref_712_Sample] 
          {
            ;;[array_obj_ref_712_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_712_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_712_sample_start_ <-& (array_obj_ref_712_word_address_calculated)
          array_obj_ref_712_sample_start_ &-> (array_obj_ref_712_Sample)
          array_obj_ref_712_sample_completed_ <-& (array_obj_ref_712_Sample)
          array_obj_ref_712_sample_completed_ &-> ($null)
          array_obj_ref_712_update_start_ &-> (array_obj_ref_712_Update)
          array_obj_ref_712_update_completed_ <-& (array_obj_ref_712_Update)
          // start: Forward dependencies from ( $slice rdatar 47 32 )  to transition array_obj_ref_712_sample_start_
          array_obj_ref_712_sample_start_ <-& (slice_714_update_completed_)
          // done: Forward dependencies from ( $slice rdatar 47 32 )  to transition array_obj_ref_712_sample_start_
          // end:  			image[11 ] := ( $slice rdatar 47 32 ) // bits of buffering = 16. 
          // start:  			image[7 ] := ( $slice rdatar 31 16 ) // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 274
          // Source expression
          // ( $slice rdatar 31 16 ) 
          $T[slice_719_sample_start_] 
          $T[slice_719_sample_completed_] 
          $T[slice_719_update_start_] 
          $T[slice_719_update_completed_] 
          // rdatar
          // start: Forward dependencies from rdatar to transition slice_719_sample_start_
          slice_719_sample_start_ <-& (call_stmt_705_update_completed_)
          // done: Forward dependencies from rdatar to transition slice_719_sample_start_
          ;;[slice_719_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_719_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_719_sample_start_ &-> (slice_719_Sample)
          slice_719_sample_completed_ <-& (slice_719_Sample)
          slice_719_sample_completed_ &-> ($null)
          slice_719_update_start_ &-> (slice_719_Update)
          slice_719_update_completed_ <-& (slice_719_Update)
          // Target expression
          // image[7 ]
          $T[array_obj_ref_717_sample_start_] 
          $T[array_obj_ref_717_sample_completed_] 
          $T[array_obj_ref_717_update_start_] 
          $T[array_obj_ref_717_update_completed_] 
          $T[array_obj_ref_717_word_address_calculated] 
          $T[array_obj_ref_717_root_address_calculated] 
          array_obj_ref_717_word_address_calculated <-& (array_obj_ref_717_root_address_calculated)
          ;;[array_obj_ref_717_Sample] 
          {
            ;;[array_obj_ref_717_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_717_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_717_sample_start_ <-& (array_obj_ref_717_word_address_calculated)
          array_obj_ref_717_sample_start_ &-> (array_obj_ref_717_Sample)
          array_obj_ref_717_sample_completed_ <-& (array_obj_ref_717_Sample)
          array_obj_ref_717_sample_completed_ &-> ($null)
          array_obj_ref_717_update_start_ &-> (array_obj_ref_717_Update)
          array_obj_ref_717_update_completed_ <-& (array_obj_ref_717_Update)
          // start: Forward dependencies from ( $slice rdatar 31 16 )  to transition array_obj_ref_717_sample_start_
          array_obj_ref_717_sample_start_ <-& (slice_719_update_completed_)
          // done: Forward dependencies from ( $slice rdatar 31 16 )  to transition array_obj_ref_717_sample_start_
          // end:  			image[7 ] := ( $slice rdatar 31 16 ) // bits of buffering = 16. 
          // start:  			image[3 ] := ( $slice rdatar 15 0 ) // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 275
          // Source expression
          // ( $slice rdatar 15 0 ) 
          $T[slice_724_sample_start_] 
          $T[slice_724_sample_completed_] 
          $T[slice_724_update_start_] 
          $T[slice_724_update_completed_] 
          // rdatar
          // start: Forward dependencies from rdatar to transition slice_724_sample_start_
          slice_724_sample_start_ <-& (call_stmt_705_update_completed_)
          // done: Forward dependencies from rdatar to transition slice_724_sample_start_
          ;;[slice_724_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_724_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_724_sample_start_ &-> (slice_724_Sample)
          slice_724_sample_completed_ <-& (slice_724_Sample)
          slice_724_sample_completed_ &-> ($null)
          slice_724_update_start_ &-> (slice_724_Update)
          slice_724_update_completed_ <-& (slice_724_Update)
          // Target expression
          // image[3 ]
          $T[array_obj_ref_722_sample_start_] 
          $T[array_obj_ref_722_sample_completed_] 
          $T[array_obj_ref_722_update_start_] 
          $T[array_obj_ref_722_update_completed_] 
          $T[array_obj_ref_722_word_address_calculated] 
          $T[array_obj_ref_722_root_address_calculated] 
          array_obj_ref_722_word_address_calculated <-& (array_obj_ref_722_root_address_calculated)
          ;;[array_obj_ref_722_Sample] 
          {
            ;;[array_obj_ref_722_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_722_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_722_sample_start_ <-& (array_obj_ref_722_word_address_calculated)
          array_obj_ref_722_sample_start_ &-> (array_obj_ref_722_Sample)
          array_obj_ref_722_sample_completed_ <-& (array_obj_ref_722_Sample)
          array_obj_ref_722_sample_completed_ &-> ($null)
          array_obj_ref_722_update_start_ &-> (array_obj_ref_722_Update)
          array_obj_ref_722_update_completed_ <-& (array_obj_ref_722_Update)
          // start: Forward dependencies from ( $slice rdatar 15 0 )  to transition array_obj_ref_722_sample_start_
          array_obj_ref_722_sample_start_ <-& (slice_724_update_completed_)
          // done: Forward dependencies from ( $slice rdatar 15 0 )  to transition array_obj_ref_722_sample_start_
          // end:  			image[3 ] := ( $slice rdatar 15 0 ) // bits of buffering = 16. 
          // start:  			NL := (L + 1 )// bits of buffering = 12. 
          //  file prog.linked.opt.aa, line 276
          // Source expression
          // (L + 1 )
          $T[ADD_u12_u12_729_sample_start_] 
          $T[ADD_u12_u12_729_sample_completed_] 
          $T[ADD_u12_u12_729_update_start_] 
          $T[ADD_u12_u12_729_update_completed_] 
          // L
          // start: Forward dependencies from L to transition ADD_u12_u12_729_sample_start_
          // done: Forward dependencies from L to transition ADD_u12_u12_729_sample_start_
          ;;[ADD_u12_u12_729_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u12_u12_729_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u12_u12_729_sample_start_ &-> (ADD_u12_u12_729_Sample)
          ADD_u12_u12_729_sample_completed_ <-& (ADD_u12_u12_729_Sample)
          ADD_u12_u12_729_sample_completed_ &-> ($null)
          ADD_u12_u12_729_update_start_ &-> (ADD_u12_u12_729_Update)
          ADD_u12_u12_729_update_completed_ <-& (ADD_u12_u12_729_Update)
          // Target expression
          // (as target) NL
          // start: WAR dependencies for NL
          // done: WAR dependencies for NL
          // end:  			NL := (L + 1 )// bits of buffering = 12. 
          // load-store dependencies..
          // memory-space  memory_space_5
          //  call_stmt_705 store
          // memory-space  memory_space_3
          //  array_obj_ref_707 store
          //  array_obj_ref_712 store
          $T [array_obj_ref_707_array_obj_ref_712_delay] $delay
          // array_obj_ref_707(store) -> array_obj_ref_712(store)
          array_obj_ref_712_sample_start_ <-& (array_obj_ref_707_array_obj_ref_712_delay)
          array_obj_ref_707_array_obj_ref_712_delay <-& (array_obj_ref_707_sample_completed_)
          //  array_obj_ref_717 store
          $T [array_obj_ref_712_array_obj_ref_717_delay] $delay
          // array_obj_ref_712(store) -> array_obj_ref_717(store)
          array_obj_ref_717_sample_start_ <-& (array_obj_ref_712_array_obj_ref_717_delay)
          array_obj_ref_712_array_obj_ref_717_delay <-& (array_obj_ref_712_sample_completed_)
          //  array_obj_ref_722 store
          $T [array_obj_ref_717_array_obj_ref_722_delay] $delay
          // array_obj_ref_717(store) -> array_obj_ref_722(store)
          array_obj_ref_722_sample_start_ <-& (array_obj_ref_717_array_obj_ref_722_delay)
          array_obj_ref_717_array_obj_ref_722_delay <-& (array_obj_ref_717_sample_completed_)
        }
        call_stmt_705_to_assign_stmt_730__entry__ |-> (call_stmt_705_to_assign_stmt_730)
        call_stmt_705_to_assign_stmt_730__exit__ <-| (call_stmt_705_to_assign_stmt_730)
        // if-statement  
        //  file prog.linked.opt.aa, line 0
        ;;[if_stmt_731_dead_link] 
        {
          $T [dead_transition] $dead 
        }
        if_stmt_731__entry__ |-> (if_stmt_731_dead_link)
        if_stmt_731__exit__ <-| (if_stmt_731_dead_link)
        ;;[if_stmt_731_eval_test] 
        {
          // test expression evaluate and trigger branch 
          // (NL < 29 )
          ;;[ULT_u12_u1_734] 
          {
            // binary expression 
            ||[ULT_u12_u1_734_inputs] 
            {
            }
            // flow-through
            ;;[SplitProtocol] 
            {
              ;;[Sample] 
              {
                $T [rr] $T [ra]
              }
              ;;[Update] 
              {
                $T [cr] $T [ca]
              }
            }
          }
          $T [branch_req] 
        }
        if_stmt_731__entry__ |-> (if_stmt_731_eval_test)
        $P [ULT_u12_u1_734_place]
        ULT_u12_u1_734_place <-| (if_stmt_731_eval_test)
        ;;[if_stmt_731_if_link] 
        {
          $T [if_choice_transition] 
        }
        ;;[if_stmt_731_else_link] 
        {
          $T [else_choice_transition] 
        }
        ULT_u12_u1_734_place |-> (if_stmt_731_if_link if_stmt_731_else_link)
        $P [loopback]
        loopback <-| (if_stmt_731_if_link)
        if_stmt_731__exit__ <-| (if_stmt_731_else_link)
        // control-path for merge  
        //  file prog.linked.opt.aa, line 226
        ;;[merge_stmt_566_dead_link] 
        {
          $T [dead_transition] $dead 
        }
        merge_stmt_566__entry__ |-> (merge_stmt_566_dead_link)
        merge_stmt_566__exit__ <-| (merge_stmt_566_dead_link)
        //---------------------   merge statement  file prog.linked.opt.aa, line 226  --------------------------
        ||[merge_stmt_566__entry___PhiReq] 
        {
          ;;[phi_stmt_567] 
          {
            ||[phi_stmt_567_sources] 
            {
              // sources for 				$phi L := 				  ($bitcast ($uint<12>) 0  ) $on   $entry 				  NL $on   loopback 
              // type of target is $uint<12>
              // constant source .... delay transition 
              $T [type_cast_570_konst_delay_trans] $delay
            }
            $T [phi_stmt_567_req] 
          }
        }
        merge_stmt_566__entry__ |-> (merge_stmt_566__entry___PhiReq)
        ||[loopback_PhiReq] 
        {
          ;;[phi_stmt_567] 
          {
            ||[phi_stmt_567_sources] 
            {
              // sources for 				$phi L := 				  ($bitcast ($uint<12>) 0  ) $on   $entry 				  NL $on   loopback 
              // type of target is $uint<12>
              // trivial non-constant source .... interlock-buffer introduced 
              || [Interlock] 
              {
                ;;[Sample] 
                {
                  $T [req] $T [ack]
                }
                ;;[Update] 
                {
                  $T [req] $T [ack]
                }
              }
            }
            $T [phi_stmt_567_req] 
          }
        }
        loopback |-> (loopback_PhiReq)
        $P [merge_stmt_566_PhiReqMerge] 
        merge_stmt_566_PhiReqMerge <-| ( merge_stmt_566__entry___PhiReq  loopback_PhiReq )
        ||[merge_stmt_566_PhiAck] 
        {
          $T [phi_stmt_567_ack] 
        }
        merge_stmt_566_PhiReqMerge |-> (merge_stmt_566_PhiAck)
        merge_stmt_566__exit__  <-| (merge_stmt_566_PhiAck)
        //---------------------  end of merge statement  file prog.linked.opt.aa, line 226  --------------------------
        merge_stmt_566__entry__ <-| (branch_block_stmt_565__entry__)
        assign_stmt_575__entry__ <-| (merge_stmt_566__exit__)
        branch_block_stmt_576__entry__ <-| (assign_stmt_575__exit__)
        call_stmt_624_to_assign_stmt_638__entry__ <-| (branch_block_stmt_576__exit__)
        branch_block_stmt_639__entry__ <-| (call_stmt_624_to_assign_stmt_638__exit__)
        call_stmt_705_to_assign_stmt_730__entry__ <-| (branch_block_stmt_639__exit__)
        if_stmt_731__entry__ <-| (call_stmt_705_to_assign_stmt_730__exit__)
        if_stmt_731__exit__ |-> (branch_block_stmt_565__exit__)
      }
      branch_block_stmt_565__entry__ |-> (branch_block_stmt_565)
      branch_block_stmt_565__exit__ <-| (branch_block_stmt_565)
      ::[assign_stmt_742] 
      {
        // start:  		NG := (G + 32 )// bits of buffering = 12. 
        //  file prog.linked.opt.aa, line 281
        // Source expression
        // (G + 32 )
        $T[ADD_u12_u12_741_sample_start_] 
        $T[ADD_u12_u12_741_sample_completed_] 
        $T[ADD_u12_u12_741_update_start_] 
        $T[ADD_u12_u12_741_update_completed_] 
        // G
        // start: Forward dependencies from G to transition ADD_u12_u12_741_sample_start_
        // done: Forward dependencies from G to transition ADD_u12_u12_741_sample_start_
        ;;[ADD_u12_u12_741_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[ADD_u12_u12_741_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        ADD_u12_u12_741_sample_start_ &-> (ADD_u12_u12_741_Sample)
        ADD_u12_u12_741_sample_completed_ <-& (ADD_u12_u12_741_Sample)
        ADD_u12_u12_741_sample_completed_ &-> ($null)
        ADD_u12_u12_741_update_start_ &-> (ADD_u12_u12_741_Update)
        ADD_u12_u12_741_update_completed_ <-& (ADD_u12_u12_741_Update)
        // Target expression
        // (as target) NG
        // start: WAR dependencies for NG
        // done: WAR dependencies for NG
        // end:  		NG := (G + 32 )// bits of buffering = 12. 
        // load-store dependencies..
      }
      assign_stmt_742__entry__ |-> (assign_stmt_742)
      assign_stmt_742__exit__ <-| (assign_stmt_742)
      // if-statement  
      //  file prog.linked.opt.aa, line -149387400
      ;;[if_stmt_743_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_743__entry__ |-> (if_stmt_743_dead_link)
      if_stmt_743__exit__ <-| (if_stmt_743_dead_link)
      ;;[if_stmt_743_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (NG < 928 )
        ;;[ULT_u12_u1_746] 
        {
          // binary expression 
          ||[ULT_u12_u1_746_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_743__entry__ |-> (if_stmt_743_eval_test)
      $P [ULT_u12_u1_746_place]
      ULT_u12_u1_746_place <-| (if_stmt_743_eval_test)
      ;;[if_stmt_743_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_743_else_link] 
      {
        $T [else_choice_transition] 
      }
      ULT_u12_u1_746_place |-> (if_stmt_743_if_link if_stmt_743_else_link)
      $P [loopback]
      loopback <-| (if_stmt_743_if_link)
      if_stmt_743__exit__ <-| (if_stmt_743_else_link)
      // control-path for merge  
      //  file prog.linked.opt.aa, line 185
      ;;[merge_stmt_444_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_444__entry__ |-> (merge_stmt_444_dead_link)
      merge_stmt_444__exit__ <-| (merge_stmt_444_dead_link)
      //---------------------   merge statement  file prog.linked.opt.aa, line 185  --------------------------
      ||[merge_stmt_444__entry___PhiReq] 
      {
        ;;[phi_stmt_445] 
        {
          ||[phi_stmt_445_sources] 
          {
            // sources for 			$phi G := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  NG $on   loopback 
            // type of target is $uint<12>
            // constant source .... delay transition 
            $T [type_cast_448_konst_delay_trans] $delay
          }
          $T [phi_stmt_445_req] 
        }
      }
      merge_stmt_444__entry__ |-> (merge_stmt_444__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_445] 
        {
          ||[phi_stmt_445_sources] 
          {
            // sources for 			$phi G := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  NG $on   loopback 
            // type of target is $uint<12>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_445_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_444_PhiReqMerge] 
      merge_stmt_444_PhiReqMerge <-| ( merge_stmt_444__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_444_PhiAck] 
      {
        $T [phi_stmt_445_ack] 
      }
      merge_stmt_444_PhiReqMerge |-> (merge_stmt_444_PhiAck)
      merge_stmt_444__exit__  <-| (merge_stmt_444_PhiAck)
      //---------------------  end of merge statement  file prog.linked.opt.aa, line 185  --------------------------
      merge_stmt_444__entry__ <-| (branch_block_stmt_443__entry__)
      assign_stmt_453__entry__ <-| (merge_stmt_444__exit__)
      branch_block_stmt_454__entry__ <-| (assign_stmt_453__exit__)
      branch_block_stmt_565__entry__ <-| (branch_block_stmt_454__exit__)
      assign_stmt_742__entry__ <-| (branch_block_stmt_565__exit__)
      if_stmt_743__entry__ <-| (assign_stmt_742__exit__)
      if_stmt_743__exit__ |-> (branch_block_stmt_443__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %try1%fetch_kernel%
    //  file prog.linked.opt.aa, line 156
    // constant-object-declarations for block %try1%fetch_kernel
    //  file prog.linked.opt.aa, line 152
    // constant-object-declarations for block %try1%entire1%
    //  file prog.linked.opt.aa, line 185
    // constant-object-declarations for block %try1%entire1%fetch_mem1%
    //  file prog.linked.opt.aa, line 194
    // constant-object-declarations for block %try1%entire1%fetch_mem1
    //  file prog.linked.opt.aa, line 190
    // constant-object-declarations for block %try1%entire1%entire%
    //  file prog.linked.opt.aa, line 226
    // constant-object-declarations for block %try1%entire1%entire%dot%
    //  file prog.linked.opt.aa, line 235
    // constant-object-declarations for block %try1%entire1%entire%dot
    //  file prog.linked.opt.aa, line 231
    // constant-object-declarations for block %try1%entire1%entire%rearrange_image%
    //  file prog.linked.opt.aa, line 255
    // constant-object-declarations for block %try1%entire1%entire%rearrange_image
    //  file prog.linked.opt.aa, line 251
    // constant-object-declarations for block %try1%entire1%entire
    //  file prog.linked.opt.aa, line 224
    // constant-object-declarations for block %try1%entire1
    //  file prog.linked.opt.aa, line 183
    // constant-object-declarations for block %try1
    //  file prog.linked.opt.aa, line 147
    // constant-declarations for block %try1%fetch_kernel
    //  file prog.linked.opt.aa, line 152
    // do-while statement  
    //  file prog.linked.opt.aa, line 154
    // 16 
    $constant $W[konst_440_wire_constant] : $int<12> := _b000000010000// 16
    // constant-declarations for block %try1%fetch_kernel%
    //  file prog.linked.opt.aa, line 156
    // constant-declarations for phi:  			$phi T := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  NT $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 157
    // ($bitcast ($uint<12>) 0  )
    $constant $W[type_cast_349_wire_constant] : $int<12> := _b000000000000// 0
    // ZJ
    $constant $W[LOAD_ZJ_357_word_address_0] : $pointer<memory_space_1> := _b0
    // one
    $constant $W[LOAD_one_366_word_address_0] : $pointer<memory_space_6> := _b0
    // 			$call accMemAccessDaemon (NNT ) (rdatalk rdatahk ) 
    //  file prog.linked.opt.aa, line 164
    // 1 
    $constant $W[konst_384_wire_constant] : $int<12> := _b000000000001// 1
    // kernel[T_341_delayed_12_0]
    $constant $W[array_obj_ref_391_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_391_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_391_word_offset_0] : $int<4> := _b0000// 0
    // kernel[TT_345_delayed_11_0]
    $constant $W[array_obj_ref_398_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_398_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_398_word_offset_0] : $int<4> := _b0000// 0
    // 2 
    $constant $W[konst_411_wire_constant] : $int<12> := _b000000000010// 2
    // 3 
    $constant $W[konst_416_wire_constant] : $int<12> := _b000000000011// 3
    // kernel[TTT_367_delayed_11_0]
    $constant $W[array_obj_ref_423_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_423_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_423_word_offset_0] : $int<4> := _b0000// 0
    // kernel[TTTT_371_delayed_11_0]
    $constant $W[array_obj_ref_430_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_430_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_430_word_offset_0] : $int<4> := _b0000// 0
    // 4 
    $constant $W[konst_435_wire_constant] : $int<12> := _b000000000100// 4
    // constant-declarations for block %try1%entire1
    //  file prog.linked.opt.aa, line 183
    // constant-declarations for block %try1%entire1%
    //  file prog.linked.opt.aa, line 185
    // constant-declarations for phi:  			$phi G := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  NG $on   loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 186
    // ($bitcast ($uint<12>) 0  )
    $constant $W[type_cast_448_wire_constant] : $int<12> := _b000000000000// 0
    // 0 
    $constant $W[konst_452_wire_constant] : $int<16> := _b0000000000000000// 0
    // PJ
    $constant $W[STORE_PJ_451_word_address_0] : $pointer<memory_space_0> := _b0
    // constant-declarations for block %try1%entire1%fetch_mem1
    //  file prog.linked.opt.aa, line 190
    // do-while statement  
    //  file prog.linked.opt.aa, line 192
    // 128 
    $constant $W[konst_562_wire_constant] : $int<12> := _b000010000000// 128
    // constant-declarations for block %try1%entire1%fetch_mem1%
    //  file prog.linked.opt.aa, line 194
    // constant-declarations for phi:  				$phi J := 				  ($bitcast ($uint<12>) 0  ) $on   $entry 				  NJ $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 195
    // ($bitcast ($uint<12>) 0  )
    $constant $W[type_cast_460_wire_constant] : $int<12> := _b000000000000// 0
    // one
    $constant $W[LOAD_one_475_word_address_0] : $pointer<memory_space_6> := _b0
    // 				$call accMemAccessDaemon (NNJ ) (rdatal rdatah ) 
    //  file prog.linked.opt.aa, line 204
    // PJ
    $constant $W[LOAD_PJ_500_word_address_0] : $pointer<memory_space_0> := _b0
    // 1 
    $constant $W[konst_501_wire_constant] : $int<16> := _b0000000000000001// 1
    // PJ
    $constant $W[LOAD_PJ_505_word_address_0] : $pointer<memory_space_0> := _b0
    // image[PJ_440_delayed_7_0]
    $constant $W[array_obj_ref_508_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_508_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_508_word_offset_0] : $int<4> := _b0000// 0
    // image[PPJ_444_delayed_6_0]
    $constant $W[array_obj_ref_515_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_515_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_515_word_offset_0] : $int<4> := _b0000// 0
    // PJ
    $constant $W[LOAD_PJ_527_word_address_0] : $pointer<memory_space_0> := _b0
    // 2 
    $constant $W[konst_528_wire_constant] : $int<16> := _b0000000000000010// 2
    // PJ
    $constant $W[LOAD_PJ_532_word_address_0] : $pointer<memory_space_0> := _b0
    // 3 
    $constant $W[konst_533_wire_constant] : $int<16> := _b0000000000000011// 3
    // image[PPPJ_466_delayed_6_0]
    $constant $W[array_obj_ref_540_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_540_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_540_word_offset_0] : $int<4> := _b0000// 0
    // image[PPPPJ_470_delayed_6_0]
    $constant $W[array_obj_ref_547_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_547_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_547_word_offset_0] : $int<4> := _b0000// 0
    // 32 
    $constant $W[konst_552_wire_constant] : $int<12> := _b000000100000// 32
    // PJ
    $constant $W[LOAD_PJ_556_word_address_0] : $pointer<memory_space_0> := _b0
    // 4 
    $constant $W[konst_557_wire_constant] : $int<16> := _b0000000000000100// 4
    // PJ
    $constant $W[STORE_PJ_555_word_address_0] : $pointer<memory_space_0> := _b0
    // constant-declarations for block %try1%entire1%entire
    //  file prog.linked.opt.aa, line 224
    // constant-declarations for block %try1%entire1%entire%
    //  file prog.linked.opt.aa, line 226
    // constant-declarations for phi:  				$phi L := 				  ($bitcast ($uint<12>) 0  ) $on   $entry 				  NL $on   loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 227
    // ($bitcast ($uint<12>) 0  )
    $constant $W[type_cast_570_wire_constant] : $int<12> := _b000000000000// 0
    // 0 
    $constant $W[konst_574_wire_constant] : $int<16> := _b0000000000000000// 0
    // total
    $constant $W[STORE_total_573_word_address_0] : $pointer<memory_space_7> := _b0
    // constant-declarations for block %try1%entire1%entire%dot
    //  file prog.linked.opt.aa, line 231
    // do-while statement  
    //  file prog.linked.opt.aa, line 233
    // 16 
    $constant $W[konst_615_wire_constant] : $int<32> := _b00000000000000000000000000010000// 16
    // constant-declarations for block %try1%entire1%entire%dot%
    //  file prog.linked.opt.aa, line 235
    // constant-declarations for phi:  					$phi K := 					  ($bitcast ($uint<32>) 0  ) $on   $entry 					  NK $on   $loopback 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 236
    // ($bitcast ($uint<32>) 0  )
    $constant $W[type_cast_582_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // image[K]
    $constant $W[array_obj_ref_587_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_587_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_587_word_offset_0] : $int<4> := _b0000// 0
    // kernel[K]
    $constant $W[array_obj_ref_591_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_591_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_591_word_offset_0] : $int<4> := _b0000// 0
    // a[K_517_delayed_5_0]
    $constant $W[array_obj_ref_597_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_597_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_597_word_offset_0] : $int<4> := _b0000// 0
    // total
    $constant $W[LOAD_total_603_word_address_0] : $pointer<memory_space_7> := _b0
    // a[K]
    $constant $W[array_obj_ref_605_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_605_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_605_word_offset_0] : $int<4> := _b0000// 0
    // total
    $constant $W[STORE_total_602_word_address_0] : $pointer<memory_space_7> := _b0
    // 1 
    $constant $W[konst_610_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 			$call accessMem (0  (L + G) total ) (rdata ) 
    //  file prog.linked.opt.aa, line 247
    // 0 
    $constant $W[konst_618_wire_constant] : $int<1> := _b0// 0
    // total
    $constant $W[LOAD_total_622_word_address_0] : $pointer<memory_space_7> := _b0
    // zer
    $constant $W[LOAD_zer_626_word_address_0] : $pointer<memory_space_8> := _b0
    // mem_array[f]
    $constant $W[array_obj_ref_637_resized_base_address] : $int<11> := _b00000000000// 0
    $constant $W[array_obj_ref_637_offset_scale_factor_0] : $int<11> := _b00000000001// 1
    $constant $W[array_obj_ref_637_word_offset_0] : $int<11> := _b00000000000// 0
    // constant-declarations for block %try1%entire1%entire%rearrange_image
    //  file prog.linked.opt.aa, line 251
    // do-while statement  
    //  file prog.linked.opt.aa, line 253
    // 16 
    $constant $W[konst_694_wire_constant] : $int<12> := _b000000010000// 16
    // constant-declarations for block %try1%entire1%entire%rearrange_image%
    //  file prog.linked.opt.aa, line 255
    // constant-declarations for phi:  					$phi H := 					  ($bitcast ($uint<12>) 0  ) $on   $entry 					  NH $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 256
    // ($bitcast ($uint<12>) 0  )
    $constant $W[type_cast_645_wire_constant] : $int<12> := _b000000000000// 0
    // 1 
    $constant $W[konst_650_wire_constant] : $int<12> := _b000000000001// 1
    // image[HH]
    $constant $W[array_obj_ref_659_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_659_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_659_word_offset_0] : $int<4> := _b0000// 0
    // image[H_574_delayed_5_0]
    $constant $W[array_obj_ref_657_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_657_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_657_word_offset_0] : $int<4> := _b0000// 0
    // 2 
    $constant $W[konst_663_wire_constant] : $int<12> := _b000000000010// 2
    // image[HHH]
    $constant $W[array_obj_ref_672_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_672_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_672_word_offset_0] : $int<4> := _b0000// 0
    // image[HH_584_delayed_4_0]
    $constant $W[array_obj_ref_670_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_670_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_670_word_offset_0] : $int<4> := _b0000// 0
    // 3 
    $constant $W[konst_676_wire_constant] : $int<12> := _b000000000011// 3
    // image[HHHH]
    $constant $W[array_obj_ref_685_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_685_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_685_word_offset_0] : $int<4> := _b0000// 0
    // image[HHH_594_delayed_4_0]
    $constant $W[array_obj_ref_683_resized_base_address] : $int<4> := _b0000// 0
    $constant $W[array_obj_ref_683_offset_scale_factor_0] : $int<4> := _b0001// 1
    $constant $W[array_obj_ref_683_word_offset_0] : $int<4> := _b0000// 0
    // 4 
    $constant $W[konst_689_wire_constant] : $int<12> := _b000000000100// 4
    // 			$call accessMem_v (1  ((L + G) + 4 ) 0  ) (rdatar ) 
    //  file prog.linked.opt.aa, line 271
    // 1 
    $constant $W[konst_697_wire_constant] : $int<1> := _b1// 1
    // 4 
    $constant $W[konst_701_wire_constant] : $int<12> := _b000000000100// 4
    // 0 
    $constant $W[konst_703_wire_constant] : $int<16> := _b0000000000000000// 0
    // image[15 ]
    $constant $W[array_obj_ref_707_word_address_0] : $pointer<memory_space_3> := _b1111
    // image[11 ]
    $constant $W[array_obj_ref_712_word_address_0] : $pointer<memory_space_3> := _b1011
    // image[7 ]
    $constant $W[array_obj_ref_717_word_address_0] : $pointer<memory_space_3> := _b0111
    // image[3 ]
    $constant $W[array_obj_ref_722_word_address_0] : $pointer<memory_space_3> := _b0011
    // 1 
    $constant $W[konst_728_wire_constant] : $int<12> := _b000000000001// 1
    // if-statement  
    //  file prog.linked.opt.aa, line 0
    // 29 
    $constant $W[konst_733_wire_constant] : $int<12> := _b000000011101// 29
    // 32 
    $constant $W[konst_740_wire_constant] : $int<12> := _b000000100000// 32
    // if-statement  
    //  file prog.linked.opt.aa, line -149387400
    // 928 
    $constant $W[konst_745_wire_constant] : $int<12> := _b001110100000// 928
    // block %try1%fetch_kernel
    //  file prog.linked.opt.aa, line 152
    // do-while statement  
    //  file prog.linked.opt.aa, line 154
    // (NT < 16 )
    $intermediate $W[ULT_u12_u1_441_wire] : $int<1>
    // merge-statement  
    //  file prog.linked.opt.aa, line 156
    // 			$phi T := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  NT $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 157
    $W[NT_437_350_buffered] : $int<12>
    // T
    $W[T_346] : $int<12>
    // 			T_310_delayed_4_0 := T $buffering 4// bits of buffering = 48. 
    //  file prog.linked.opt.aa, line 160
    // T_310_delayed_4_0
    $W[T_310_delayed_4_0_354] : $int<12>
    // 			NNNT := (T_310_delayed_4_0 + ZJ)// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 161
    // ZJ
    $W[LOAD_ZJ_357_wire] : $int<12>
    // ZJ
    $W[LOAD_ZJ_357_data_0] : $int<12>
    // NNNT
    $W[NNNT_359] : $int<12>
    // 			NTT := ($bitcast ($uint<31>) NNNT )// bits of buffering = 31. 
    //  file prog.linked.opt.aa, line 162
    // NTT
    $W[NTT_364] : $int<31>
    // 			NNT := (one && NTT)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 163
    // one
    $W[LOAD_one_366_wire] : $int<1>
    // one
    $W[LOAD_one_366_data_0] : $int<1>
    // NNT
    $W[NNT_369] : $int<32>
    // 			$call accMemAccessDaemon (NNT ) (rdatalk rdatahk ) 
    //  file prog.linked.opt.aa, line 164
    // rdatalk
    $W[rdatalk_373] : $int<32>
    // rdatahk
    $W[rdatahk_373] : $int<32>
    // 			rdatak1 := ( $slice rdatalk 31 16 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 165
    // rdatak1
    $W[rdatak1_377] : $int<16>
    // 			rdatak0 := ( $slice rdatalk 15 0 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 166
    // rdatak0
    $W[rdatak0_381] : $int<16>
    // 			TT := (T + 1 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 167
    // TT
    $W[TT_386] : $int<12>
    // 			T_341_delayed_12_0 := T $buffering 12// bits of buffering = 144. 
    //  file prog.linked.opt.aa, line 168
    // T_341_delayed_12_0
    $W[T_341_delayed_12_0_389] : $int<12>
    // 			kernel[T_341_delayed_12_0] := rdatak0// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 169
    // kernel[T_341_delayed_12_0]
    $intermediate $W[R_T_341_delayed_12_0_390_resized] : $int<4>
    $intermediate $W[R_T_341_delayed_12_0_390_scaled] : $int<4>
    $intermediate $W[array_obj_ref_391_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_391_root_address] : $int<4>
    $W[array_obj_ref_391_word_address_0] : $pointer<memory_space_4>
    $W[array_obj_ref_391_data_0] : $int<16>
    // 			TT_345_delayed_11_0 := TT $buffering 11// bits of buffering = 132. 
    //  file prog.linked.opt.aa, line 170
    // TT_345_delayed_11_0
    $W[TT_345_delayed_11_0_396] : $int<12>
    // 			kernel[TT_345_delayed_11_0] := rdatak1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 171
    // kernel[TT_345_delayed_11_0]
    $intermediate $W[R_TT_345_delayed_11_0_397_resized] : $int<4>
    $intermediate $W[R_TT_345_delayed_11_0_397_scaled] : $int<4>
    $intermediate $W[array_obj_ref_398_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_398_root_address] : $int<4>
    $W[array_obj_ref_398_word_address_0] : $pointer<memory_space_4>
    $W[array_obj_ref_398_data_0] : $int<16>
    // 			rdatak3 := ( $slice rdatahk 31 16 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 172
    // rdatak3
    $W[rdatak3_404] : $int<16>
    // 			rdatak2 := ( $slice rdatahk 15 0 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 173
    // rdatak2
    $W[rdatak2_408] : $int<16>
    // 			TTT := (T + 2 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 174
    // TTT
    $W[TTT_413] : $int<12>
    // 			TTTT := (T + 3 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 175
    // TTTT
    $W[TTTT_418] : $int<12>
    // 			TTT_367_delayed_11_0 := TTT $buffering 11// bits of buffering = 132. 
    //  file prog.linked.opt.aa, line 176
    // TTT_367_delayed_11_0
    $W[TTT_367_delayed_11_0_421] : $int<12>
    // 			kernel[TTT_367_delayed_11_0] := rdatak2// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 177
    // kernel[TTT_367_delayed_11_0]
    $intermediate $W[R_TTT_367_delayed_11_0_422_resized] : $int<4>
    $intermediate $W[R_TTT_367_delayed_11_0_422_scaled] : $int<4>
    $intermediate $W[array_obj_ref_423_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_423_root_address] : $int<4>
    $W[array_obj_ref_423_word_address_0] : $pointer<memory_space_4>
    $W[array_obj_ref_423_data_0] : $int<16>
    // 			TTTT_371_delayed_11_0 := TTTT $buffering 11// bits of buffering = 132. 
    //  file prog.linked.opt.aa, line 178
    // TTTT_371_delayed_11_0
    $W[TTTT_371_delayed_11_0_428] : $int<12>
    // 			kernel[TTTT_371_delayed_11_0] := rdatak3// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 179
    // kernel[TTTT_371_delayed_11_0]
    $intermediate $W[R_TTTT_371_delayed_11_0_429_resized] : $int<4>
    $intermediate $W[R_TTTT_371_delayed_11_0_429_scaled] : $int<4>
    $intermediate $W[array_obj_ref_430_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_430_root_address] : $int<4>
    $W[array_obj_ref_430_word_address_0] : $pointer<memory_space_4>
    $W[array_obj_ref_430_data_0] : $int<16>
    // 			NT := (T + 4 ) $buffering 2// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 180
    // NT
    $W[NT_437] : $int<12>
    // block %try1%entire1
    //  file prog.linked.opt.aa, line 183
    // merge-statement  
    //  file prog.linked.opt.aa, line 185
    // 			$phi G := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  NG $on   loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 186
    $W[NG_742_449_buffered] : $int<12>
    // G
    $W[G_445] : $int<12>
    // 		PJ := 0 // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 189
    // PJ
    $constant $W[STORE_PJ_451_word_address_0] : $pointer<memory_space_0> := _b0
    $W[STORE_PJ_451_data_0] : $int<16>
    // block %try1%entire1%fetch_mem1
    //  file prog.linked.opt.aa, line 190
    // do-while statement  
    //  file prog.linked.opt.aa, line 192
    // (NJ < 128 )
    $intermediate $W[ULT_u12_u1_563_wire] : $int<1>
    // merge-statement  
    //  file prog.linked.opt.aa, line 194
    // 				$phi J := 				  ($bitcast ($uint<12>) 0  ) $on   $entry 				  NJ $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 195
    $W[NJ_554_461_buffered] : $int<12>
    // J
    $W[J_457] : $int<12>
    // 				NJJ := ($bitcast ($uint<31>) J )// bits of buffering = 31. 
    //  file prog.linked.opt.aa, line 198
    // NJJ
    $W[NJJ_466] : $int<31>
    // 				NGG := ($bitcast ($uint<32>) G )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 199
    // NGG
    $W[NGG_470] : $int<32>
    // 				NJJ_415_delayed_2_0 := NJJ $buffering 2// bits of buffering = 62. 
    //  file prog.linked.opt.aa, line 200
    // NJJ_415_delayed_2_0
    $W[NJJ_415_delayed_2_0_473] : $int<31>
    // 				NNG := (one && NJJ_415_delayed_2_0)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 201
    // one
    $W[LOAD_one_475_wire] : $int<1>
    // one
    $W[LOAD_one_475_data_0] : $int<1>
    // NNG
    $W[NNG_478] : $int<32>
    // 				NGG_420_delayed_4_0 := NGG $buffering 4// bits of buffering = 128. 
    //  file prog.linked.opt.aa, line 202
    // NGG_420_delayed_4_0
    $W[NGG_420_delayed_4_0_481] : $int<32>
    // 				NNJ := (NNG + NGG_420_delayed_4_0)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 203
    // NNJ
    $W[NNJ_486] : $int<32>
    // 				$call accMemAccessDaemon (NNJ ) (rdatal rdatah ) 
    //  file prog.linked.opt.aa, line 204
    // rdatal
    $W[rdatal_490] : $int<32>
    // rdatah
    $W[rdatah_490] : $int<32>
    // 				rdatai1 := ( $slice rdatal 31 16 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 205
    // rdatai1
    $W[rdatai1_494] : $int<16>
    // 				rdatai0 := ( $slice rdatal 15 0 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 206
    // rdatai0
    $W[rdatai0_498] : $int<16>
    // 				PPJ := (PJ + 1 )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 207
    // PJ
    $W[LOAD_PJ_500_wire] : $int<16>
    // PJ
    $W[LOAD_PJ_500_data_0] : $int<16>
    // PPJ
    $W[PPJ_503] : $int<16>
    // 				PJ_440_delayed_7_0 := PJ $buffering 7// bits of buffering = 112. 
    //  file prog.linked.opt.aa, line 208
    // PJ
    $W[LOAD_PJ_505_data_0] : $int<16>
    // PJ_440_delayed_7_0
    $W[PJ_440_delayed_7_0_506] : $int<16>
    // 				image[PJ_440_delayed_7_0] := rdatai0// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 209
    // image[PJ_440_delayed_7_0]
    $intermediate $W[R_PJ_440_delayed_7_0_507_resized] : $int<4>
    $intermediate $W[R_PJ_440_delayed_7_0_507_scaled] : $int<4>
    $intermediate $W[array_obj_ref_508_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_508_root_address] : $int<4>
    $W[array_obj_ref_508_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_508_data_0] : $int<16>
    // 				PPJ_444_delayed_6_0 := PPJ $buffering 6// bits of buffering = 96. 
    //  file prog.linked.opt.aa, line 210
    // PPJ_444_delayed_6_0
    $W[PPJ_444_delayed_6_0_513] : $int<16>
    // 				image[PPJ_444_delayed_6_0] := rdatai1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 211
    // image[PPJ_444_delayed_6_0]
    $intermediate $W[R_PPJ_444_delayed_6_0_514_resized] : $int<4>
    $intermediate $W[R_PPJ_444_delayed_6_0_514_scaled] : $int<4>
    $intermediate $W[array_obj_ref_515_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_515_root_address] : $int<4>
    $W[array_obj_ref_515_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_515_data_0] : $int<16>
    // 				rdatai3 := ( $slice rdatah 31 16 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 212
    // rdatai3
    $W[rdatai3_521] : $int<16>
    // 				rdatai2 := ( $slice rdatah 15 0 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 213
    // rdatai2
    $W[rdatai2_525] : $int<16>
    // 				PPPJ := (PJ + 2 )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 214
    // PJ
    $W[LOAD_PJ_527_wire] : $int<16>
    // PJ
    $W[LOAD_PJ_527_data_0] : $int<16>
    // PPPJ
    $W[PPPJ_530] : $int<16>
    // 				PPPPJ := (PJ + 3 )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 215
    // PJ
    $W[LOAD_PJ_532_wire] : $int<16>
    // PJ
    $W[LOAD_PJ_532_data_0] : $int<16>
    // PPPPJ
    $W[PPPPJ_535] : $int<16>
    // 				PPPJ_466_delayed_6_0 := PPPJ $buffering 6// bits of buffering = 96. 
    //  file prog.linked.opt.aa, line 216
    // PPPJ_466_delayed_6_0
    $W[PPPJ_466_delayed_6_0_538] : $int<16>
    // 				image[PPPJ_466_delayed_6_0] := rdatai2// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 217
    // image[PPPJ_466_delayed_6_0]
    $intermediate $W[R_PPPJ_466_delayed_6_0_539_resized] : $int<4>
    $intermediate $W[R_PPPJ_466_delayed_6_0_539_scaled] : $int<4>
    $intermediate $W[array_obj_ref_540_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_540_root_address] : $int<4>
    $W[array_obj_ref_540_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_540_data_0] : $int<16>
    // 				PPPPJ_470_delayed_6_0 := PPPPJ $buffering 6// bits of buffering = 96. 
    //  file prog.linked.opt.aa, line 218
    // PPPPJ_470_delayed_6_0
    $W[PPPPJ_470_delayed_6_0_545] : $int<16>
    // 				image[PPPPJ_470_delayed_6_0] := rdatai3// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 219
    // image[PPPPJ_470_delayed_6_0]
    $intermediate $W[R_PPPPJ_470_delayed_6_0_546_resized] : $int<4>
    $intermediate $W[R_PPPPJ_470_delayed_6_0_546_scaled] : $int<4>
    $intermediate $W[array_obj_ref_547_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_547_root_address] : $int<4>
    $W[array_obj_ref_547_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_547_data_0] : $int<16>
    // 				NJ := (J + 32 ) $buffering 2// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 220
    // NJ
    $W[NJ_554] : $int<12>
    // 				PJ := (PJ + 4 )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 221
    // PJ
    $W[LOAD_PJ_556_wire] : $int<16>
    // PJ
    $W[LOAD_PJ_556_data_0] : $int<16>
    // (PJ + 4 )
    $intermediate $W[ADD_u16_u16_558_wire] : $int<16>
    // PJ
    $constant $W[STORE_PJ_555_word_address_0] : $pointer<memory_space_0> := _b0
    $W[STORE_PJ_555_data_0] : $int<16>
    // block %try1%entire1%entire
    //  file prog.linked.opt.aa, line 224
    // merge-statement  
    //  file prog.linked.opt.aa, line 226
    // 				$phi L := 				  ($bitcast ($uint<12>) 0  ) $on   $entry 				  NL $on   loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 227
    $W[NL_730_571_buffered] : $int<12>
    // L
    $W[L_567] : $int<12>
    // 			total := 0 // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 230
    // total
    $constant $W[STORE_total_573_word_address_0] : $pointer<memory_space_7> := _b0
    $W[STORE_total_573_data_0] : $int<16>
    // block %try1%entire1%entire%dot
    //  file prog.linked.opt.aa, line 231
    // do-while statement  
    //  file prog.linked.opt.aa, line 233
    // (NK < 16 )
    $intermediate $W[ULT_u32_u1_616_wire] : $int<1>
    // merge-statement  
    //  file prog.linked.opt.aa, line 235
    // 					$phi K := 					  ($bitcast ($uint<32>) 0  ) $on   $entry 					  NK $on   $loopback 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 236
    $W[NK_612_583_buffered] : $int<32>
    // K
    $W[K_579] : $int<32>
    // 					imag1 := image[K]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 239
    // image[K]
    $intermediate $W[R_K_586_resized] : $int<4>
    $intermediate $W[R_K_586_scaled] : $int<4>
    $intermediate $W[array_obj_ref_587_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_587_root_address] : $int<4>
    $W[array_obj_ref_587_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_587_data_0] : $int<16>
    // imag1
    $W[imag1_588] : $int<16>
    // 					ker1 := kernel[K]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 240
    // kernel[K]
    $intermediate $W[R_K_590_resized] : $int<4>
    $intermediate $W[R_K_590_scaled] : $int<4>
    $intermediate $W[array_obj_ref_591_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_591_root_address] : $int<4>
    $W[array_obj_ref_591_word_address_0] : $pointer<memory_space_4>
    $W[array_obj_ref_591_data_0] : $int<16>
    // ker1
    $W[ker1_592] : $int<16>
    // 					K_517_delayed_5_0 := K $buffering 5// bits of buffering = 160. 
    //  file prog.linked.opt.aa, line 241
    // K_517_delayed_5_0
    $W[K_517_delayed_5_0_595] : $int<32>
    // 					a[K_517_delayed_5_0] := (imag1 * ker1)// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 242
    // (imag1 * ker1)
    $intermediate $W[MUL_u16_u16_600_wire] : $int<16>
    // a[K_517_delayed_5_0]
    $intermediate $W[R_K_517_delayed_5_0_596_resized] : $int<4>
    $intermediate $W[R_K_517_delayed_5_0_596_scaled] : $int<4>
    $intermediate $W[array_obj_ref_597_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_597_root_address] : $int<4>
    $W[array_obj_ref_597_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_597_data_0] : $int<16>
    // 					total := (total + a[K])// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 243
    // total
    $W[LOAD_total_603_wire] : $int<16>
    // total
    $W[LOAD_total_603_data_0] : $int<16>
    // a[K]
    $intermediate $W[R_K_604_resized] : $int<4>
    $intermediate $W[R_K_604_scaled] : $int<4>
    $intermediate $W[array_obj_ref_605_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_605_root_address] : $int<4>
    $W[array_obj_ref_605_word_address_0] : $pointer<memory_space_2>
    $W[array_obj_ref_605_data_0] : $int<16>
    $W[array_obj_ref_605_wire] : $int<16>
    // (total + a[K])
    $intermediate $W[ADD_u16_u16_606_wire] : $int<16>
    // total
    $constant $W[STORE_total_602_word_address_0] : $pointer<memory_space_7> := _b0
    $W[STORE_total_602_data_0] : $int<16>
    // 					NK := (K + 1 ) $buffering 2// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 244
    // NK
    $W[NK_612] : $int<32>
    // 			$call accessMem (0  (L + G) total ) (rdata ) 
    //  file prog.linked.opt.aa, line 247
    // (L + G)
    $intermediate $W[ADD_u12_u12_621_wire] : $int<12>
    // total
    $W[LOAD_total_622_wire] : $int<16>
    // total
    $W[LOAD_total_622_data_0] : $int<16>
    // rdata
    $W[rdata_624] : $int<64>
    // 			f := (zer && (L + G))// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 248
    // zer
    $W[LOAD_zer_626_wire] : $int<4>
    // zer
    $W[LOAD_zer_626_data_0] : $int<4>
    // (L + G)
    $intermediate $W[ADD_u12_u12_629_wire] : $int<12>
    // f
    $W[f_631] : $int<16>
    // 			acc_mem_add := f// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 249
    // acc_mem_add
    // 			acc_mem := mem_array[f]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 250
    // mem_array[f]
    $intermediate $W[R_f_636_resized] : $int<11>
    $intermediate $W[R_f_636_scaled] : $int<11>
    $intermediate $W[array_obj_ref_637_final_offset] : $int<11>
    $intermediate $W[array_obj_ref_637_root_address] : $int<11>
    $W[array_obj_ref_637_word_address_0] : $pointer<memory_space_5>
    $W[array_obj_ref_637_data_0] : $int<16>
    $W[array_obj_ref_637_wire] : $int<16>
    // acc_mem
    // block %try1%entire1%entire%rearrange_image
    //  file prog.linked.opt.aa, line 251
    // do-while statement  
    //  file prog.linked.opt.aa, line 253
    // (NH < 16 )
    $intermediate $W[ULT_u12_u1_695_wire] : $int<1>
    // merge-statement  
    //  file prog.linked.opt.aa, line 255
    // 					$phi H := 					  ($bitcast ($uint<12>) 0  ) $on   $entry 					  NH $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 256
    $W[NH_691_646_buffered] : $int<12>
    // H
    $W[H_642] : $int<12>
    // 					HH := (H + 1 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 259
    // HH
    $W[HH_652] : $int<12>
    // 					H_574_delayed_5_0 := H $buffering 5// bits of buffering = 60. 
    //  file prog.linked.opt.aa, line 260
    // H_574_delayed_5_0
    $W[H_574_delayed_5_0_655] : $int<12>
    // 					image[H_574_delayed_5_0] := image[HH]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 261
    // image[HH]
    $intermediate $W[R_HH_658_resized] : $int<4>
    $intermediate $W[R_HH_658_scaled] : $int<4>
    $intermediate $W[array_obj_ref_659_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_659_root_address] : $int<4>
    $W[array_obj_ref_659_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_659_data_0] : $int<16>
    $W[array_obj_ref_659_wire] : $int<16>
    // image[H_574_delayed_5_0]
    $intermediate $W[R_H_574_delayed_5_0_656_resized] : $int<4>
    $intermediate $W[R_H_574_delayed_5_0_656_scaled] : $int<4>
    $intermediate $W[array_obj_ref_657_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_657_root_address] : $int<4>
    $W[array_obj_ref_657_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_657_data_0] : $int<16>
    // 					HHH := (H + 2 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 262
    // HHH
    $W[HHH_665] : $int<12>
    // 					HH_584_delayed_4_0 := HH $buffering 4// bits of buffering = 48. 
    //  file prog.linked.opt.aa, line 263
    // HH_584_delayed_4_0
    $W[HH_584_delayed_4_0_668] : $int<12>
    // 					image[HH_584_delayed_4_0] := image[HHH]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 264
    // image[HHH]
    $intermediate $W[R_HHH_671_resized] : $int<4>
    $intermediate $W[R_HHH_671_scaled] : $int<4>
    $intermediate $W[array_obj_ref_672_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_672_root_address] : $int<4>
    $W[array_obj_ref_672_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_672_data_0] : $int<16>
    $W[array_obj_ref_672_wire] : $int<16>
    // image[HH_584_delayed_4_0]
    $intermediate $W[R_HH_584_delayed_4_0_669_resized] : $int<4>
    $intermediate $W[R_HH_584_delayed_4_0_669_scaled] : $int<4>
    $intermediate $W[array_obj_ref_670_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_670_root_address] : $int<4>
    $W[array_obj_ref_670_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_670_data_0] : $int<16>
    // 					HHHH := (H + 3 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 265
    // HHHH
    $W[HHHH_678] : $int<12>
    // 					HHH_594_delayed_4_0 := HHH $buffering 4// bits of buffering = 48. 
    //  file prog.linked.opt.aa, line 266
    // HHH_594_delayed_4_0
    $W[HHH_594_delayed_4_0_681] : $int<12>
    // 					image[HHH_594_delayed_4_0] := image[HHHH]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 267
    // image[HHHH]
    $intermediate $W[R_HHHH_684_resized] : $int<4>
    $intermediate $W[R_HHHH_684_scaled] : $int<4>
    $intermediate $W[array_obj_ref_685_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_685_root_address] : $int<4>
    $W[array_obj_ref_685_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_685_data_0] : $int<16>
    $W[array_obj_ref_685_wire] : $int<16>
    // image[HHH_594_delayed_4_0]
    $intermediate $W[R_HHH_594_delayed_4_0_682_resized] : $int<4>
    $intermediate $W[R_HHH_594_delayed_4_0_682_scaled] : $int<4>
    $intermediate $W[array_obj_ref_683_final_offset] : $int<4>
    $intermediate $W[array_obj_ref_683_root_address] : $int<4>
    $W[array_obj_ref_683_word_address_0] : $pointer<memory_space_3>
    $W[array_obj_ref_683_data_0] : $int<16>
    // 					NH := (H + 4 ) $buffering 2// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 268
    // NH
    $W[NH_691] : $int<12>
    // 			$call accessMem_v (1  ((L + G) + 4 ) 0  ) (rdatar ) 
    //  file prog.linked.opt.aa, line 271
    // (L + G)
    $intermediate $W[ADD_u12_u12_700_wire] : $int<12>
    // ((L + G) + 4 )
    $intermediate $W[ADD_u12_u12_702_wire] : $int<12>
    // rdatar
    $W[rdatar_705] : $int<64>
    // 			image[15 ] := ( $slice rdatar 63 48 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 272
    // ( $slice rdatar 63 48 ) 
    $intermediate $W[slice_709_wire] : $int<16>
    // image[15 ]
    $W[array_obj_ref_707_data_0] : $int<16>
    // 			image[11 ] := ( $slice rdatar 47 32 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 273
    // ( $slice rdatar 47 32 ) 
    $intermediate $W[slice_714_wire] : $int<16>
    // image[11 ]
    $W[array_obj_ref_712_data_0] : $int<16>
    // 			image[7 ] := ( $slice rdatar 31 16 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 274
    // ( $slice rdatar 31 16 ) 
    $intermediate $W[slice_719_wire] : $int<16>
    // image[7 ]
    $W[array_obj_ref_717_data_0] : $int<16>
    // 			image[3 ] := ( $slice rdatar 15 0 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 275
    // ( $slice rdatar 15 0 ) 
    $intermediate $W[slice_724_wire] : $int<16>
    // image[3 ]
    $W[array_obj_ref_722_data_0] : $int<16>
    // 			NL := (L + 1 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 276
    // NL
    $W[NL_730] : $int<12>
    // if statement  
    //  file prog.linked.opt.aa, line 0
    // (NL < 29 )
    $intermediate $W[ULT_u12_u1_734_wire] : $int<1>
    // 		NG := (G + 32 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 281
    // NG
    $W[NG_742] : $int<12>
    // if statement  
    //  file prog.linked.opt.aa, line -149387400
    // (NG < 928 )
    $intermediate $W[ULT_u12_u1_746_wire] : $int<1>
    // datapath-instances for block %try1%fetch_kernel
    //  file prog.linked.opt.aa, line 152
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 154
    // (NT < 16 )
    <[ULT_u12_u1_441_inst] (NT_437 konst_440_wire_constant) (ULT_u12_u1_441_wire)   $flowthrough 
    $delay ULT_u12_u1_441_inst 0
    ==0? [do_while_stmt_344_branch] (ULT_u12_u1_441_wire)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 156
    // 			$phi T := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  NT $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 157
    # := [NT_437_350_buf] (NT_437) (NT_437_350_buffered)    $fullrate
    $buffering $out NT_437_350_buf NT_437_350_buffered  1
    # $phi [phi_stmt_346] (type_cast_349_wire_constant NT_437_350_buffered) ( T_346 ) $fullrate
    // $buffering  $out phi_stmt_346 T_346 2
    // 			T_310_delayed_4_0 := T $buffering 4// bits of buffering = 48. 
    //  file prog.linked.opt.aa, line 160
    # := [W_T_310_delayed_4_0_352_inst] (T_346) (T_310_delayed_4_0_354)    $fullrate
    $buffering  $out W_T_310_delayed_4_0_352_inst T_310_delayed_4_0_354 4
    // 			NNNT := (T_310_delayed_4_0 + ZJ)// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 161
    // ZJ
    $load [LOAD_ZJ_357_load_0] $from memory_space_1 (LOAD_ZJ_357_word_address_0) (LOAD_ZJ_357_data_0) 
    $buffering  $in LOAD_ZJ_357_load_0 LOAD_ZJ_357_word_address_0 2
    $buffering  $out LOAD_ZJ_357_load_0 LOAD_ZJ_357_data_0 2
    $delay LOAD_ZJ_357_load_0 5
    &/ [LOAD_ZJ_357_gather_scatter] (LOAD_ZJ_357_data_0) (LOAD_ZJ_357_wire) 
    $flowthrough 
    // (T_310_delayed_4_0 + ZJ)
    +[ADD_u12_u12_358_inst] (T_310_delayed_4_0_354 LOAD_ZJ_357_wire) (NNNT_359)    $fullrate
    $buffering  $out ADD_u12_u12_358_inst NNNT_359 1
    $delay ADD_u12_u12_358_inst 1
    // 			NTT := ($bitcast ($uint<31>) NNNT )// bits of buffering = 31. 
    //  file prog.linked.opt.aa, line 162
    // ($bitcast ($uint<31>) NNNT )
    # := [type_cast_363_inst] (NNNT_359) (NTT_364)    $fullrate
    $buffering  $out type_cast_363_inst NTT_364 1
    $delay type_cast_363_inst 1
    // 			NNT := (one && NTT)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 163
    // one
    $load [LOAD_one_366_load_0] $from memory_space_6 (LOAD_one_366_word_address_0) (LOAD_one_366_data_0) 
    $buffering  $in LOAD_one_366_load_0 LOAD_one_366_word_address_0 2
    $buffering  $out LOAD_one_366_load_0 LOAD_one_366_data_0 2
    $delay LOAD_one_366_load_0 4
    &/ [LOAD_one_366_gather_scatter] (LOAD_one_366_data_0) (LOAD_one_366_wire) 
    $flowthrough 
    // (one && NTT)
    &&[CONCAT_u1_u32_368_inst] (LOAD_one_366_wire NTT_364) (NNT_369)    $fullrate
    $buffering  $out CONCAT_u1_u32_368_inst NNT_369 1
    $delay CONCAT_u1_u32_368_inst 1
    // 			$call accMemAccessDaemon (NNT ) (rdatalk rdatahk ) 
    //  file prog.linked.opt.aa, line 164
    $call [call_stmt_373_call] $module accMemAccessDaemon(NNT_369) (rdatalk_373 rdatahk_373)   $fullrate
    $delay call_stmt_373_call 4
    $buffering  $in call_stmt_373_call NNT_369 1
    $buffering  $out call_stmt_373_call rdatalk_373 1
    $buffering  $out call_stmt_373_call rdatahk_373 1
    // 			rdatak1 := ( $slice rdatalk 31 16 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 165
    // ( $slice rdatalk 31 16 ) 
    [:] [slice_376_inst] (rdatalk_373 31 16) (rdatak1_377)  $fullrate
    $buffering  $out slice_376_inst rdatak1_377 1
    $delay slice_376_inst 1
    // 			rdatak0 := ( $slice rdatalk 15 0 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 166
    // ( $slice rdatalk 15 0 ) 
    [:] [slice_380_inst] (rdatalk_373 15 0) (rdatak0_381)  $fullrate
    $buffering  $out slice_380_inst rdatak0_381 1
    $delay slice_380_inst 1
    // 			TT := (T + 1 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 167
    // (T + 1 )
    +[ADD_u12_u12_385_inst] (T_346 konst_384_wire_constant) (TT_386)    $fullrate
    $buffering  $out ADD_u12_u12_385_inst TT_386 1
    $delay ADD_u12_u12_385_inst 1
    // 			T_341_delayed_12_0 := T $buffering 12// bits of buffering = 144. 
    //  file prog.linked.opt.aa, line 168
    # := [W_T_341_delayed_12_0_387_inst] (T_346) (T_341_delayed_12_0_389)    $fullrate
    $buffering  $out W_T_341_delayed_12_0_387_inst T_341_delayed_12_0_389 12
    // 			kernel[T_341_delayed_12_0] := rdatak0// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 169
    // kernel[T_341_delayed_12_0]
    &/ [array_obj_ref_391_index_0_resize] (T_341_delayed_12_0_389) (R_T_341_delayed_12_0_390_resized) 
    $flowthrough 
    &/ [array_obj_ref_391_index_0_rename] (R_T_341_delayed_12_0_390_resized) (R_T_341_delayed_12_0_390_scaled) 
    $flowthrough 
    &/ [array_obj_ref_391_index_offset] (R_T_341_delayed_12_0_390_scaled) (array_obj_ref_391_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_391_root_address_inst] (array_obj_ref_391_final_offset) (array_obj_ref_391_root_address) 
    $flowthrough 
    &/ [array_obj_ref_391_addr_0] (array_obj_ref_391_root_address) (array_obj_ref_391_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_391_store_0] $to memory_space_4 (array_obj_ref_391_word_address_0 array_obj_ref_391_data_0) 
    $buffering  $in array_obj_ref_391_store_0 array_obj_ref_391_word_address_0 2
    $buffering  $in array_obj_ref_391_store_0 array_obj_ref_391_data_0 2
    $delay array_obj_ref_391_store_0 4
    &/ [array_obj_ref_391_gather_scatter] (rdatak0_381) (array_obj_ref_391_data_0) 
    $flowthrough 
    // 			TT_345_delayed_11_0 := TT $buffering 11// bits of buffering = 132. 
    //  file prog.linked.opt.aa, line 170
    # := [W_TT_345_delayed_11_0_394_inst] (TT_386) (TT_345_delayed_11_0_396)    $fullrate
    $buffering  $out W_TT_345_delayed_11_0_394_inst TT_345_delayed_11_0_396 11
    // 			kernel[TT_345_delayed_11_0] := rdatak1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 171
    // kernel[TT_345_delayed_11_0]
    &/ [array_obj_ref_398_index_0_resize] (TT_345_delayed_11_0_396) (R_TT_345_delayed_11_0_397_resized) 
    $flowthrough 
    &/ [array_obj_ref_398_index_0_rename] (R_TT_345_delayed_11_0_397_resized) (R_TT_345_delayed_11_0_397_scaled) 
    $flowthrough 
    &/ [array_obj_ref_398_index_offset] (R_TT_345_delayed_11_0_397_scaled) (array_obj_ref_398_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_398_root_address_inst] (array_obj_ref_398_final_offset) (array_obj_ref_398_root_address) 
    $flowthrough 
    &/ [array_obj_ref_398_addr_0] (array_obj_ref_398_root_address) (array_obj_ref_398_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_398_store_0] $to memory_space_4 (array_obj_ref_398_word_address_0 array_obj_ref_398_data_0) 
    $buffering  $in array_obj_ref_398_store_0 array_obj_ref_398_word_address_0 2
    $buffering  $in array_obj_ref_398_store_0 array_obj_ref_398_data_0 2
    $delay array_obj_ref_398_store_0 4
    &/ [array_obj_ref_398_gather_scatter] (rdatak1_377) (array_obj_ref_398_data_0) 
    $flowthrough 
    // 			rdatak3 := ( $slice rdatahk 31 16 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 172
    // ( $slice rdatahk 31 16 ) 
    [:] [slice_403_inst] (rdatahk_373 31 16) (rdatak3_404)  $fullrate
    $buffering  $out slice_403_inst rdatak3_404 1
    $delay slice_403_inst 1
    // 			rdatak2 := ( $slice rdatahk 15 0 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 173
    // ( $slice rdatahk 15 0 ) 
    [:] [slice_407_inst] (rdatahk_373 15 0) (rdatak2_408)  $fullrate
    $buffering  $out slice_407_inst rdatak2_408 1
    $delay slice_407_inst 1
    // 			TTT := (T + 2 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 174
    // (T + 2 )
    +[ADD_u12_u12_412_inst] (T_346 konst_411_wire_constant) (TTT_413)    $fullrate
    $buffering  $out ADD_u12_u12_412_inst TTT_413 1
    $delay ADD_u12_u12_412_inst 1
    // 			TTTT := (T + 3 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 175
    // (T + 3 )
    +[ADD_u12_u12_417_inst] (T_346 konst_416_wire_constant) (TTTT_418)    $fullrate
    $buffering  $out ADD_u12_u12_417_inst TTTT_418 1
    $delay ADD_u12_u12_417_inst 1
    // 			TTT_367_delayed_11_0 := TTT $buffering 11// bits of buffering = 132. 
    //  file prog.linked.opt.aa, line 176
    # := [W_TTT_367_delayed_11_0_419_inst] (TTT_413) (TTT_367_delayed_11_0_421)    $fullrate
    $buffering  $out W_TTT_367_delayed_11_0_419_inst TTT_367_delayed_11_0_421 11
    // 			kernel[TTT_367_delayed_11_0] := rdatak2// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 177
    // kernel[TTT_367_delayed_11_0]
    &/ [array_obj_ref_423_index_0_resize] (TTT_367_delayed_11_0_421) (R_TTT_367_delayed_11_0_422_resized) 
    $flowthrough 
    &/ [array_obj_ref_423_index_0_rename] (R_TTT_367_delayed_11_0_422_resized) (R_TTT_367_delayed_11_0_422_scaled) 
    $flowthrough 
    &/ [array_obj_ref_423_index_offset] (R_TTT_367_delayed_11_0_422_scaled) (array_obj_ref_423_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_423_root_address_inst] (array_obj_ref_423_final_offset) (array_obj_ref_423_root_address) 
    $flowthrough 
    &/ [array_obj_ref_423_addr_0] (array_obj_ref_423_root_address) (array_obj_ref_423_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_423_store_0] $to memory_space_4 (array_obj_ref_423_word_address_0 array_obj_ref_423_data_0) 
    $buffering  $in array_obj_ref_423_store_0 array_obj_ref_423_word_address_0 2
    $buffering  $in array_obj_ref_423_store_0 array_obj_ref_423_data_0 2
    $delay array_obj_ref_423_store_0 4
    &/ [array_obj_ref_423_gather_scatter] (rdatak2_408) (array_obj_ref_423_data_0) 
    $flowthrough 
    // 			TTTT_371_delayed_11_0 := TTTT $buffering 11// bits of buffering = 132. 
    //  file prog.linked.opt.aa, line 178
    # := [W_TTTT_371_delayed_11_0_426_inst] (TTTT_418) (TTTT_371_delayed_11_0_428)    $fullrate
    $buffering  $out W_TTTT_371_delayed_11_0_426_inst TTTT_371_delayed_11_0_428 11
    // 			kernel[TTTT_371_delayed_11_0] := rdatak3// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 179
    // kernel[TTTT_371_delayed_11_0]
    &/ [array_obj_ref_430_index_0_resize] (TTTT_371_delayed_11_0_428) (R_TTTT_371_delayed_11_0_429_resized) 
    $flowthrough 
    &/ [array_obj_ref_430_index_0_rename] (R_TTTT_371_delayed_11_0_429_resized) (R_TTTT_371_delayed_11_0_429_scaled) 
    $flowthrough 
    &/ [array_obj_ref_430_index_offset] (R_TTTT_371_delayed_11_0_429_scaled) (array_obj_ref_430_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_430_root_address_inst] (array_obj_ref_430_final_offset) (array_obj_ref_430_root_address) 
    $flowthrough 
    &/ [array_obj_ref_430_addr_0] (array_obj_ref_430_root_address) (array_obj_ref_430_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_430_store_0] $to memory_space_4 (array_obj_ref_430_word_address_0 array_obj_ref_430_data_0) 
    $buffering  $in array_obj_ref_430_store_0 array_obj_ref_430_word_address_0 2
    $buffering  $in array_obj_ref_430_store_0 array_obj_ref_430_data_0 2
    $delay array_obj_ref_430_store_0 4
    &/ [array_obj_ref_430_gather_scatter] (rdatak3_404) (array_obj_ref_430_data_0) 
    $flowthrough 
    // 			NT := (T + 4 ) $buffering 2// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 180
    // (T + 4 )
    +[ADD_u12_u12_436_inst] (T_346 konst_435_wire_constant) (NT_437)    $fullrate
    $buffering  $out ADD_u12_u12_436_inst NT_437 2
    $delay ADD_u12_u12_436_inst 1
    // datapath-instances for block %try1%entire1
    //  file prog.linked.opt.aa, line 183
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 185
    // 			$phi G := 			  ($bitcast ($uint<12>) 0  ) $on   $entry 			  NG $on   loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 186
    # := [NG_742_449_buf] (NG_742) (NG_742_449_buffered)   
    $phi [phi_stmt_445] (type_cast_448_wire_constant NG_742_449_buffered) ( G_445 ) 
    // 		PJ := 0 // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 189
    // PJ
    $store [STORE_PJ_451_store_0] $to memory_space_0 (STORE_PJ_451_word_address_0 STORE_PJ_451_data_0) 
    $delay STORE_PJ_451_store_0 4
    &/ [STORE_PJ_451_gather_scatter] (konst_452_wire_constant) (STORE_PJ_451_data_0) 
    $flowthrough 
    // datapath-instances for block %try1%entire1%fetch_mem1
    //  file prog.linked.opt.aa, line 190
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 192
    // (NJ < 128 )
    <[ULT_u12_u1_563_inst] (NJ_554 konst_562_wire_constant) (ULT_u12_u1_563_wire)   $flowthrough 
    $delay ULT_u12_u1_563_inst 0
    ==0? [do_while_stmt_455_branch] (ULT_u12_u1_563_wire)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 194
    // 				$phi J := 				  ($bitcast ($uint<12>) 0  ) $on   $entry 				  NJ $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 195
    # := [NJ_554_461_buf] (NJ_554) (NJ_554_461_buffered)    $fullrate
    $buffering $out NJ_554_461_buf NJ_554_461_buffered  1
    # $phi [phi_stmt_457] (type_cast_460_wire_constant NJ_554_461_buffered) ( J_457 ) $fullrate
    // $buffering  $out phi_stmt_457 J_457 2
    // 				NJJ := ($bitcast ($uint<31>) J )// bits of buffering = 31. 
    //  file prog.linked.opt.aa, line 198
    // ($bitcast ($uint<31>) J )
    # := [type_cast_465_inst] (J_457) (NJJ_466)    $fullrate
    $buffering  $out type_cast_465_inst NJJ_466 1
    $delay type_cast_465_inst 1
    // 				NGG := ($bitcast ($uint<32>) G )// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 199
    // ($bitcast ($uint<32>) G )
    # := [type_cast_469_inst] (G_445) (NGG_470)    $fullrate
    $buffering  $out type_cast_469_inst NGG_470 1
    $delay type_cast_469_inst 1
    // 				NJJ_415_delayed_2_0 := NJJ $buffering 2// bits of buffering = 62. 
    //  file prog.linked.opt.aa, line 200
    # := [W_NJJ_415_delayed_2_0_471_inst] (NJJ_466) (NJJ_415_delayed_2_0_473)    $fullrate
    $buffering  $out W_NJJ_415_delayed_2_0_471_inst NJJ_415_delayed_2_0_473 2
    // 				NNG := (one && NJJ_415_delayed_2_0)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 201
    // one
    $load [LOAD_one_475_load_0] $from memory_space_6 (LOAD_one_475_word_address_0) (LOAD_one_475_data_0) 
    $buffering  $in LOAD_one_475_load_0 LOAD_one_475_word_address_0 2
    $buffering  $out LOAD_one_475_load_0 LOAD_one_475_data_0 2
    $delay LOAD_one_475_load_0 4
    &/ [LOAD_one_475_gather_scatter] (LOAD_one_475_data_0) (LOAD_one_475_wire) 
    $flowthrough 
    // (one && NJJ_415_delayed_2_0)
    &&[CONCAT_u1_u32_477_inst] (LOAD_one_475_wire NJJ_415_delayed_2_0_473) (NNG_478)    $fullrate
    $buffering  $out CONCAT_u1_u32_477_inst NNG_478 1
    $delay CONCAT_u1_u32_477_inst 1
    // 				NGG_420_delayed_4_0 := NGG $buffering 4// bits of buffering = 128. 
    //  file prog.linked.opt.aa, line 202
    # := [W_NGG_420_delayed_4_0_479_inst] (NGG_470) (NGG_420_delayed_4_0_481)    $fullrate
    $buffering  $out W_NGG_420_delayed_4_0_479_inst NGG_420_delayed_4_0_481 4
    // 				NNJ := (NNG + NGG_420_delayed_4_0)// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 203
    // (NNG + NGG_420_delayed_4_0)
    +[ADD_u32_u32_485_inst] (NNG_478 NGG_420_delayed_4_0_481) (NNJ_486)    $fullrate
    $buffering  $out ADD_u32_u32_485_inst NNJ_486 1
    $delay ADD_u32_u32_485_inst 1
    // 				$call accMemAccessDaemon (NNJ ) (rdatal rdatah ) 
    //  file prog.linked.opt.aa, line 204
    $call [call_stmt_490_call] $module accMemAccessDaemon(NNJ_486) (rdatal_490 rdatah_490)   $fullrate
    $delay call_stmt_490_call 4
    $buffering  $in call_stmt_490_call NNJ_486 1
    $buffering  $out call_stmt_490_call rdatal_490 1
    $buffering  $out call_stmt_490_call rdatah_490 1
    // 				rdatai1 := ( $slice rdatal 31 16 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 205
    // ( $slice rdatal 31 16 ) 
    [:] [slice_493_inst] (rdatal_490 31 16) (rdatai1_494)  $fullrate
    $buffering  $out slice_493_inst rdatai1_494 1
    $delay slice_493_inst 1
    // 				rdatai0 := ( $slice rdatal 15 0 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 206
    // ( $slice rdatal 15 0 ) 
    [:] [slice_497_inst] (rdatal_490 15 0) (rdatai0_498)  $fullrate
    $buffering  $out slice_497_inst rdatai0_498 1
    $delay slice_497_inst 1
    // 				PPJ := (PJ + 1 )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 207
    // PJ
    $load [LOAD_PJ_500_load_0] $from memory_space_0 (LOAD_PJ_500_word_address_0) (LOAD_PJ_500_data_0) 
    $buffering  $in LOAD_PJ_500_load_0 LOAD_PJ_500_word_address_0 2
    $buffering  $out LOAD_PJ_500_load_0 LOAD_PJ_500_data_0 2
    $delay LOAD_PJ_500_load_0 4
    &/ [LOAD_PJ_500_gather_scatter] (LOAD_PJ_500_data_0) (LOAD_PJ_500_wire) 
    $flowthrough 
    // (PJ + 1 )
    +[ADD_u16_u16_502_inst] (LOAD_PJ_500_wire konst_501_wire_constant) (PPJ_503)    $fullrate
    $buffering  $out ADD_u16_u16_502_inst PPJ_503 1
    $delay ADD_u16_u16_502_inst 1
    // 				PJ_440_delayed_7_0 := PJ $buffering 7// bits of buffering = 112. 
    //  file prog.linked.opt.aa, line 208
    // PJ
    $load [LOAD_PJ_505_load_0] $from memory_space_0 (LOAD_PJ_505_word_address_0) (LOAD_PJ_505_data_0) 
    $buffering  $in LOAD_PJ_505_load_0 LOAD_PJ_505_word_address_0 2
    $buffering  $out LOAD_PJ_505_load_0 LOAD_PJ_505_data_0 2
    $delay LOAD_PJ_505_load_0 4
    &/ [LOAD_PJ_505_gather_scatter] (LOAD_PJ_505_data_0) (PJ_440_delayed_7_0_506) 
    $flowthrough 
    // 				image[PJ_440_delayed_7_0] := rdatai0// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 209
    // image[PJ_440_delayed_7_0]
    &/ [array_obj_ref_508_index_0_resize] (PJ_440_delayed_7_0_506) (R_PJ_440_delayed_7_0_507_resized) 
    $flowthrough 
    &/ [array_obj_ref_508_index_0_rename] (R_PJ_440_delayed_7_0_507_resized) (R_PJ_440_delayed_7_0_507_scaled) 
    $flowthrough 
    &/ [array_obj_ref_508_index_offset] (R_PJ_440_delayed_7_0_507_scaled) (array_obj_ref_508_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_508_root_address_inst] (array_obj_ref_508_final_offset) (array_obj_ref_508_root_address) 
    $flowthrough 
    &/ [array_obj_ref_508_addr_0] (array_obj_ref_508_root_address) (array_obj_ref_508_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_508_store_0] $to memory_space_3 (array_obj_ref_508_word_address_0 array_obj_ref_508_data_0) 
    $buffering  $in array_obj_ref_508_store_0 array_obj_ref_508_word_address_0 2
    $buffering  $in array_obj_ref_508_store_0 array_obj_ref_508_data_0 2
    $delay array_obj_ref_508_store_0 4
    &/ [array_obj_ref_508_gather_scatter] (rdatai0_498) (array_obj_ref_508_data_0) 
    $flowthrough 
    // 				PPJ_444_delayed_6_0 := PPJ $buffering 6// bits of buffering = 96. 
    //  file prog.linked.opt.aa, line 210
    # := [W_PPJ_444_delayed_6_0_511_inst] (PPJ_503) (PPJ_444_delayed_6_0_513)    $fullrate
    $buffering  $out W_PPJ_444_delayed_6_0_511_inst PPJ_444_delayed_6_0_513 6
    // 				image[PPJ_444_delayed_6_0] := rdatai1// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 211
    // image[PPJ_444_delayed_6_0]
    &/ [array_obj_ref_515_index_0_resize] (PPJ_444_delayed_6_0_513) (R_PPJ_444_delayed_6_0_514_resized) 
    $flowthrough 
    &/ [array_obj_ref_515_index_0_rename] (R_PPJ_444_delayed_6_0_514_resized) (R_PPJ_444_delayed_6_0_514_scaled) 
    $flowthrough 
    &/ [array_obj_ref_515_index_offset] (R_PPJ_444_delayed_6_0_514_scaled) (array_obj_ref_515_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_515_root_address_inst] (array_obj_ref_515_final_offset) (array_obj_ref_515_root_address) 
    $flowthrough 
    &/ [array_obj_ref_515_addr_0] (array_obj_ref_515_root_address) (array_obj_ref_515_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_515_store_0] $to memory_space_3 (array_obj_ref_515_word_address_0 array_obj_ref_515_data_0) 
    $buffering  $in array_obj_ref_515_store_0 array_obj_ref_515_word_address_0 2
    $buffering  $in array_obj_ref_515_store_0 array_obj_ref_515_data_0 2
    $delay array_obj_ref_515_store_0 4
    &/ [array_obj_ref_515_gather_scatter] (rdatai1_494) (array_obj_ref_515_data_0) 
    $flowthrough 
    // 				rdatai3 := ( $slice rdatah 31 16 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 212
    // ( $slice rdatah 31 16 ) 
    [:] [slice_520_inst] (rdatah_490 31 16) (rdatai3_521)  $fullrate
    $buffering  $out slice_520_inst rdatai3_521 1
    $delay slice_520_inst 1
    // 				rdatai2 := ( $slice rdatah 15 0 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 213
    // ( $slice rdatah 15 0 ) 
    [:] [slice_524_inst] (rdatah_490 15 0) (rdatai2_525)  $fullrate
    $buffering  $out slice_524_inst rdatai2_525 1
    $delay slice_524_inst 1
    // 				PPPJ := (PJ + 2 )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 214
    // PJ
    $load [LOAD_PJ_527_load_0] $from memory_space_0 (LOAD_PJ_527_word_address_0) (LOAD_PJ_527_data_0) 
    $buffering  $in LOAD_PJ_527_load_0 LOAD_PJ_527_word_address_0 2
    $buffering  $out LOAD_PJ_527_load_0 LOAD_PJ_527_data_0 2
    $delay LOAD_PJ_527_load_0 4
    &/ [LOAD_PJ_527_gather_scatter] (LOAD_PJ_527_data_0) (LOAD_PJ_527_wire) 
    $flowthrough 
    // (PJ + 2 )
    +[ADD_u16_u16_529_inst] (LOAD_PJ_527_wire konst_528_wire_constant) (PPPJ_530)    $fullrate
    $buffering  $out ADD_u16_u16_529_inst PPPJ_530 1
    $delay ADD_u16_u16_529_inst 1
    // 				PPPPJ := (PJ + 3 )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 215
    // PJ
    $load [LOAD_PJ_532_load_0] $from memory_space_0 (LOAD_PJ_532_word_address_0) (LOAD_PJ_532_data_0) 
    $buffering  $in LOAD_PJ_532_load_0 LOAD_PJ_532_word_address_0 2
    $buffering  $out LOAD_PJ_532_load_0 LOAD_PJ_532_data_0 2
    $delay LOAD_PJ_532_load_0 4
    &/ [LOAD_PJ_532_gather_scatter] (LOAD_PJ_532_data_0) (LOAD_PJ_532_wire) 
    $flowthrough 
    // (PJ + 3 )
    +[ADD_u16_u16_534_inst] (LOAD_PJ_532_wire konst_533_wire_constant) (PPPPJ_535)    $fullrate
    $buffering  $out ADD_u16_u16_534_inst PPPPJ_535 1
    $delay ADD_u16_u16_534_inst 1
    // 				PPPJ_466_delayed_6_0 := PPPJ $buffering 6// bits of buffering = 96. 
    //  file prog.linked.opt.aa, line 216
    # := [W_PPPJ_466_delayed_6_0_536_inst] (PPPJ_530) (PPPJ_466_delayed_6_0_538)    $fullrate
    $buffering  $out W_PPPJ_466_delayed_6_0_536_inst PPPJ_466_delayed_6_0_538 6
    // 				image[PPPJ_466_delayed_6_0] := rdatai2// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 217
    // image[PPPJ_466_delayed_6_0]
    &/ [array_obj_ref_540_index_0_resize] (PPPJ_466_delayed_6_0_538) (R_PPPJ_466_delayed_6_0_539_resized) 
    $flowthrough 
    &/ [array_obj_ref_540_index_0_rename] (R_PPPJ_466_delayed_6_0_539_resized) (R_PPPJ_466_delayed_6_0_539_scaled) 
    $flowthrough 
    &/ [array_obj_ref_540_index_offset] (R_PPPJ_466_delayed_6_0_539_scaled) (array_obj_ref_540_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_540_root_address_inst] (array_obj_ref_540_final_offset) (array_obj_ref_540_root_address) 
    $flowthrough 
    &/ [array_obj_ref_540_addr_0] (array_obj_ref_540_root_address) (array_obj_ref_540_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_540_store_0] $to memory_space_3 (array_obj_ref_540_word_address_0 array_obj_ref_540_data_0) 
    $buffering  $in array_obj_ref_540_store_0 array_obj_ref_540_word_address_0 2
    $buffering  $in array_obj_ref_540_store_0 array_obj_ref_540_data_0 2
    $delay array_obj_ref_540_store_0 4
    &/ [array_obj_ref_540_gather_scatter] (rdatai2_525) (array_obj_ref_540_data_0) 
    $flowthrough 
    // 				PPPPJ_470_delayed_6_0 := PPPPJ $buffering 6// bits of buffering = 96. 
    //  file prog.linked.opt.aa, line 218
    # := [W_PPPPJ_470_delayed_6_0_543_inst] (PPPPJ_535) (PPPPJ_470_delayed_6_0_545)    $fullrate
    $buffering  $out W_PPPPJ_470_delayed_6_0_543_inst PPPPJ_470_delayed_6_0_545 6
    // 				image[PPPPJ_470_delayed_6_0] := rdatai3// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 219
    // image[PPPPJ_470_delayed_6_0]
    &/ [array_obj_ref_547_index_0_resize] (PPPPJ_470_delayed_6_0_545) (R_PPPPJ_470_delayed_6_0_546_resized) 
    $flowthrough 
    &/ [array_obj_ref_547_index_0_rename] (R_PPPPJ_470_delayed_6_0_546_resized) (R_PPPPJ_470_delayed_6_0_546_scaled) 
    $flowthrough 
    &/ [array_obj_ref_547_index_offset] (R_PPPPJ_470_delayed_6_0_546_scaled) (array_obj_ref_547_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_547_root_address_inst] (array_obj_ref_547_final_offset) (array_obj_ref_547_root_address) 
    $flowthrough 
    &/ [array_obj_ref_547_addr_0] (array_obj_ref_547_root_address) (array_obj_ref_547_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_547_store_0] $to memory_space_3 (array_obj_ref_547_word_address_0 array_obj_ref_547_data_0) 
    $buffering  $in array_obj_ref_547_store_0 array_obj_ref_547_word_address_0 2
    $buffering  $in array_obj_ref_547_store_0 array_obj_ref_547_data_0 2
    $delay array_obj_ref_547_store_0 4
    &/ [array_obj_ref_547_gather_scatter] (rdatai3_521) (array_obj_ref_547_data_0) 
    $flowthrough 
    // 				NJ := (J + 32 ) $buffering 2// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 220
    // (J + 32 )
    +[ADD_u12_u12_553_inst] (J_457 konst_552_wire_constant) (NJ_554)    $fullrate
    $buffering  $out ADD_u12_u12_553_inst NJ_554 2
    $delay ADD_u12_u12_553_inst 1
    // 				PJ := (PJ + 4 )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 221
    // PJ
    $load [LOAD_PJ_556_load_0] $from memory_space_0 (LOAD_PJ_556_word_address_0) (LOAD_PJ_556_data_0) 
    $buffering  $in LOAD_PJ_556_load_0 LOAD_PJ_556_word_address_0 2
    $buffering  $out LOAD_PJ_556_load_0 LOAD_PJ_556_data_0 2
    $delay LOAD_PJ_556_load_0 4
    &/ [LOAD_PJ_556_gather_scatter] (LOAD_PJ_556_data_0) (LOAD_PJ_556_wire) 
    $flowthrough 
    // (PJ + 4 )
    +[ADD_u16_u16_558_inst] (LOAD_PJ_556_wire konst_557_wire_constant) (ADD_u16_u16_558_wire)    $fullrate
    $buffering  $out ADD_u16_u16_558_inst ADD_u16_u16_558_wire 1
    $delay ADD_u16_u16_558_inst 1
    // PJ
    $store [STORE_PJ_555_store_0] $to memory_space_0 (STORE_PJ_555_word_address_0 STORE_PJ_555_data_0) 
    $buffering  $in STORE_PJ_555_store_0 STORE_PJ_555_word_address_0 2
    $buffering  $in STORE_PJ_555_store_0 STORE_PJ_555_data_0 2
    $delay STORE_PJ_555_store_0 4
    &/ [STORE_PJ_555_gather_scatter] (ADD_u16_u16_558_wire) (STORE_PJ_555_data_0) 
    $flowthrough 
    // datapath-instances for block %try1%entire1%entire
    //  file prog.linked.opt.aa, line 224
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 226
    // 				$phi L := 				  ($bitcast ($uint<12>) 0  ) $on   $entry 				  NL $on   loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 227
    # := [NL_730_571_buf] (NL_730) (NL_730_571_buffered)   
    $phi [phi_stmt_567] (type_cast_570_wire_constant NL_730_571_buffered) ( L_567 ) 
    // 			total := 0 // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 230
    // total
    $store [STORE_total_573_store_0] $to memory_space_7 (STORE_total_573_word_address_0 STORE_total_573_data_0) 
    $delay STORE_total_573_store_0 4
    &/ [STORE_total_573_gather_scatter] (konst_574_wire_constant) (STORE_total_573_data_0) 
    $flowthrough 
    // datapath-instances for block %try1%entire1%entire%dot
    //  file prog.linked.opt.aa, line 231
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 233
    // (NK < 16 )
    <[ULT_u32_u1_616_inst] (NK_612 konst_615_wire_constant) (ULT_u32_u1_616_wire)   $flowthrough 
    $delay ULT_u32_u1_616_inst 0
    ==0? [do_while_stmt_577_branch] (ULT_u32_u1_616_wire)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 235
    // 					$phi K := 					  ($bitcast ($uint<32>) 0  ) $on   $entry 					  NK $on   $loopback 
    // type of target is $uint<32>
    //  file prog.linked.opt.aa, line 236
    # := [NK_612_583_buf] (NK_612) (NK_612_583_buffered)    $fullrate
    $buffering $out NK_612_583_buf NK_612_583_buffered  1
    # $phi [phi_stmt_579] (type_cast_582_wire_constant NK_612_583_buffered) ( K_579 ) $fullrate
    // $buffering  $out phi_stmt_579 K_579 2
    // 					imag1 := image[K]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 239
    // image[K]
    &/ [array_obj_ref_587_index_0_resize] (K_579) (R_K_586_resized) 
    $flowthrough 
    &/ [array_obj_ref_587_index_0_rename] (R_K_586_resized) (R_K_586_scaled) 
    $flowthrough 
    &/ [array_obj_ref_587_index_offset] (R_K_586_scaled) (array_obj_ref_587_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_587_root_address_inst] (array_obj_ref_587_final_offset) (array_obj_ref_587_root_address) 
    $flowthrough 
    &/ [array_obj_ref_587_addr_0] (array_obj_ref_587_root_address) (array_obj_ref_587_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_587_load_0] $from memory_space_3 (array_obj_ref_587_word_address_0) (array_obj_ref_587_data_0) 
    $buffering  $in array_obj_ref_587_load_0 array_obj_ref_587_word_address_0 2
    $buffering  $out array_obj_ref_587_load_0 array_obj_ref_587_data_0 2
    $delay array_obj_ref_587_load_0 4
    &/ [array_obj_ref_587_gather_scatter] (array_obj_ref_587_data_0) (imag1_588) 
    $flowthrough 
    // 					ker1 := kernel[K]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 240
    // kernel[K]
    &/ [array_obj_ref_591_index_0_resize] (K_579) (R_K_590_resized) 
    $flowthrough 
    &/ [array_obj_ref_591_index_0_rename] (R_K_590_resized) (R_K_590_scaled) 
    $flowthrough 
    &/ [array_obj_ref_591_index_offset] (R_K_590_scaled) (array_obj_ref_591_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_591_root_address_inst] (array_obj_ref_591_final_offset) (array_obj_ref_591_root_address) 
    $flowthrough 
    &/ [array_obj_ref_591_addr_0] (array_obj_ref_591_root_address) (array_obj_ref_591_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_591_load_0] $from memory_space_4 (array_obj_ref_591_word_address_0) (array_obj_ref_591_data_0) 
    $buffering  $in array_obj_ref_591_load_0 array_obj_ref_591_word_address_0 2
    $buffering  $out array_obj_ref_591_load_0 array_obj_ref_591_data_0 2
    $delay array_obj_ref_591_load_0 4
    &/ [array_obj_ref_591_gather_scatter] (array_obj_ref_591_data_0) (ker1_592) 
    $flowthrough 
    // 					K_517_delayed_5_0 := K $buffering 5// bits of buffering = 160. 
    //  file prog.linked.opt.aa, line 241
    # := [W_K_517_delayed_5_0_593_inst] (K_579) (K_517_delayed_5_0_595)    $fullrate
    $buffering  $out W_K_517_delayed_5_0_593_inst K_517_delayed_5_0_595 5
    // 					a[K_517_delayed_5_0] := (imag1 * ker1)// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 242
    // (imag1 * ker1)
    *[MUL_u16_u16_600_inst] (imag1_588 ker1_592) (MUL_u16_u16_600_wire)    $fullrate
    $buffering  $out MUL_u16_u16_600_inst MUL_u16_u16_600_wire 1
    $delay MUL_u16_u16_600_inst 1
    // a[K_517_delayed_5_0]
    &/ [array_obj_ref_597_index_0_resize] (K_517_delayed_5_0_595) (R_K_517_delayed_5_0_596_resized) 
    $flowthrough 
    &/ [array_obj_ref_597_index_0_rename] (R_K_517_delayed_5_0_596_resized) (R_K_517_delayed_5_0_596_scaled) 
    $flowthrough 
    &/ [array_obj_ref_597_index_offset] (R_K_517_delayed_5_0_596_scaled) (array_obj_ref_597_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_597_root_address_inst] (array_obj_ref_597_final_offset) (array_obj_ref_597_root_address) 
    $flowthrough 
    &/ [array_obj_ref_597_addr_0] (array_obj_ref_597_root_address) (array_obj_ref_597_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_597_store_0] $to memory_space_2 (array_obj_ref_597_word_address_0 array_obj_ref_597_data_0) 
    $buffering  $in array_obj_ref_597_store_0 array_obj_ref_597_word_address_0 2
    $buffering  $in array_obj_ref_597_store_0 array_obj_ref_597_data_0 2
    $delay array_obj_ref_597_store_0 4
    &/ [array_obj_ref_597_gather_scatter] (MUL_u16_u16_600_wire) (array_obj_ref_597_data_0) 
    $flowthrough 
    // 					total := (total + a[K])// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 243
    // total
    $load [LOAD_total_603_load_0] $from memory_space_7 (LOAD_total_603_word_address_0) (LOAD_total_603_data_0) 
    $buffering  $in LOAD_total_603_load_0 LOAD_total_603_word_address_0 2
    $buffering  $out LOAD_total_603_load_0 LOAD_total_603_data_0 2
    $delay LOAD_total_603_load_0 4
    &/ [LOAD_total_603_gather_scatter] (LOAD_total_603_data_0) (LOAD_total_603_wire) 
    $flowthrough 
    // a[K]
    &/ [array_obj_ref_605_index_0_resize] (K_579) (R_K_604_resized) 
    $flowthrough 
    &/ [array_obj_ref_605_index_0_rename] (R_K_604_resized) (R_K_604_scaled) 
    $flowthrough 
    &/ [array_obj_ref_605_index_offset] (R_K_604_scaled) (array_obj_ref_605_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_605_root_address_inst] (array_obj_ref_605_final_offset) (array_obj_ref_605_root_address) 
    $flowthrough 
    &/ [array_obj_ref_605_addr_0] (array_obj_ref_605_root_address) (array_obj_ref_605_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_605_load_0] $from memory_space_2 (array_obj_ref_605_word_address_0) (array_obj_ref_605_data_0) 
    $buffering  $in array_obj_ref_605_load_0 array_obj_ref_605_word_address_0 2
    $buffering  $out array_obj_ref_605_load_0 array_obj_ref_605_data_0 2
    $delay array_obj_ref_605_load_0 4
    &/ [array_obj_ref_605_gather_scatter] (array_obj_ref_605_data_0) (array_obj_ref_605_wire) 
    $flowthrough 
    // (total + a[K])
    +[ADD_u16_u16_606_inst] (LOAD_total_603_wire array_obj_ref_605_wire) (ADD_u16_u16_606_wire)    $fullrate
    $buffering  $out ADD_u16_u16_606_inst ADD_u16_u16_606_wire 1
    $delay ADD_u16_u16_606_inst 1
    // total
    $store [STORE_total_602_store_0] $to memory_space_7 (STORE_total_602_word_address_0 STORE_total_602_data_0) 
    $buffering  $in STORE_total_602_store_0 STORE_total_602_word_address_0 2
    $buffering  $in STORE_total_602_store_0 STORE_total_602_data_0 2
    $delay STORE_total_602_store_0 4
    &/ [STORE_total_602_gather_scatter] (ADD_u16_u16_606_wire) (STORE_total_602_data_0) 
    $flowthrough 
    // 					NK := (K + 1 ) $buffering 2// bits of buffering = 64. 
    //  file prog.linked.opt.aa, line 244
    // (K + 1 )
    +[ADD_u32_u32_611_inst] (K_579 konst_610_wire_constant) (NK_612)    $fullrate
    $buffering  $out ADD_u32_u32_611_inst NK_612 2
    $delay ADD_u32_u32_611_inst 1
    // 			$call accessMem (0  (L + G) total ) (rdata ) 
    //  file prog.linked.opt.aa, line 247
    // (L + G)
    +[ADD_u12_u12_621_inst] (L_567 G_445) (ADD_u12_u12_621_wire)   
    $buffering  $out ADD_u12_u12_621_inst ADD_u12_u12_621_wire 1
    $delay ADD_u12_u12_621_inst 1
    // total
    $load [LOAD_total_622_load_0] $from memory_space_7 (LOAD_total_622_word_address_0) (LOAD_total_622_data_0) 
    $delay LOAD_total_622_load_0 4
    &/ [LOAD_total_622_gather_scatter] (LOAD_total_622_data_0) (LOAD_total_622_wire) 
    $flowthrough 
    $call [call_stmt_624_call] $module accessMem(konst_618_wire_constant ADD_u12_u12_621_wire LOAD_total_622_wire) (rdata_624)  
    $delay call_stmt_624_call 10
    $buffering  $in call_stmt_624_call konst_618_wire_constant 1
    $buffering  $in call_stmt_624_call ADD_u12_u12_621_wire 1
    $buffering  $in call_stmt_624_call LOAD_total_622_wire 1
    $buffering  $out call_stmt_624_call rdata_624 1
    // 			f := (zer && (L + G))// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 248
    // zer
    $load [LOAD_zer_626_load_0] $from memory_space_8 (LOAD_zer_626_word_address_0) (LOAD_zer_626_data_0) 
    $delay LOAD_zer_626_load_0 4
    &/ [LOAD_zer_626_gather_scatter] (LOAD_zer_626_data_0) (LOAD_zer_626_wire) 
    $flowthrough 
    // (L + G)
    +[ADD_u12_u12_629_inst] (L_567 G_445) (ADD_u12_u12_629_wire)   $flowthrough 
    $delay ADD_u12_u12_629_inst 0
    // (zer && (L + G))
    &&[CONCAT_u4_u16_630_inst] (LOAD_zer_626_wire ADD_u12_u12_629_wire) (f_631)   
    $buffering  $out CONCAT_u4_u16_630_inst f_631 1
    $delay CONCAT_u4_u16_630_inst 1
    // 			acc_mem_add := f// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 249
    // acc_mem_add
    $ioport $out [WPIPE_acc_mem_add_632_inst]  (f_631) (acc_mem_add) 
    // 			acc_mem := mem_array[f]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 250
    // mem_array[f]
    &/ [array_obj_ref_637_index_0_resize] (f_631) (R_f_636_resized) 
    $flowthrough 
    &/ [array_obj_ref_637_index_0_rename] (R_f_636_resized) (R_f_636_scaled) 
    $flowthrough 
    &/ [array_obj_ref_637_index_offset] (R_f_636_scaled) (array_obj_ref_637_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_637_root_address_inst] (array_obj_ref_637_final_offset) (array_obj_ref_637_root_address) 
    $flowthrough 
    &/ [array_obj_ref_637_addr_0] (array_obj_ref_637_root_address) (array_obj_ref_637_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_637_load_0] $from memory_space_5 (array_obj_ref_637_word_address_0) (array_obj_ref_637_data_0) 
    $delay array_obj_ref_637_load_0 5
    &/ [array_obj_ref_637_gather_scatter] (array_obj_ref_637_data_0) (array_obj_ref_637_wire) 
    $flowthrough 
    // acc_mem
    $ioport $out [WPIPE_acc_mem_635_inst]  (array_obj_ref_637_wire) (acc_mem) 
    // datapath-instances for block %try1%entire1%entire%rearrange_image
    //  file prog.linked.opt.aa, line 251
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 253
    // (NH < 16 )
    <[ULT_u12_u1_695_inst] (NH_691 konst_694_wire_constant) (ULT_u12_u1_695_wire)   $flowthrough 
    $delay ULT_u12_u1_695_inst 0
    ==0? [do_while_stmt_640_branch] (ULT_u12_u1_695_wire)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 255
    // 					$phi H := 					  ($bitcast ($uint<12>) 0  ) $on   $entry 					  NH $on   $loopback 
    // type of target is $uint<12>
    //  file prog.linked.opt.aa, line 256
    # := [NH_691_646_buf] (NH_691) (NH_691_646_buffered)    $fullrate
    $buffering $out NH_691_646_buf NH_691_646_buffered  1
    # $phi [phi_stmt_642] (type_cast_645_wire_constant NH_691_646_buffered) ( H_642 ) $fullrate
    // $buffering  $out phi_stmt_642 H_642 2
    // 					HH := (H + 1 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 259
    // (H + 1 )
    +[ADD_u12_u12_651_inst] (H_642 konst_650_wire_constant) (HH_652)    $fullrate
    $buffering  $out ADD_u12_u12_651_inst HH_652 1
    $delay ADD_u12_u12_651_inst 1
    // 					H_574_delayed_5_0 := H $buffering 5// bits of buffering = 60. 
    //  file prog.linked.opt.aa, line 260
    # := [W_H_574_delayed_5_0_653_inst] (H_642) (H_574_delayed_5_0_655)    $fullrate
    $buffering  $out W_H_574_delayed_5_0_653_inst H_574_delayed_5_0_655 5
    // 					image[H_574_delayed_5_0] := image[HH]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 261
    // image[HH]
    &/ [array_obj_ref_659_index_0_resize] (HH_652) (R_HH_658_resized) 
    $flowthrough 
    &/ [array_obj_ref_659_index_0_rename] (R_HH_658_resized) (R_HH_658_scaled) 
    $flowthrough 
    &/ [array_obj_ref_659_index_offset] (R_HH_658_scaled) (array_obj_ref_659_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_659_root_address_inst] (array_obj_ref_659_final_offset) (array_obj_ref_659_root_address) 
    $flowthrough 
    &/ [array_obj_ref_659_addr_0] (array_obj_ref_659_root_address) (array_obj_ref_659_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_659_load_0] $from memory_space_3 (array_obj_ref_659_word_address_0) (array_obj_ref_659_data_0) 
    $buffering  $in array_obj_ref_659_load_0 array_obj_ref_659_word_address_0 2
    $buffering  $out array_obj_ref_659_load_0 array_obj_ref_659_data_0 2
    $delay array_obj_ref_659_load_0 4
    &/ [array_obj_ref_659_gather_scatter] (array_obj_ref_659_data_0) (array_obj_ref_659_wire) 
    $flowthrough 
    // image[H_574_delayed_5_0]
    &/ [array_obj_ref_657_index_0_resize] (H_574_delayed_5_0_655) (R_H_574_delayed_5_0_656_resized) 
    $flowthrough 
    &/ [array_obj_ref_657_index_0_rename] (R_H_574_delayed_5_0_656_resized) (R_H_574_delayed_5_0_656_scaled) 
    $flowthrough 
    &/ [array_obj_ref_657_index_offset] (R_H_574_delayed_5_0_656_scaled) (array_obj_ref_657_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_657_root_address_inst] (array_obj_ref_657_final_offset) (array_obj_ref_657_root_address) 
    $flowthrough 
    &/ [array_obj_ref_657_addr_0] (array_obj_ref_657_root_address) (array_obj_ref_657_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_657_store_0] $to memory_space_3 (array_obj_ref_657_word_address_0 array_obj_ref_657_data_0) 
    $buffering  $in array_obj_ref_657_store_0 array_obj_ref_657_word_address_0 2
    $buffering  $in array_obj_ref_657_store_0 array_obj_ref_657_data_0 2
    $delay array_obj_ref_657_store_0 4
    &/ [array_obj_ref_657_gather_scatter] (array_obj_ref_659_wire) (array_obj_ref_657_data_0) 
    $flowthrough 
    // 					HHH := (H + 2 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 262
    // (H + 2 )
    +[ADD_u12_u12_664_inst] (H_642 konst_663_wire_constant) (HHH_665)    $fullrate
    $buffering  $out ADD_u12_u12_664_inst HHH_665 1
    $delay ADD_u12_u12_664_inst 1
    // 					HH_584_delayed_4_0 := HH $buffering 4// bits of buffering = 48. 
    //  file prog.linked.opt.aa, line 263
    # := [W_HH_584_delayed_4_0_666_inst] (HH_652) (HH_584_delayed_4_0_668)    $fullrate
    $buffering  $out W_HH_584_delayed_4_0_666_inst HH_584_delayed_4_0_668 4
    // 					image[HH_584_delayed_4_0] := image[HHH]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 264
    // image[HHH]
    &/ [array_obj_ref_672_index_0_resize] (HHH_665) (R_HHH_671_resized) 
    $flowthrough 
    &/ [array_obj_ref_672_index_0_rename] (R_HHH_671_resized) (R_HHH_671_scaled) 
    $flowthrough 
    &/ [array_obj_ref_672_index_offset] (R_HHH_671_scaled) (array_obj_ref_672_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_672_root_address_inst] (array_obj_ref_672_final_offset) (array_obj_ref_672_root_address) 
    $flowthrough 
    &/ [array_obj_ref_672_addr_0] (array_obj_ref_672_root_address) (array_obj_ref_672_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_672_load_0] $from memory_space_3 (array_obj_ref_672_word_address_0) (array_obj_ref_672_data_0) 
    $buffering  $in array_obj_ref_672_load_0 array_obj_ref_672_word_address_0 2
    $buffering  $out array_obj_ref_672_load_0 array_obj_ref_672_data_0 2
    $delay array_obj_ref_672_load_0 4
    &/ [array_obj_ref_672_gather_scatter] (array_obj_ref_672_data_0) (array_obj_ref_672_wire) 
    $flowthrough 
    // image[HH_584_delayed_4_0]
    &/ [array_obj_ref_670_index_0_resize] (HH_584_delayed_4_0_668) (R_HH_584_delayed_4_0_669_resized) 
    $flowthrough 
    &/ [array_obj_ref_670_index_0_rename] (R_HH_584_delayed_4_0_669_resized) (R_HH_584_delayed_4_0_669_scaled) 
    $flowthrough 
    &/ [array_obj_ref_670_index_offset] (R_HH_584_delayed_4_0_669_scaled) (array_obj_ref_670_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_670_root_address_inst] (array_obj_ref_670_final_offset) (array_obj_ref_670_root_address) 
    $flowthrough 
    &/ [array_obj_ref_670_addr_0] (array_obj_ref_670_root_address) (array_obj_ref_670_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_670_store_0] $to memory_space_3 (array_obj_ref_670_word_address_0 array_obj_ref_670_data_0) 
    $buffering  $in array_obj_ref_670_store_0 array_obj_ref_670_word_address_0 2
    $buffering  $in array_obj_ref_670_store_0 array_obj_ref_670_data_0 2
    $delay array_obj_ref_670_store_0 4
    &/ [array_obj_ref_670_gather_scatter] (array_obj_ref_672_wire) (array_obj_ref_670_data_0) 
    $flowthrough 
    // 					HHHH := (H + 3 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 265
    // (H + 3 )
    +[ADD_u12_u12_677_inst] (H_642 konst_676_wire_constant) (HHHH_678)    $fullrate
    $buffering  $out ADD_u12_u12_677_inst HHHH_678 1
    $delay ADD_u12_u12_677_inst 1
    // 					HHH_594_delayed_4_0 := HHH $buffering 4// bits of buffering = 48. 
    //  file prog.linked.opt.aa, line 266
    # := [W_HHH_594_delayed_4_0_679_inst] (HHH_665) (HHH_594_delayed_4_0_681)    $fullrate
    $buffering  $out W_HHH_594_delayed_4_0_679_inst HHH_594_delayed_4_0_681 4
    // 					image[HHH_594_delayed_4_0] := image[HHHH]// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 267
    // image[HHHH]
    &/ [array_obj_ref_685_index_0_resize] (HHHH_678) (R_HHHH_684_resized) 
    $flowthrough 
    &/ [array_obj_ref_685_index_0_rename] (R_HHHH_684_resized) (R_HHHH_684_scaled) 
    $flowthrough 
    &/ [array_obj_ref_685_index_offset] (R_HHHH_684_scaled) (array_obj_ref_685_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_685_root_address_inst] (array_obj_ref_685_final_offset) (array_obj_ref_685_root_address) 
    $flowthrough 
    &/ [array_obj_ref_685_addr_0] (array_obj_ref_685_root_address) (array_obj_ref_685_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_685_load_0] $from memory_space_3 (array_obj_ref_685_word_address_0) (array_obj_ref_685_data_0) 
    $buffering  $in array_obj_ref_685_load_0 array_obj_ref_685_word_address_0 2
    $buffering  $out array_obj_ref_685_load_0 array_obj_ref_685_data_0 2
    $delay array_obj_ref_685_load_0 4
    &/ [array_obj_ref_685_gather_scatter] (array_obj_ref_685_data_0) (array_obj_ref_685_wire) 
    $flowthrough 
    // image[HHH_594_delayed_4_0]
    &/ [array_obj_ref_683_index_0_resize] (HHH_594_delayed_4_0_681) (R_HHH_594_delayed_4_0_682_resized) 
    $flowthrough 
    &/ [array_obj_ref_683_index_0_rename] (R_HHH_594_delayed_4_0_682_resized) (R_HHH_594_delayed_4_0_682_scaled) 
    $flowthrough 
    &/ [array_obj_ref_683_index_offset] (R_HHH_594_delayed_4_0_682_scaled) (array_obj_ref_683_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_683_root_address_inst] (array_obj_ref_683_final_offset) (array_obj_ref_683_root_address) 
    $flowthrough 
    &/ [array_obj_ref_683_addr_0] (array_obj_ref_683_root_address) (array_obj_ref_683_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_683_store_0] $to memory_space_3 (array_obj_ref_683_word_address_0 array_obj_ref_683_data_0) 
    $buffering  $in array_obj_ref_683_store_0 array_obj_ref_683_word_address_0 2
    $buffering  $in array_obj_ref_683_store_0 array_obj_ref_683_data_0 2
    $delay array_obj_ref_683_store_0 4
    &/ [array_obj_ref_683_gather_scatter] (array_obj_ref_685_wire) (array_obj_ref_683_data_0) 
    $flowthrough 
    // 					NH := (H + 4 ) $buffering 2// bits of buffering = 24. 
    //  file prog.linked.opt.aa, line 268
    // (H + 4 )
    +[ADD_u12_u12_690_inst] (H_642 konst_689_wire_constant) (NH_691)    $fullrate
    $buffering  $out ADD_u12_u12_690_inst NH_691 2
    $delay ADD_u12_u12_690_inst 1
    // 			$call accessMem_v (1  ((L + G) + 4 ) 0  ) (rdatar ) 
    //  file prog.linked.opt.aa, line 271
    // (L + G)
    +[ADD_u12_u12_700_inst] (L_567 G_445) (ADD_u12_u12_700_wire)   $flowthrough 
    $delay ADD_u12_u12_700_inst 0
    // ((L + G) + 4 )
    +[ADD_u12_u12_702_inst] (ADD_u12_u12_700_wire konst_701_wire_constant) (ADD_u12_u12_702_wire)   
    $buffering  $out ADD_u12_u12_702_inst ADD_u12_u12_702_wire 1
    $delay ADD_u12_u12_702_inst 1
    $call [call_stmt_705_call] $module accessMem_v(konst_697_wire_constant ADD_u12_u12_702_wire konst_703_wire_constant) (rdatar_705)  
    $delay call_stmt_705_call 10
    $buffering  $in call_stmt_705_call konst_697_wire_constant 1
    $buffering  $in call_stmt_705_call ADD_u12_u12_702_wire 1
    $buffering  $in call_stmt_705_call konst_703_wire_constant 1
    $buffering  $out call_stmt_705_call rdatar_705 1
    // 			image[15 ] := ( $slice rdatar 63 48 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 272
    // ( $slice rdatar 63 48 ) 
    [:] [slice_709_inst] (rdatar_705 63 48) (slice_709_wire) 
    $buffering  $out slice_709_inst slice_709_wire 1
    $delay slice_709_inst 1
    // image[15 ]
    $store [array_obj_ref_707_store_0] $to memory_space_3 (array_obj_ref_707_word_address_0 array_obj_ref_707_data_0) 
    $delay array_obj_ref_707_store_0 4
    &/ [array_obj_ref_707_gather_scatter] (slice_709_wire) (array_obj_ref_707_data_0) 
    $flowthrough 
    // 			image[11 ] := ( $slice rdatar 47 32 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 273
    // ( $slice rdatar 47 32 ) 
    [:] [slice_714_inst] (rdatar_705 47 32) (slice_714_wire) 
    $buffering  $out slice_714_inst slice_714_wire 1
    $delay slice_714_inst 1
    // image[11 ]
    $store [array_obj_ref_712_store_0] $to memory_space_3 (array_obj_ref_712_word_address_0 array_obj_ref_712_data_0) 
    $delay array_obj_ref_712_store_0 4
    &/ [array_obj_ref_712_gather_scatter] (slice_714_wire) (array_obj_ref_712_data_0) 
    $flowthrough 
    // 			image[7 ] := ( $slice rdatar 31 16 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 274
    // ( $slice rdatar 31 16 ) 
    [:] [slice_719_inst] (rdatar_705 31 16) (slice_719_wire) 
    $buffering  $out slice_719_inst slice_719_wire 1
    $delay slice_719_inst 1
    // image[7 ]
    $store [array_obj_ref_717_store_0] $to memory_space_3 (array_obj_ref_717_word_address_0 array_obj_ref_717_data_0) 
    $delay array_obj_ref_717_store_0 4
    &/ [array_obj_ref_717_gather_scatter] (slice_719_wire) (array_obj_ref_717_data_0) 
    $flowthrough 
    // 			image[3 ] := ( $slice rdatar 15 0 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 275
    // ( $slice rdatar 15 0 ) 
    [:] [slice_724_inst] (rdatar_705 15 0) (slice_724_wire) 
    $buffering  $out slice_724_inst slice_724_wire 1
    $delay slice_724_inst 1
    // image[3 ]
    $store [array_obj_ref_722_store_0] $to memory_space_3 (array_obj_ref_722_word_address_0 array_obj_ref_722_data_0) 
    $delay array_obj_ref_722_store_0 4
    &/ [array_obj_ref_722_gather_scatter] (slice_724_wire) (array_obj_ref_722_data_0) 
    $flowthrough 
    // 			NL := (L + 1 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 276
    // (L + 1 )
    +[ADD_u12_u12_729_inst] (L_567 konst_728_wire_constant) (NL_730)   
    $buffering  $out ADD_u12_u12_729_inst NL_730 1
    $delay ADD_u12_u12_729_inst 1
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line 0
    // (NL < 29 )
    <[ULT_u12_u1_734_inst] (NL_730 konst_733_wire_constant) (ULT_u12_u1_734_wire)   $flowthrough 
    $delay ULT_u12_u1_734_inst 0
    ==0? [if_stmt_731_branch] (ULT_u12_u1_734_wire)
    // 		NG := (G + 32 )// bits of buffering = 12. 
    //  file prog.linked.opt.aa, line 281
    // (G + 32 )
    +[ADD_u12_u12_741_inst] (G_445 konst_740_wire_constant) (NG_742)   
    $buffering  $out ADD_u12_u12_741_inst NG_742 1
    $delay ADD_u12_u12_741_inst 1
    // datapath-instances for if  
    //  file prog.linked.opt.aa, line -149387400
    // (NG < 928 )
    <[ULT_u12_u1_746_inst] (NG_742 konst_745_wire_constant) (ULT_u12_u1_746_wire)   $flowthrough 
    $delay ULT_u12_u1_746_inst 0
    ==0? [if_stmt_743_branch] (ULT_u12_u1_746_wire)
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_344
  //  file prog.linked.opt.aa, line 154
  phi_stmt_346 <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/phi_stmt_346_entry_sample_req branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/phi_stmt_346_loopback_sample_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/phi_stmt_346_phi_mux_ack)
  NT_437_350_buf <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/R_NT_350_Sample/req branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/R_NT_350_Update/req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/R_NT_350_Sample/ack branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/R_NT_350_Update/ack)
  // 			T_310_delayed_4_0 := T $buffering 4// bits of buffering = 48. 
  //  file prog.linked.opt.aa, line 160
  // T
  W_T_310_delayed_4_0_352_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_354_Sample/req branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_354_Update/req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_354_Sample/ack branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_354_Update/ack)
  // 			NNNT := (T_310_delayed_4_0 + ZJ)// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 161
  // (T_310_delayed_4_0 + ZJ)
  // T_310_delayed_4_0
  // ZJ
  LOAD_ZJ_357_gather_scatter <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/LOAD_ZJ_357_Update/LOAD_ZJ_357_Merge/merge_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/LOAD_ZJ_357_Update/LOAD_ZJ_357_Merge/merge_ack)
  LOAD_ZJ_357_load_0 <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/LOAD_ZJ_357_Sample/word_access_start/word_0/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/LOAD_ZJ_357_Update/word_access_complete/word_0/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/LOAD_ZJ_357_Sample/word_access_start/word_0/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/LOAD_ZJ_357_Update/word_access_complete/word_0/ca)
  ADD_u12_u12_358_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_358_Sample/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_358_Update/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_358_Sample/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_358_Update/ca)
  // 			NTT := ($bitcast ($uint<31>) NNNT )// bits of buffering = 31. 
  //  file prog.linked.opt.aa, line 162
  // NNNT
  // ($bitcast ($uint<31>) NNNT )
  type_cast_363_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/type_cast_363_Sample/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/type_cast_363_Update/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/type_cast_363_Sample/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/type_cast_363_Update/ca)
  // 			NNT := (one && NTT)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 163
  // (one && NTT)
  // one
  LOAD_one_366_gather_scatter <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/LOAD_one_366_Update/LOAD_one_366_Merge/merge_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/LOAD_one_366_Update/LOAD_one_366_Merge/merge_ack)
  LOAD_one_366_load_0 <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/LOAD_one_366_Sample/word_access_start/word_0/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/LOAD_one_366_Update/word_access_complete/word_0/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/LOAD_one_366_Sample/word_access_start/word_0/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/LOAD_one_366_Update/word_access_complete/word_0/ca)
  // NTT
  CONCAT_u1_u32_368_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/CONCAT_u1_u32_368_Sample/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/CONCAT_u1_u32_368_Update/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/CONCAT_u1_u32_368_Sample/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/CONCAT_u1_u32_368_Update/ca)
  // 			$call accMemAccessDaemon (NNT ) (rdatalk rdatahk ) 
  //  file prog.linked.opt.aa, line 164
  // NNT
  call_stmt_373_call <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/call_stmt_373_Sample/crr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/call_stmt_373_Update/ccr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/call_stmt_373_Sample/cra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/call_stmt_373_Update/cca)
  // 			rdatak1 := ( $slice rdatalk 31 16 ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 165
  // rdatalk
  // ( $slice rdatalk 31 16 ) 
  slice_376_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_376_Sample/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_376_Update/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_376_Sample/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_376_Update/ca)
  // 			rdatak0 := ( $slice rdatalk 15 0 ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 166
  // rdatalk
  // ( $slice rdatalk 15 0 ) 
  slice_380_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_380_Sample/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_380_Update/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_380_Sample/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_380_Update/ca)
  // 			TT := (T + 1 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 167
  // (T + 1 )
  // T
  ADD_u12_u12_385_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_385_Sample/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_385_Update/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_385_Sample/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_385_Update/ca)
  // 			T_341_delayed_12_0 := T $buffering 12// bits of buffering = 144. 
  //  file prog.linked.opt.aa, line 168
  // T
  W_T_341_delayed_12_0_387_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_389_Sample/req branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_389_Update/req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_389_Sample/ack branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_389_Update/ack)
  // 			kernel[T_341_delayed_12_0] := rdatak0// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 169
  // rdatak0
  // T_341_delayed_12_0
  array_obj_ref_391_index_0_resize <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_index_resize_0/index_resize_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_index_resize_0/index_resize_ack)
  array_obj_ref_391_index_0_rename <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_index_scale_0/scale_rename_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_index_scale_0/scale_rename_ack)
  array_obj_ref_391_index_offset <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_final_index_sum_regn/req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_final_index_sum_regn/ack)
  array_obj_ref_391_root_address_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_base_plus_offset/sum_rename_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_base_plus_offset/sum_rename_ack)
  array_obj_ref_391_addr_0 <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_word_addrgen/root_register_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_word_addrgen/root_register_ack)
  array_obj_ref_391_gather_scatter <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_Sample/array_obj_ref_391_Split/split_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_Sample/array_obj_ref_391_Split/split_ack)
  array_obj_ref_391_store_0 <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_Sample/word_access_start/word_0/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_Update/word_access_complete/word_0/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_Sample/word_access_start/word_0/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_391_Update/word_access_complete/word_0/ca)
  // 			TT_345_delayed_11_0 := TT $buffering 11// bits of buffering = 132. 
  //  file prog.linked.opt.aa, line 170
  // TT
  W_TT_345_delayed_11_0_394_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_396_Sample/req branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_396_Update/req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_396_Sample/ack branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_396_Update/ack)
  // 			kernel[TT_345_delayed_11_0] := rdatak1// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 171
  // rdatak1
  // TT_345_delayed_11_0
  array_obj_ref_398_index_0_resize <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_index_resize_0/index_resize_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_index_resize_0/index_resize_ack)
  array_obj_ref_398_index_0_rename <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_index_scale_0/scale_rename_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_index_scale_0/scale_rename_ack)
  array_obj_ref_398_index_offset <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_final_index_sum_regn/req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_final_index_sum_regn/ack)
  array_obj_ref_398_root_address_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_base_plus_offset/sum_rename_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_base_plus_offset/sum_rename_ack)
  array_obj_ref_398_addr_0 <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_word_addrgen/root_register_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_word_addrgen/root_register_ack)
  array_obj_ref_398_gather_scatter <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_Sample/array_obj_ref_398_Split/split_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_Sample/array_obj_ref_398_Split/split_ack)
  array_obj_ref_398_store_0 <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_Sample/word_access_start/word_0/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_Update/word_access_complete/word_0/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_Sample/word_access_start/word_0/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_398_Update/word_access_complete/word_0/ca)
  // 			rdatak3 := ( $slice rdatahk 31 16 ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 172
  // rdatahk
  // ( $slice rdatahk 31 16 ) 
  slice_403_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_403_Sample/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_403_Update/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_403_Sample/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_403_Update/ca)
  // 			rdatak2 := ( $slice rdatahk 15 0 ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 173
  // rdatahk
  // ( $slice rdatahk 15 0 ) 
  slice_407_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_407_Sample/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_407_Update/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_407_Sample/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/slice_407_Update/ca)
  // 			TTT := (T + 2 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 174
  // (T + 2 )
  // T
  ADD_u12_u12_412_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_412_Sample/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_412_Update/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_412_Sample/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_412_Update/ca)
  // 			TTTT := (T + 3 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 175
  // (T + 3 )
  // T
  ADD_u12_u12_417_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_417_Sample/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_417_Update/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_417_Sample/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_417_Update/ca)
  // 			TTT_367_delayed_11_0 := TTT $buffering 11// bits of buffering = 132. 
  //  file prog.linked.opt.aa, line 176
  // TTT
  W_TTT_367_delayed_11_0_419_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_421_Sample/req branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_421_Update/req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_421_Sample/ack branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_421_Update/ack)
  // 			kernel[TTT_367_delayed_11_0] := rdatak2// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 177
  // rdatak2
  // TTT_367_delayed_11_0
  array_obj_ref_423_index_0_resize <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_index_resize_0/index_resize_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_index_resize_0/index_resize_ack)
  array_obj_ref_423_index_0_rename <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_index_scale_0/scale_rename_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_index_scale_0/scale_rename_ack)
  array_obj_ref_423_index_offset <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_final_index_sum_regn/req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_final_index_sum_regn/ack)
  array_obj_ref_423_root_address_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_base_plus_offset/sum_rename_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_base_plus_offset/sum_rename_ack)
  array_obj_ref_423_addr_0 <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_word_addrgen/root_register_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_word_addrgen/root_register_ack)
  array_obj_ref_423_gather_scatter <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_Sample/array_obj_ref_423_Split/split_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_Sample/array_obj_ref_423_Split/split_ack)
  array_obj_ref_423_store_0 <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_Sample/word_access_start/word_0/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_Update/word_access_complete/word_0/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_Sample/word_access_start/word_0/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_423_Update/word_access_complete/word_0/ca)
  // 			TTTT_371_delayed_11_0 := TTTT $buffering 11// bits of buffering = 132. 
  //  file prog.linked.opt.aa, line 178
  // TTTT
  W_TTTT_371_delayed_11_0_426_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_428_Sample/req branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_428_Update/req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_428_Sample/ack branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/assign_stmt_428_Update/ack)
  // 			kernel[TTTT_371_delayed_11_0] := rdatak3// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 179
  // rdatak3
  // TTTT_371_delayed_11_0
  array_obj_ref_430_index_0_resize <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_index_resize_0/index_resize_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_index_resize_0/index_resize_ack)
  array_obj_ref_430_index_0_rename <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_index_scale_0/scale_rename_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_index_scale_0/scale_rename_ack)
  array_obj_ref_430_index_offset <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_final_index_sum_regn/req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_final_index_sum_regn/ack)
  array_obj_ref_430_root_address_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_base_plus_offset/sum_rename_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_base_plus_offset/sum_rename_ack)
  array_obj_ref_430_addr_0 <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_word_addrgen/root_register_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_word_addrgen/root_register_ack)
  array_obj_ref_430_gather_scatter <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_Sample/array_obj_ref_430_Split/split_req) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_Sample/array_obj_ref_430_Split/split_ack)
  array_obj_ref_430_store_0 <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_Sample/word_access_start/word_0/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_Update/word_access_complete/word_0/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_Sample/word_access_start/word_0/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/array_obj_ref_430_Update/word_access_complete/word_0/ca)
  // 			NT := (T + 4 ) $buffering 2// bits of buffering = 24. 
  //  file prog.linked.opt.aa, line 180
  // (T + 4 )
  // T
  ADD_u12_u12_436_inst <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_436_Sample/rr branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_436_Update/cr) (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_436_Sample/ra branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/ADD_u12_u12_436_Update/ca)
  // (NT < 16 )
  // NT
  do_while_stmt_344_branch <=> (branch_block_stmt_343/do_while_stmt_344/do_while_stmt_344_loop_body/condition_evaluated) (branch_block_stmt_343/do_while_stmt_344/loop_exit/ack branch_block_stmt_343/do_while_stmt_344/loop_taken/ack)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 185
  NG_742_449_buf <=> (branch_block_stmt_443/loopback_PhiReq/phi_stmt_445/phi_stmt_445_sources/Interlock/Sample/req branch_block_stmt_443/loopback_PhiReq/phi_stmt_445/phi_stmt_445_sources/Interlock/Update/req) (branch_block_stmt_443/loopback_PhiReq/phi_stmt_445/phi_stmt_445_sources/Interlock/Sample/ack branch_block_stmt_443/loopback_PhiReq/phi_stmt_445/phi_stmt_445_sources/Interlock/Update/ack)
  phi_stmt_445 <=> (branch_block_stmt_443/merge_stmt_444__entry___PhiReq/phi_stmt_445/phi_stmt_445_req branch_block_stmt_443/loopback_PhiReq/phi_stmt_445/phi_stmt_445_req) (branch_block_stmt_443/merge_stmt_444_PhiAck/phi_stmt_445_ack)
  // 		PJ := 0 // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 189
  // PJ
  STORE_PJ_451_gather_scatter <=> (branch_block_stmt_443/assign_stmt_453/STORE_PJ_451_Sample/STORE_PJ_451_Split/split_req) (branch_block_stmt_443/assign_stmt_453/STORE_PJ_451_Sample/STORE_PJ_451_Split/split_ack)
  STORE_PJ_451_store_0 <=> (branch_block_stmt_443/assign_stmt_453/STORE_PJ_451_Sample/word_access_start/word_0/rr branch_block_stmt_443/assign_stmt_453/STORE_PJ_451_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/assign_stmt_453/STORE_PJ_451_Sample/word_access_start/word_0/ra branch_block_stmt_443/assign_stmt_453/STORE_PJ_451_Update/word_access_complete/word_0/ca)
  // CP-DP links for do-while  do_while_stmt_455
  //  file prog.linked.opt.aa, line 192
  phi_stmt_457 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/phi_stmt_457_entry_sample_req branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/phi_stmt_457_loopback_sample_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/phi_stmt_457_phi_mux_ack)
  NJ_554_461_buf <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/R_NJ_461_Sample/req branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/R_NJ_461_Update/req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/R_NJ_461_Sample/ack branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/R_NJ_461_Update/ack)
  // 				NJJ := ($bitcast ($uint<31>) J )// bits of buffering = 31. 
  //  file prog.linked.opt.aa, line 198
  // J
  // ($bitcast ($uint<31>) J )
  type_cast_465_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/type_cast_465_Sample/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/type_cast_465_Update/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/type_cast_465_Sample/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/type_cast_465_Update/ca)
  // 				NGG := ($bitcast ($uint<32>) G )// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 199
  // G
  // ($bitcast ($uint<32>) G )
  type_cast_469_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/type_cast_469_Sample/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/type_cast_469_Update/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/type_cast_469_Sample/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/type_cast_469_Update/ca)
  // 				NJJ_415_delayed_2_0 := NJJ $buffering 2// bits of buffering = 62. 
  //  file prog.linked.opt.aa, line 200
  // NJJ
  W_NJJ_415_delayed_2_0_471_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_473_Sample/req branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_473_Update/req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_473_Sample/ack branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_473_Update/ack)
  // 				NNG := (one && NJJ_415_delayed_2_0)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 201
  // (one && NJJ_415_delayed_2_0)
  // one
  LOAD_one_475_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_one_475_Update/LOAD_one_475_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_one_475_Update/LOAD_one_475_Merge/merge_ack)
  LOAD_one_475_load_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_one_475_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_one_475_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_one_475_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_one_475_Update/word_access_complete/word_0/ca)
  // NJJ_415_delayed_2_0
  CONCAT_u1_u32_477_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/CONCAT_u1_u32_477_Sample/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/CONCAT_u1_u32_477_Update/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/CONCAT_u1_u32_477_Sample/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/CONCAT_u1_u32_477_Update/ca)
  // 				NGG_420_delayed_4_0 := NGG $buffering 4// bits of buffering = 128. 
  //  file prog.linked.opt.aa, line 202
  // NGG
  W_NGG_420_delayed_4_0_479_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_481_Sample/req branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_481_Update/req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_481_Sample/ack branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_481_Update/ack)
  // 				NNJ := (NNG + NGG_420_delayed_4_0)// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 203
  // (NNG + NGG_420_delayed_4_0)
  // NNG
  // NGG_420_delayed_4_0
  ADD_u32_u32_485_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u32_u32_485_Sample/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u32_u32_485_Update/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u32_u32_485_Sample/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u32_u32_485_Update/ca)
  // 				$call accMemAccessDaemon (NNJ ) (rdatal rdatah ) 
  //  file prog.linked.opt.aa, line 204
  // NNJ
  call_stmt_490_call <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/call_stmt_490_Sample/crr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/call_stmt_490_Update/ccr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/call_stmt_490_Sample/cra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/call_stmt_490_Update/cca)
  // 				rdatai1 := ( $slice rdatal 31 16 ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 205
  // rdatal
  // ( $slice rdatal 31 16 ) 
  slice_493_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_493_Sample/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_493_Update/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_493_Sample/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_493_Update/ca)
  // 				rdatai0 := ( $slice rdatal 15 0 ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 206
  // rdatal
  // ( $slice rdatal 15 0 ) 
  slice_497_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_497_Sample/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_497_Update/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_497_Sample/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_497_Update/ca)
  // 				PPJ := (PJ + 1 )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 207
  // (PJ + 1 )
  // PJ
  LOAD_PJ_500_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_500_Update/LOAD_PJ_500_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_500_Update/LOAD_PJ_500_Merge/merge_ack)
  LOAD_PJ_500_load_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_500_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_500_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_500_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_500_Update/word_access_complete/word_0/ca)
  ADD_u16_u16_502_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_502_Sample/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_502_Update/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_502_Sample/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_502_Update/ca)
  // 				PJ_440_delayed_7_0 := PJ $buffering 7// bits of buffering = 112. 
  //  file prog.linked.opt.aa, line 208
  // PJ
  LOAD_PJ_505_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_505_Update/LOAD_PJ_505_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_505_Update/LOAD_PJ_505_Merge/merge_ack)
  LOAD_PJ_505_load_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_505_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_505_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_505_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_505_Update/word_access_complete/word_0/ca)
  // 				image[PJ_440_delayed_7_0] := rdatai0// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 209
  // rdatai0
  // PJ_440_delayed_7_0
  array_obj_ref_508_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_index_resize_0/index_resize_ack)
  array_obj_ref_508_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_index_scale_0/scale_rename_ack)
  array_obj_ref_508_index_offset <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_final_index_sum_regn/ack)
  array_obj_ref_508_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_base_plus_offset/sum_rename_ack)
  array_obj_ref_508_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_word_addrgen/root_register_ack)
  array_obj_ref_508_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_Sample/array_obj_ref_508_Split/split_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_Sample/array_obj_ref_508_Split/split_ack)
  array_obj_ref_508_store_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_508_Update/word_access_complete/word_0/ca)
  // 				PPJ_444_delayed_6_0 := PPJ $buffering 6// bits of buffering = 96. 
  //  file prog.linked.opt.aa, line 210
  // PPJ
  W_PPJ_444_delayed_6_0_511_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_513_Sample/req branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_513_Update/req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_513_Sample/ack branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_513_Update/ack)
  // 				image[PPJ_444_delayed_6_0] := rdatai1// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 211
  // rdatai1
  // PPJ_444_delayed_6_0
  array_obj_ref_515_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_index_resize_0/index_resize_ack)
  array_obj_ref_515_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_index_scale_0/scale_rename_ack)
  array_obj_ref_515_index_offset <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_final_index_sum_regn/ack)
  array_obj_ref_515_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_base_plus_offset/sum_rename_ack)
  array_obj_ref_515_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_word_addrgen/root_register_ack)
  array_obj_ref_515_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_Sample/array_obj_ref_515_Split/split_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_Sample/array_obj_ref_515_Split/split_ack)
  array_obj_ref_515_store_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_515_Update/word_access_complete/word_0/ca)
  // 				rdatai3 := ( $slice rdatah 31 16 ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 212
  // rdatah
  // ( $slice rdatah 31 16 ) 
  slice_520_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_520_Sample/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_520_Update/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_520_Sample/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_520_Update/ca)
  // 				rdatai2 := ( $slice rdatah 15 0 ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 213
  // rdatah
  // ( $slice rdatah 15 0 ) 
  slice_524_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_524_Sample/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_524_Update/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_524_Sample/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/slice_524_Update/ca)
  // 				PPPJ := (PJ + 2 )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 214
  // (PJ + 2 )
  // PJ
  LOAD_PJ_527_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_527_Update/LOAD_PJ_527_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_527_Update/LOAD_PJ_527_Merge/merge_ack)
  LOAD_PJ_527_load_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_527_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_527_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_527_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_527_Update/word_access_complete/word_0/ca)
  ADD_u16_u16_529_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_529_Sample/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_529_Update/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_529_Sample/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_529_Update/ca)
  // 				PPPPJ := (PJ + 3 )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 215
  // (PJ + 3 )
  // PJ
  LOAD_PJ_532_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_532_Update/LOAD_PJ_532_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_532_Update/LOAD_PJ_532_Merge/merge_ack)
  LOAD_PJ_532_load_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_532_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_532_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_532_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_532_Update/word_access_complete/word_0/ca)
  ADD_u16_u16_534_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_534_Sample/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_534_Update/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_534_Sample/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_534_Update/ca)
  // 				PPPJ_466_delayed_6_0 := PPPJ $buffering 6// bits of buffering = 96. 
  //  file prog.linked.opt.aa, line 216
  // PPPJ
  W_PPPJ_466_delayed_6_0_536_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_538_Sample/req branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_538_Update/req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_538_Sample/ack branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_538_Update/ack)
  // 				image[PPPJ_466_delayed_6_0] := rdatai2// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 217
  // rdatai2
  // PPPJ_466_delayed_6_0
  array_obj_ref_540_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_index_resize_0/index_resize_ack)
  array_obj_ref_540_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_index_scale_0/scale_rename_ack)
  array_obj_ref_540_index_offset <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_final_index_sum_regn/ack)
  array_obj_ref_540_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_base_plus_offset/sum_rename_ack)
  array_obj_ref_540_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_word_addrgen/root_register_ack)
  array_obj_ref_540_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_Sample/array_obj_ref_540_Split/split_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_Sample/array_obj_ref_540_Split/split_ack)
  array_obj_ref_540_store_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_540_Update/word_access_complete/word_0/ca)
  // 				PPPPJ_470_delayed_6_0 := PPPPJ $buffering 6// bits of buffering = 96. 
  //  file prog.linked.opt.aa, line 218
  // PPPPJ
  W_PPPPJ_470_delayed_6_0_543_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_545_Sample/req branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_545_Update/req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_545_Sample/ack branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/assign_stmt_545_Update/ack)
  // 				image[PPPPJ_470_delayed_6_0] := rdatai3// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 219
  // rdatai3
  // PPPPJ_470_delayed_6_0
  array_obj_ref_547_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_index_resize_0/index_resize_ack)
  array_obj_ref_547_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_index_scale_0/scale_rename_ack)
  array_obj_ref_547_index_offset <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_final_index_sum_regn/ack)
  array_obj_ref_547_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_base_plus_offset/sum_rename_ack)
  array_obj_ref_547_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_word_addrgen/root_register_ack)
  array_obj_ref_547_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_Sample/array_obj_ref_547_Split/split_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_Sample/array_obj_ref_547_Split/split_ack)
  array_obj_ref_547_store_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/array_obj_ref_547_Update/word_access_complete/word_0/ca)
  // 				NJ := (J + 32 ) $buffering 2// bits of buffering = 24. 
  //  file prog.linked.opt.aa, line 220
  // (J + 32 )
  // J
  ADD_u12_u12_553_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u12_u12_553_Sample/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u12_u12_553_Update/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u12_u12_553_Sample/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u12_u12_553_Update/ca)
  // 				PJ := (PJ + 4 )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 221
  // (PJ + 4 )
  // PJ
  LOAD_PJ_556_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_556_Update/LOAD_PJ_556_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_556_Update/LOAD_PJ_556_Merge/merge_ack)
  LOAD_PJ_556_load_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_556_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_556_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_556_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/LOAD_PJ_556_Update/word_access_complete/word_0/ca)
  ADD_u16_u16_558_inst <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_558_Sample/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_558_Update/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_558_Sample/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/ADD_u16_u16_558_Update/ca)
  // PJ
  STORE_PJ_555_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/STORE_PJ_555_Sample/STORE_PJ_555_Split/split_req) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/STORE_PJ_555_Sample/STORE_PJ_555_Split/split_ack)
  STORE_PJ_555_store_0 <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/STORE_PJ_555_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/STORE_PJ_555_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/STORE_PJ_555_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/STORE_PJ_555_Update/word_access_complete/word_0/ca)
  // (NJ < 128 )
  // NJ
  do_while_stmt_455_branch <=> (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/do_while_stmt_455_loop_body/condition_evaluated) (branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/loop_exit/ack branch_block_stmt_443/branch_block_stmt_454/do_while_stmt_455/loop_taken/ack)
  // CP-DP links for merge  
  //  file prog.linked.opt.aa, line 226
  NL_730_571_buf <=> (branch_block_stmt_443/branch_block_stmt_565/loopback_PhiReq/phi_stmt_567/phi_stmt_567_sources/Interlock/Sample/req branch_block_stmt_443/branch_block_stmt_565/loopback_PhiReq/phi_stmt_567/phi_stmt_567_sources/Interlock/Update/req) (branch_block_stmt_443/branch_block_stmt_565/loopback_PhiReq/phi_stmt_567/phi_stmt_567_sources/Interlock/Sample/ack branch_block_stmt_443/branch_block_stmt_565/loopback_PhiReq/phi_stmt_567/phi_stmt_567_sources/Interlock/Update/ack)
  phi_stmt_567 <=> (branch_block_stmt_443/branch_block_stmt_565/merge_stmt_566__entry___PhiReq/phi_stmt_567/phi_stmt_567_req branch_block_stmt_443/branch_block_stmt_565/loopback_PhiReq/phi_stmt_567/phi_stmt_567_req) (branch_block_stmt_443/branch_block_stmt_565/merge_stmt_566_PhiAck/phi_stmt_567_ack)
  // 			total := 0 // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 230
  // total
  STORE_total_573_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/assign_stmt_575/STORE_total_573_Sample/STORE_total_573_Split/split_req) (branch_block_stmt_443/branch_block_stmt_565/assign_stmt_575/STORE_total_573_Sample/STORE_total_573_Split/split_ack)
  STORE_total_573_store_0 <=> (branch_block_stmt_443/branch_block_stmt_565/assign_stmt_575/STORE_total_573_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/assign_stmt_575/STORE_total_573_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/assign_stmt_575/STORE_total_573_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/assign_stmt_575/STORE_total_573_Update/word_access_complete/word_0/ca)
  // CP-DP links for do-while  do_while_stmt_577
  //  file prog.linked.opt.aa, line 233
  phi_stmt_579 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/phi_stmt_579_entry_sample_req branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/phi_stmt_579_loopback_sample_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/phi_stmt_579_phi_mux_ack)
  NK_612_583_buf <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/R_NK_583_Sample/req branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/R_NK_583_Update/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/R_NK_583_Sample/ack branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/R_NK_583_Update/ack)
  // 					imag1 := image[K]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 239
  // image[K]
  // K
  array_obj_ref_587_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_index_resize_0/index_resize_ack)
  array_obj_ref_587_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_index_scale_0/scale_rename_ack)
  array_obj_ref_587_index_offset <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_final_index_sum_regn/ack)
  array_obj_ref_587_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_base_plus_offset/sum_rename_ack)
  array_obj_ref_587_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_word_addrgen/root_register_ack)
  array_obj_ref_587_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_Update/array_obj_ref_587_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_Update/array_obj_ref_587_Merge/merge_ack)
  array_obj_ref_587_load_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_587_Update/word_access_complete/word_0/ca)
  // 					ker1 := kernel[K]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 240
  // kernel[K]
  // K
  array_obj_ref_591_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_index_resize_0/index_resize_ack)
  array_obj_ref_591_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_index_scale_0/scale_rename_ack)
  array_obj_ref_591_index_offset <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_final_index_sum_regn/ack)
  array_obj_ref_591_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_base_plus_offset/sum_rename_ack)
  array_obj_ref_591_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_word_addrgen/root_register_ack)
  array_obj_ref_591_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_Update/array_obj_ref_591_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_Update/array_obj_ref_591_Merge/merge_ack)
  array_obj_ref_591_load_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_591_Update/word_access_complete/word_0/ca)
  // 					K_517_delayed_5_0 := K $buffering 5// bits of buffering = 160. 
  //  file prog.linked.opt.aa, line 241
  // K
  W_K_517_delayed_5_0_593_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/assign_stmt_595_Sample/req branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/assign_stmt_595_Update/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/assign_stmt_595_Sample/ack branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/assign_stmt_595_Update/ack)
  // 					a[K_517_delayed_5_0] := (imag1 * ker1)// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 242
  // (imag1 * ker1)
  // imag1
  // ker1
  MUL_u16_u16_600_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/MUL_u16_u16_600_Sample/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/MUL_u16_u16_600_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/MUL_u16_u16_600_Sample/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/MUL_u16_u16_600_Update/ca)
  // K_517_delayed_5_0
  array_obj_ref_597_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_index_resize_0/index_resize_ack)
  array_obj_ref_597_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_index_scale_0/scale_rename_ack)
  array_obj_ref_597_index_offset <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_final_index_sum_regn/ack)
  array_obj_ref_597_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_base_plus_offset/sum_rename_ack)
  array_obj_ref_597_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_word_addrgen/root_register_ack)
  array_obj_ref_597_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_Sample/array_obj_ref_597_Split/split_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_Sample/array_obj_ref_597_Split/split_ack)
  array_obj_ref_597_store_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_597_Update/word_access_complete/word_0/ca)
  // 					total := (total + a[K])// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 243
  // (total + a[K])
  // total
  LOAD_total_603_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/LOAD_total_603_Update/LOAD_total_603_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/LOAD_total_603_Update/LOAD_total_603_Merge/merge_ack)
  LOAD_total_603_load_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/LOAD_total_603_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/LOAD_total_603_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/LOAD_total_603_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/LOAD_total_603_Update/word_access_complete/word_0/ca)
  // a[K]
  // K
  array_obj_ref_605_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_index_resize_0/index_resize_ack)
  array_obj_ref_605_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_index_scale_0/scale_rename_ack)
  array_obj_ref_605_index_offset <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_final_index_sum_regn/ack)
  array_obj_ref_605_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_base_plus_offset/sum_rename_ack)
  array_obj_ref_605_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_word_addrgen/root_register_ack)
  array_obj_ref_605_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_Update/array_obj_ref_605_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_Update/array_obj_ref_605_Merge/merge_ack)
  array_obj_ref_605_load_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/array_obj_ref_605_Update/word_access_complete/word_0/ca)
  ADD_u16_u16_606_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/ADD_u16_u16_606_Sample/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/ADD_u16_u16_606_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/ADD_u16_u16_606_Sample/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/ADD_u16_u16_606_Update/ca)
  // total
  STORE_total_602_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/STORE_total_602_Sample/STORE_total_602_Split/split_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/STORE_total_602_Sample/STORE_total_602_Split/split_ack)
  STORE_total_602_store_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/STORE_total_602_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/STORE_total_602_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/STORE_total_602_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/STORE_total_602_Update/word_access_complete/word_0/ca)
  // 					NK := (K + 1 ) $buffering 2// bits of buffering = 64. 
  //  file prog.linked.opt.aa, line 244
  // (K + 1 )
  // K
  ADD_u32_u32_611_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/ADD_u32_u32_611_Sample/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/ADD_u32_u32_611_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/ADD_u32_u32_611_Sample/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/ADD_u32_u32_611_Update/ca)
  // (NK < 16 )
  // NK
  do_while_stmt_577_branch <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/do_while_stmt_577_loop_body/condition_evaluated) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/loop_exit/ack branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_576/do_while_stmt_577/loop_taken/ack)
  // 			$call accessMem (0  (L + G) total ) (rdata ) 
  //  file prog.linked.opt.aa, line 247
  // (L + G)
  // L
  // G
  ADD_u12_u12_621_inst <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/ADD_u12_u12_621_Sample/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/ADD_u12_u12_621_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/ADD_u12_u12_621_Sample/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/ADD_u12_u12_621_Update/ca)
  // total
  LOAD_total_622_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/LOAD_total_622_Update/LOAD_total_622_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/LOAD_total_622_Update/LOAD_total_622_Merge/merge_ack)
  LOAD_total_622_load_0 <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/LOAD_total_622_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/LOAD_total_622_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/LOAD_total_622_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/LOAD_total_622_Update/word_access_complete/word_0/ca)
  call_stmt_624_call <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/call_stmt_624_Sample/crr branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/call_stmt_624_Update/ccr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/call_stmt_624_Sample/cra branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/call_stmt_624_Update/cca)
  // 			f := (zer && (L + G))// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 248
  // (zer && (L + G))
  // zer
  LOAD_zer_626_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/LOAD_zer_626_Update/LOAD_zer_626_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/LOAD_zer_626_Update/LOAD_zer_626_Merge/merge_ack)
  LOAD_zer_626_load_0 <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/LOAD_zer_626_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/LOAD_zer_626_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/LOAD_zer_626_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/LOAD_zer_626_Update/word_access_complete/word_0/ca)
  // (L + G)
  // L
  // G
  CONCAT_u4_u16_630_inst <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/CONCAT_u4_u16_630_Sample/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/CONCAT_u4_u16_630_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/CONCAT_u4_u16_630_Sample/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/CONCAT_u4_u16_630_Update/ca)
  // 			acc_mem_add := f// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 249
  // f
  // acc_mem_add
  WPIPE_acc_mem_add_632_inst <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/WPIPE_acc_mem_add_632_Sample/req branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/WPIPE_acc_mem_add_632_Update/req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/WPIPE_acc_mem_add_632_Sample/ack branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/WPIPE_acc_mem_add_632_Update/ack)
  // 			acc_mem := mem_array[f]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 250
  // mem_array[f]
  // f
  array_obj_ref_637_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_index_resize_0/index_resize_ack)
  array_obj_ref_637_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_index_scale_0/scale_rename_ack)
  array_obj_ref_637_index_offset <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_final_index_sum_regn/ack)
  array_obj_ref_637_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_base_plus_offset/sum_rename_ack)
  array_obj_ref_637_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_word_addrgen/root_register_ack)
  array_obj_ref_637_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_Update/array_obj_ref_637_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_Update/array_obj_ref_637_Merge/merge_ack)
  array_obj_ref_637_load_0 <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/array_obj_ref_637_Update/word_access_complete/word_0/ca)
  // acc_mem
  WPIPE_acc_mem_635_inst <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/WPIPE_acc_mem_635_Sample/req branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/WPIPE_acc_mem_635_Update/req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/WPIPE_acc_mem_635_Sample/ack branch_block_stmt_443/branch_block_stmt_565/call_stmt_624_to_assign_stmt_638/WPIPE_acc_mem_635_Update/ack)
  // CP-DP links for do-while  do_while_stmt_640
  //  file prog.linked.opt.aa, line 253
  phi_stmt_642 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/phi_stmt_642_entry_sample_req branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/phi_stmt_642_loopback_sample_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/phi_stmt_642_phi_mux_ack)
  NH_691_646_buf <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/R_NH_646_Sample/req branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/R_NH_646_Update/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/R_NH_646_Sample/ack branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/R_NH_646_Update/ack)
  // 					HH := (H + 1 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 259
  // (H + 1 )
  // H
  ADD_u12_u12_651_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_651_Sample/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_651_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_651_Sample/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_651_Update/ca)
  // 					H_574_delayed_5_0 := H $buffering 5// bits of buffering = 60. 
  //  file prog.linked.opt.aa, line 260
  // H
  W_H_574_delayed_5_0_653_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/assign_stmt_655_Sample/req branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/assign_stmt_655_Update/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/assign_stmt_655_Sample/ack branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/assign_stmt_655_Update/ack)
  // 					image[H_574_delayed_5_0] := image[HH]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 261
  // image[HH]
  // HH
  array_obj_ref_659_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_index_resize_0/index_resize_ack)
  array_obj_ref_659_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_index_scale_0/scale_rename_ack)
  array_obj_ref_659_index_offset <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_final_index_sum_regn/ack)
  array_obj_ref_659_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_base_plus_offset/sum_rename_ack)
  array_obj_ref_659_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_word_addrgen/root_register_ack)
  array_obj_ref_659_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_Update/array_obj_ref_659_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_Update/array_obj_ref_659_Merge/merge_ack)
  array_obj_ref_659_load_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_659_Update/word_access_complete/word_0/ca)
  // H_574_delayed_5_0
  array_obj_ref_657_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_index_resize_0/index_resize_ack)
  array_obj_ref_657_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_index_scale_0/scale_rename_ack)
  array_obj_ref_657_index_offset <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_final_index_sum_regn/ack)
  array_obj_ref_657_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_base_plus_offset/sum_rename_ack)
  array_obj_ref_657_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_word_addrgen/root_register_ack)
  array_obj_ref_657_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_Sample/array_obj_ref_657_Split/split_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_Sample/array_obj_ref_657_Split/split_ack)
  array_obj_ref_657_store_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_657_Update/word_access_complete/word_0/ca)
  // 					HHH := (H + 2 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 262
  // (H + 2 )
  // H
  ADD_u12_u12_664_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_664_Sample/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_664_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_664_Sample/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_664_Update/ca)
  // 					HH_584_delayed_4_0 := HH $buffering 4// bits of buffering = 48. 
  //  file prog.linked.opt.aa, line 263
  // HH
  W_HH_584_delayed_4_0_666_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/assign_stmt_668_Sample/req branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/assign_stmt_668_Update/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/assign_stmt_668_Sample/ack branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/assign_stmt_668_Update/ack)
  // 					image[HH_584_delayed_4_0] := image[HHH]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 264
  // image[HHH]
  // HHH
  array_obj_ref_672_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_index_resize_0/index_resize_ack)
  array_obj_ref_672_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_index_scale_0/scale_rename_ack)
  array_obj_ref_672_index_offset <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_final_index_sum_regn/ack)
  array_obj_ref_672_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_base_plus_offset/sum_rename_ack)
  array_obj_ref_672_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_word_addrgen/root_register_ack)
  array_obj_ref_672_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_Update/array_obj_ref_672_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_Update/array_obj_ref_672_Merge/merge_ack)
  array_obj_ref_672_load_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_672_Update/word_access_complete/word_0/ca)
  // HH_584_delayed_4_0
  array_obj_ref_670_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_index_resize_0/index_resize_ack)
  array_obj_ref_670_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_index_scale_0/scale_rename_ack)
  array_obj_ref_670_index_offset <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_final_index_sum_regn/ack)
  array_obj_ref_670_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_base_plus_offset/sum_rename_ack)
  array_obj_ref_670_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_word_addrgen/root_register_ack)
  array_obj_ref_670_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_Sample/array_obj_ref_670_Split/split_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_Sample/array_obj_ref_670_Split/split_ack)
  array_obj_ref_670_store_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_670_Update/word_access_complete/word_0/ca)
  // 					HHHH := (H + 3 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 265
  // (H + 3 )
  // H
  ADD_u12_u12_677_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_677_Sample/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_677_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_677_Sample/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_677_Update/ca)
  // 					HHH_594_delayed_4_0 := HHH $buffering 4// bits of buffering = 48. 
  //  file prog.linked.opt.aa, line 266
  // HHH
  W_HHH_594_delayed_4_0_679_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/assign_stmt_681_Sample/req branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/assign_stmt_681_Update/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/assign_stmt_681_Sample/ack branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/assign_stmt_681_Update/ack)
  // 					image[HHH_594_delayed_4_0] := image[HHHH]// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 267
  // image[HHHH]
  // HHHH
  array_obj_ref_685_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_index_resize_0/index_resize_ack)
  array_obj_ref_685_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_index_scale_0/scale_rename_ack)
  array_obj_ref_685_index_offset <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_final_index_sum_regn/ack)
  array_obj_ref_685_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_base_plus_offset/sum_rename_ack)
  array_obj_ref_685_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_word_addrgen/root_register_ack)
  array_obj_ref_685_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_Update/array_obj_ref_685_Merge/merge_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_Update/array_obj_ref_685_Merge/merge_ack)
  array_obj_ref_685_load_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_685_Update/word_access_complete/word_0/ca)
  // HHH_594_delayed_4_0
  array_obj_ref_683_index_0_resize <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_index_resize_0/index_resize_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_index_resize_0/index_resize_ack)
  array_obj_ref_683_index_0_rename <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_index_scale_0/scale_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_index_scale_0/scale_rename_ack)
  array_obj_ref_683_index_offset <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_final_index_sum_regn/req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_final_index_sum_regn/ack)
  array_obj_ref_683_root_address_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_base_plus_offset/sum_rename_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_base_plus_offset/sum_rename_ack)
  array_obj_ref_683_addr_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_word_addrgen/root_register_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_word_addrgen/root_register_ack)
  array_obj_ref_683_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_Sample/array_obj_ref_683_Split/split_req) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_Sample/array_obj_ref_683_Split/split_ack)
  array_obj_ref_683_store_0 <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/array_obj_ref_683_Update/word_access_complete/word_0/ca)
  // 					NH := (H + 4 ) $buffering 2// bits of buffering = 24. 
  //  file prog.linked.opt.aa, line 268
  // (H + 4 )
  // H
  ADD_u12_u12_690_inst <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_690_Sample/rr branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_690_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_690_Sample/ra branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/ADD_u12_u12_690_Update/ca)
  // (NH < 16 )
  // NH
  do_while_stmt_640_branch <=> (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/do_while_stmt_640_loop_body/condition_evaluated) (branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/loop_exit/ack branch_block_stmt_443/branch_block_stmt_565/branch_block_stmt_639/do_while_stmt_640/loop_taken/ack)
  // 			$call accessMem_v (1  ((L + G) + 4 ) 0  ) (rdatar ) 
  //  file prog.linked.opt.aa, line 271
  // ((L + G) + 4 )
  // (L + G)
  // L
  // G
  ADD_u12_u12_702_inst <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/ADD_u12_u12_702_Sample/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/ADD_u12_u12_702_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/ADD_u12_u12_702_Sample/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/ADD_u12_u12_702_Update/ca)
  call_stmt_705_call <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/call_stmt_705_Sample/crr branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/call_stmt_705_Update/ccr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/call_stmt_705_Sample/cra branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/call_stmt_705_Update/cca)
  // 			image[15 ] := ( $slice rdatar 63 48 ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 272
  // rdatar
  // ( $slice rdatar 63 48 ) 
  slice_709_inst <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_709_Sample/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_709_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_709_Sample/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_709_Update/ca)
  array_obj_ref_707_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_707_Sample/array_obj_ref_707_Split/split_req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_707_Sample/array_obj_ref_707_Split/split_ack)
  array_obj_ref_707_store_0 <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_707_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_707_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_707_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_707_Update/word_access_complete/word_0/ca)
  // 			image[11 ] := ( $slice rdatar 47 32 ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 273
  // rdatar
  // ( $slice rdatar 47 32 ) 
  slice_714_inst <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_714_Sample/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_714_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_714_Sample/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_714_Update/ca)
  array_obj_ref_712_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_712_Sample/array_obj_ref_712_Split/split_req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_712_Sample/array_obj_ref_712_Split/split_ack)
  array_obj_ref_712_store_0 <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_712_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_712_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_712_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_712_Update/word_access_complete/word_0/ca)
  // 			image[7 ] := ( $slice rdatar 31 16 ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 274
  // rdatar
  // ( $slice rdatar 31 16 ) 
  slice_719_inst <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_719_Sample/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_719_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_719_Sample/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_719_Update/ca)
  array_obj_ref_717_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_717_Sample/array_obj_ref_717_Split/split_req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_717_Sample/array_obj_ref_717_Split/split_ack)
  array_obj_ref_717_store_0 <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_717_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_717_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_717_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_717_Update/word_access_complete/word_0/ca)
  // 			image[3 ] := ( $slice rdatar 15 0 ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 275
  // rdatar
  // ( $slice rdatar 15 0 ) 
  slice_724_inst <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_724_Sample/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_724_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_724_Sample/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/slice_724_Update/ca)
  array_obj_ref_722_gather_scatter <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_722_Sample/array_obj_ref_722_Split/split_req) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_722_Sample/array_obj_ref_722_Split/split_ack)
  array_obj_ref_722_store_0 <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_722_Sample/word_access_start/word_0/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_722_Update/word_access_complete/word_0/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_722_Sample/word_access_start/word_0/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/array_obj_ref_722_Update/word_access_complete/word_0/ca)
  // 			NL := (L + 1 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 276
  // (L + 1 )
  // L
  ADD_u12_u12_729_inst <=> (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/ADD_u12_u12_729_Sample/rr branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/ADD_u12_u12_729_Update/cr) (branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/ADD_u12_u12_729_Sample/ra branch_block_stmt_443/branch_block_stmt_565/call_stmt_705_to_assign_stmt_730/ADD_u12_u12_729_Update/ca)
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line 0
  // (NL < 29 )
  if_stmt_731_branch <=> (branch_block_stmt_443/branch_block_stmt_565/if_stmt_731_eval_test/branch_req) (branch_block_stmt_443/branch_block_stmt_565/if_stmt_731_else_link/else_choice_transition branch_block_stmt_443/branch_block_stmt_565/if_stmt_731_if_link/if_choice_transition)
  // 		NG := (G + 32 )// bits of buffering = 12. 
  //  file prog.linked.opt.aa, line 281
  // (G + 32 )
  // G
  ADD_u12_u12_741_inst <=> (branch_block_stmt_443/assign_stmt_742/ADD_u12_u12_741_Sample/rr branch_block_stmt_443/assign_stmt_742/ADD_u12_u12_741_Update/cr) (branch_block_stmt_443/assign_stmt_742/ADD_u12_u12_741_Sample/ra branch_block_stmt_443/assign_stmt_742/ADD_u12_u12_741_Update/ca)
  // CP-DP links for if  
  //  file prog.linked.opt.aa, line -149387400
  // (NG < 928 )
  if_stmt_743_branch <=> (branch_block_stmt_443/if_stmt_743_eval_test/branch_req) (branch_block_stmt_443/if_stmt_743_else_link/else_choice_transition branch_block_stmt_443/if_stmt_743_if_link/if_choice_transition)
}
$module [try] 
{
  // pipe-declarations for block %try
  //  file prog.linked.opt.aa, line 287
  // pipe-declarations for block %try%entire2
  //  file prog.linked.opt.aa, line 297
  // memory-space 6 is written into.
  // memory-space 8 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_754_to_call_stmt_766] 
    {
      // start:  	zer := 0 // bits of buffering = 4. 
      //  file prog.linked.opt.aa, line 292
      // Target expression
      // (as target) zer
      $T[STORE_zer_752_sample_start_] 
      $T[STORE_zer_752_sample_completed_] 
      $T[STORE_zer_752_update_start_] 
      $T[STORE_zer_752_update_completed_] 
      // zer
      $T[STORE_zer_752_word_address_calculated] 
      $T[STORE_zer_752_root_address_calculated] 
      STORE_zer_752_word_address_calculated <-& (STORE_zer_752_root_address_calculated)
      ;;[STORE_zer_752_Sample] 
      {
        ;;[STORE_zer_752_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_zer_752_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_zer_752_sample_start_ <-& (STORE_zer_752_word_address_calculated)
      STORE_zer_752_sample_start_ &-> (STORE_zer_752_Sample)
      STORE_zer_752_sample_completed_ <-& (STORE_zer_752_Sample)
      STORE_zer_752_sample_completed_ &-> ($null)
      STORE_zer_752_update_start_ &-> (STORE_zer_752_Update)
      STORE_zer_752_update_completed_ <-& (STORE_zer_752_Update)
      // end:  	zer := 0 // bits of buffering = 4. 
      // start:  	one := 1 // bits of buffering = 1. 
      //  file prog.linked.opt.aa, line 293
      // Target expression
      // (as target) one
      $T[STORE_one_755_sample_start_] 
      $T[STORE_one_755_sample_completed_] 
      $T[STORE_one_755_update_start_] 
      $T[STORE_one_755_update_completed_] 
      // one
      $T[STORE_one_755_word_address_calculated] 
      $T[STORE_one_755_root_address_calculated] 
      STORE_one_755_word_address_calculated <-& (STORE_one_755_root_address_calculated)
      ;;[STORE_one_755_Sample] 
      {
        ;;[STORE_one_755_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[STORE_one_755_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      STORE_one_755_sample_start_ <-& (STORE_one_755_word_address_calculated)
      STORE_one_755_sample_start_ &-> (STORE_one_755_Sample)
      STORE_one_755_sample_completed_ <-& (STORE_one_755_Sample)
      STORE_one_755_sample_completed_ &-> ($null)
      STORE_one_755_update_start_ &-> (STORE_one_755_Update)
      STORE_one_755_update_completed_ <-& (STORE_one_755_Update)
      // end:  	one := 1 // bits of buffering = 1. 
      // start: 	$call initial () () 
      //  file prog.linked.opt.aa, line 294
      $T[call_stmt_758_sample_start_] 
      $T[call_stmt_758_sample_completed_] 
      $T[call_stmt_758_update_start_] 
      $T[call_stmt_758_update_completed_] 
      ;;[call_stmt_758_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_758_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_758_sample_start_ &-> (call_stmt_758_Sample)
      call_stmt_758_sample_completed_ <-& (call_stmt_758_Sample)
      call_stmt_758_sample_completed_ &-> ($null)
      call_stmt_758_update_start_ &-> (call_stmt_758_Update)
      call_stmt_758_update_completed_ <-& (call_stmt_758_Update)
      // end: 	$call initial () () 
      // start:  	star := start// bits of buffering = 16. 
      //  file prog.linked.opt.aa, line 295
      // Source expression
      // start
      $T[RPIPE_start_760_sample_start_] 
      $T[RPIPE_start_760_sample_completed_] 
      $T[RPIPE_start_760_update_start_] 
      $T[RPIPE_start_760_update_completed_] 
      ;;[RPIPE_start_760_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_start_760_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_start_760_sample_start_ &-> (RPIPE_start_760_Sample)
      RPIPE_start_760_sample_completed_ <-& (RPIPE_start_760_Sample)
      RPIPE_start_760_update_start_ <-& (RPIPE_start_760_sample_completed_)
      RPIPE_start_760_update_start_ &-> (RPIPE_start_760_Update)
      RPIPE_start_760_update_completed_ <-& (RPIPE_start_760_Update)
      // Target expression
      // (as target) star
      // start: WAR dependencies for star
      // done: WAR dependencies for star
      // end:  	star := start// bits of buffering = 16. 
      // start: 	$call accessMem (0  1040  1  ) (rdatacom1 ) 
      //  file prog.linked.opt.aa, line 296
      $T[call_stmt_766_sample_start_] 
      $T[call_stmt_766_sample_completed_] 
      $T[call_stmt_766_update_start_] 
      $T[call_stmt_766_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      ;;[call_stmt_766_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_766_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_766_sample_start_ &-> (call_stmt_766_Sample)
      call_stmt_766_sample_completed_ <-& (call_stmt_766_Sample)
      call_stmt_766_sample_completed_ &-> ($null)
      call_stmt_766_update_start_ &-> (call_stmt_766_Update)
      call_stmt_766_update_completed_ <-& (call_stmt_766_Update)
      // Call output argument 0
      // (as target) rdatacom1
      // start: WAR dependencies for rdatacom1
      // done: WAR dependencies for rdatacom1
      // end: 	$call accessMem (0  1040  1  ) (rdatacom1 ) 
      // load-store dependencies..
      // memory-space  memory_space_5
      //  call_stmt_758 store
      //  call_stmt_766 store
      $T [call_stmt_758_call_stmt_766_delay] $delay
      // call_stmt_758(store) -> call_stmt_766(store)
      call_stmt_766_sample_start_ <-& (call_stmt_758_call_stmt_766_delay)
      call_stmt_758_call_stmt_766_delay <-& (call_stmt_758_update_completed_)
      // memory-space  memory_space_6
      //  STORE_one_755 store
      // memory-space  memory_space_1
      //  call_stmt_758 store
      // memory-space  memory_space_8
      //  STORE_zer_752 store
      // pipe read/write dependencies for pipe start
      // read-dependencies for pipe start
      // write-dependencies for pipe start
      // signal dependencies for start
    }
    <>[branch_block_stmt_767] // Branch Block  file prog.linked.opt.aa, line 297
    {
      $P [branch_block_stmt_767__entry__]
      branch_block_stmt_767__entry__ <-| ($entry)
      $P [branch_block_stmt_767__exit__]
      branch_block_stmt_767__exit__ |-> ($exit)
      $P [do_while_stmt_768__entry__] 
      $P [do_while_stmt_768__exit__] 
      // do-while-statement  
      //  file prog.linked.opt.aa, line 299
      <o> [do_while_stmt_768]  $depth 7 $buffering 2 
      {
        $P[do_while_stmt_768__entry__] 
        $P[do_while_stmt_768__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_768_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_770
          // 			$phi C := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  NC $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_770_sample_start_] 
          $T[phi_stmt_770_sample_completed_] 
          $T[phi_stmt_770_update_start_] 
          $T[phi_stmt_770_update_completed_] 
          $T[phi_stmt_770_sample_start__ps] 
          phi_stmt_770_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_770_sample_completed__ps] 
          phi_stmt_770_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_770_update_start__ps] 
          phi_stmt_770_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_770_update_completed__ps] 
          phi_stmt_770_update_completed_ <-& (phi_stmt_770_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_770_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_770_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_770_update_start_)
          $T[phi_stmt_770_loopback_trigger] 
          phi_stmt_770_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_770_loopback_sample_req] 
          $T[phi_stmt_770_loopback_sample_req_ps] 
          phi_stmt_770_loopback_sample_req <-& (phi_stmt_770_loopback_sample_req_ps)
          phi_stmt_770_loopback_sample_req &-> ($null)
          $T[phi_stmt_770_entry_trigger] 
          phi_stmt_770_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_770_entry_sample_req] 
          $T[phi_stmt_770_entry_sample_req_ps] 
          phi_stmt_770_entry_sample_req <-& (phi_stmt_770_entry_sample_req_ps)
          phi_stmt_770_entry_sample_req &-> ($null)
          phi_stmt_770_update_start_ o<-& (phi_stmt_770_update_completed_ 0)
          phi_stmt_770_sample_start_ o<-& (phi_stmt_770_sample_completed_ 1)
          $T[phi_stmt_770_merged_reqs] 
          $T[phi_stmt_770_phi_mux_ack] 
          $T[phi_stmt_770_phi_mux_ack_ps] 
          phi_stmt_770_phi_mux_ack_ps <-& (phi_stmt_770_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_770_update_completed_)
          $T[type_cast_773_sample_start__ps] 
          $T[type_cast_773_sample_completed__ps] 
          $T[type_cast_773_update_start__ps] 
          $T[type_cast_773_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_773_sample_start_] 
          $T[type_cast_773_sample_completed_] 
          type_cast_773_sample_completed_ <-& (type_cast_773_sample_start_)
          $T[type_cast_773_update_start_] 
          $T [type_cast_773_update_completed_] $delay 
          type_cast_773_update_completed_ <-& (type_cast_773_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_773_sample_start_ <-& (type_cast_773_sample_start__ps)
          type_cast_773_update_start_ <-& (type_cast_773_update_start__ps)
          // Phi complete dependency.
          type_cast_773_sample_completed__ps <-& (type_cast_773_sample_completed_)
          type_cast_773_update_completed__ps <-& (type_cast_773_update_completed_)
          $T[R_NC_774_sample_start__ps] 
          $T[R_NC_774_sample_completed__ps] 
          $T[R_NC_774_update_start__ps] 
          $T[R_NC_774_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_NC_774_sample_start_] 
          $T[R_NC_774_sample_completed_] 
          $T[R_NC_774_update_start_] 
          $T[R_NC_774_update_completed_] 
          ;;[R_NC_774_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_NC_774_sample_start_ &-> (R_NC_774_Sample)
          R_NC_774_sample_completed_ <-& (R_NC_774_Sample)
          ;;[R_NC_774_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_NC_774_update_start_ &-> (R_NC_774_Update)
          R_NC_774_update_completed_ <-& (R_NC_774_Update)
          // RAW reenables for NC
          // Phi start dependency for implicit/constant alternative.
          R_NC_774_sample_start_ <-& (R_NC_774_sample_start__ps)
          R_NC_774_update_start_ <-& (R_NC_774_update_start__ps)
          // Phi complete dependency.
          R_NC_774_sample_completed__ps <-& (R_NC_774_sample_completed_)
          R_NC_774_update_completed__ps <-& (R_NC_774_update_completed_)
          $phisequencer [ phi_stmt_770_phi_seq] : 
          phi_stmt_770_entry_trigger type_cast_773_sample_start__ps type_cast_773_sample_completed__ps type_cast_773_update_start__ps type_cast_773_update_completed__ps phi_stmt_770_loopback_trigger R_NC_774_sample_start__ps R_NC_774_sample_completed__ps R_NC_774_update_start__ps R_NC_774_update_completed__ps :
          phi_stmt_770_sample_start__ps phi_stmt_770_sample_completed__ps phi_stmt_770_update_start__ps phi_stmt_770_update_completed__ps :
          phi_stmt_770_entry_sample_req_ps phi_stmt_770_loopback_sample_req_ps : 
          phi_stmt_770_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_770
          // start:  			status := 0 // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 305
          // Target expression
          // (as target) status
          $T[WPIPE_status_776_sample_start_] 
          $T[WPIPE_status_776_sample_completed_] 
          $T[WPIPE_status_776_update_start_] 
          $T[WPIPE_status_776_update_completed_] 
          ;;[WPIPE_status_776_Sample] 
          {
            // pipe write sample-start status
            $T [req] $T [ack] 
          }
          ;;[WPIPE_status_776_Update] 
          {
            // pipe write update (complete) status
            $T [req] $T [ack] 
          }
          WPIPE_status_776_sample_start_ &-> (WPIPE_status_776_Sample)
          WPIPE_status_776_sample_completed_ <-& (WPIPE_status_776_Sample)
          WPIPE_status_776_update_start_ <-& (WPIPE_status_776_sample_completed_)
          WPIPE_status_776_update_start_ &-> (WPIPE_status_776_Update)
          WPIPE_status_776_update_completed_ <-& (WPIPE_status_776_Update)
          WPIPE_status_776_sample_start_ o<-& (WPIPE_status_776_update_completed_ 0)
          // end:  			status := 0 // bits of buffering = 16. 
          // start: 			$call try1 () () 
          //  file prog.linked.opt.aa, line 306
          $T[call_stmt_779_sample_start_] 
          $T[call_stmt_779_sample_completed_] 
          $T[call_stmt_779_update_start_] 
          $T[call_stmt_779_update_completed_] 
          ;;[call_stmt_779_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_779_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_779_sample_start_ &-> (call_stmt_779_Sample)
          call_stmt_779_sample_completed_ <-& (call_stmt_779_Sample)
          call_stmt_779_sample_completed_ &-> ($null)
          call_stmt_779_update_start_ &-> (call_stmt_779_Update)
          call_stmt_779_update_completed_ <-& (call_stmt_779_Update)
          // self-release: 
          call_stmt_779_sample_start_ o<-& (call_stmt_779_sample_completed_ 1)
          $null &-> (call_stmt_779_update_start_)
          call_stmt_779_update_start_ o<-& (call_stmt_779_update_completed_ 0)
          // end: 			$call try1 () () 
          // start:  			status := 1 // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 307
          // Target expression
          // (as target) status
          $T[WPIPE_status_780_sample_start_] 
          $T[WPIPE_status_780_sample_completed_] 
          $T[WPIPE_status_780_update_start_] 
          $T[WPIPE_status_780_update_completed_] 
          ;;[WPIPE_status_780_Sample] 
          {
            // pipe write sample-start status
            $T [req] $T [ack] 
          }
          ;;[WPIPE_status_780_Update] 
          {
            // pipe write update (complete) status
            $T [req] $T [ack] 
          }
          WPIPE_status_780_sample_start_ &-> (WPIPE_status_780_Sample)
          WPIPE_status_780_sample_completed_ <-& (WPIPE_status_780_Sample)
          WPIPE_status_780_update_start_ <-& (WPIPE_status_780_sample_completed_)
          WPIPE_status_780_update_start_ &-> (WPIPE_status_780_Update)
          WPIPE_status_780_update_completed_ <-& (WPIPE_status_780_Update)
          WPIPE_status_780_sample_start_ o<-& (WPIPE_status_780_update_completed_ 0)
          // end:  			status := 1 // bits of buffering = 16. 
          // start: 			$call accessMem (1  1040  0  ) (rdatacom ) 
          //  file prog.linked.opt.aa, line 308
          $T[call_stmt_787_sample_start_] 
          $T[call_stmt_787_sample_completed_] 
          $T[call_stmt_787_update_start_] 
          $T[call_stmt_787_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // Call input argument 2
          ;;[call_stmt_787_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_787_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_787_sample_start_ &-> (call_stmt_787_Sample)
          call_stmt_787_sample_completed_ <-& (call_stmt_787_Sample)
          call_stmt_787_sample_completed_ &-> ($null)
          call_stmt_787_update_start_ &-> (call_stmt_787_Update)
          call_stmt_787_update_completed_ <-& (call_stmt_787_Update)
          // Call output argument 0
          // (as target) rdatacom
          // self-release: 
          call_stmt_787_sample_start_ o<-& (call_stmt_787_sample_completed_ 1)
          $null &-> (call_stmt_787_update_start_)
          call_stmt_787_update_start_ o<-& (call_stmt_787_update_completed_ 0)
          // start: WAR dependencies for rdatacom
          // done: WAR dependencies for rdatacom
          // end: 			$call accessMem (1  1040  0  ) (rdatacom ) 
          // start:  			com0 := ( $slice rdatacom 15 0 ) // bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 309
          // Source expression
          // ( $slice rdatacom 15 0 ) 
          $T[slice_790_sample_start_] 
          $T[slice_790_sample_completed_] 
          $T[slice_790_update_start_] 
          $T[slice_790_update_completed_] 
          // rdatacom
          // start: Forward dependencies from rdatacom to transition slice_790_sample_start_
          slice_790_sample_start_ <-& (call_stmt_787_update_completed_)
          // done: Forward dependencies from rdatacom to transition slice_790_sample_start_
          ;;[slice_790_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_790_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_790_sample_start_ &-> (slice_790_Sample)
          slice_790_sample_completed_ <-& (slice_790_Sample)
          slice_790_sample_completed_ &-> ($null)
          slice_790_update_start_ &-> (slice_790_Update)
          slice_790_update_completed_ <-& (slice_790_Update)
          // RAW reenables for rdatacom
          call_stmt_787_update_start_ o<-& (slice_790_sample_completed_ 0)
          // self-release: 
          slice_790_sample_start_ o<-& (slice_790_sample_completed_ 1)
          $null &-> (slice_790_update_start_)
          slice_790_update_start_ o<-& (slice_790_update_completed_ 0)
          // Target expression
          // (as target) com0
          // start: WAR dependencies for com0
          // done: WAR dependencies for com0
          // end:  			com0 := ( $slice rdatacom 15 0 ) // bits of buffering = 16. 
          // start:  			wdatacom2 := (com0 - 1 )// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 310
          // Source expression
          // (com0 - 1 )
          $T[SUB_u16_u16_795_sample_start_] 
          $T[SUB_u16_u16_795_sample_completed_] 
          $T[SUB_u16_u16_795_update_start_] 
          $T[SUB_u16_u16_795_update_completed_] 
          // com0
          // start: Forward dependencies from com0 to transition SUB_u16_u16_795_sample_start_
          SUB_u16_u16_795_sample_start_ <-& (slice_790_update_completed_)
          // done: Forward dependencies from com0 to transition SUB_u16_u16_795_sample_start_
          ;;[SUB_u16_u16_795_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[SUB_u16_u16_795_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          SUB_u16_u16_795_sample_start_ &-> (SUB_u16_u16_795_Sample)
          SUB_u16_u16_795_sample_completed_ <-& (SUB_u16_u16_795_Sample)
          SUB_u16_u16_795_sample_completed_ &-> ($null)
          SUB_u16_u16_795_update_start_ &-> (SUB_u16_u16_795_Update)
          SUB_u16_u16_795_update_completed_ <-& (SUB_u16_u16_795_Update)
          // RAW reenables for com0
          slice_790_update_start_ o<-& (SUB_u16_u16_795_sample_completed_ 0)
          // self-release: 
          SUB_u16_u16_795_sample_start_ o<-& (SUB_u16_u16_795_sample_completed_ 1)
          $null &-> (SUB_u16_u16_795_update_start_)
          SUB_u16_u16_795_update_start_ o<-& (SUB_u16_u16_795_update_completed_ 0)
          // Target expression
          // (as target) wdatacom2
          // start: WAR dependencies for wdatacom2
          // done: WAR dependencies for wdatacom2
          // end:  			wdatacom2 := (com0 - 1 )// bits of buffering = 16. 
          // start: 			$call accessMem (0  1040  wdatacom2 ) (rdatacom2 ) 
          //  file prog.linked.opt.aa, line 311
          $T[call_stmt_801_sample_start_] 
          $T[call_stmt_801_sample_completed_] 
          $T[call_stmt_801_update_start_] 
          $T[call_stmt_801_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // Call input argument 2
          // wdatacom2
          // start: Forward dependencies from wdatacom2 to transition call_stmt_801_sample_start_
          call_stmt_801_sample_start_ <-& (SUB_u16_u16_795_update_completed_)
          // done: Forward dependencies from wdatacom2 to transition call_stmt_801_sample_start_
          // RAW reenables for wdatacom2
          SUB_u16_u16_795_update_start_ o<-& (call_stmt_801_sample_completed_ 0)
          ;;[call_stmt_801_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_801_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_801_sample_start_ &-> (call_stmt_801_Sample)
          call_stmt_801_sample_completed_ <-& (call_stmt_801_Sample)
          call_stmt_801_sample_completed_ &-> ($null)
          call_stmt_801_update_start_ &-> (call_stmt_801_Update)
          call_stmt_801_update_completed_ <-& (call_stmt_801_Update)
          // Call output argument 0
          // (as target) rdatacom2
          // self-release: 
          call_stmt_801_sample_start_ o<-& (call_stmt_801_sample_completed_ 1)
          $null &-> (call_stmt_801_update_start_)
          call_stmt_801_update_start_ o<-& (call_stmt_801_update_completed_ 0)
          // start: WAR dependencies for rdatacom2
          // done: WAR dependencies for rdatacom2
          // end: 			$call accessMem (0  1040  wdatacom2 ) (rdatacom2 ) 
          // start:  			NC := wdatacom2// bits of buffering = 16. 
          //  file prog.linked.opt.aa, line 312
          $T[assign_stmt_804_sample_start_] 
          $T[assign_stmt_804_sample_completed_] 
          $T[assign_stmt_804_update_start_] 
          $T[assign_stmt_804_update_completed_] 
          // Source expression
          // wdatacom2
          // Target expression
          // (as target) NC
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_804_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_804_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_804_sample_start_ &-> (assign_stmt_804_Sample)
          assign_stmt_804_sample_completed_ <-& (assign_stmt_804_Sample)
          assign_stmt_804_sample_completed_ &-> ($null)
          assign_stmt_804_update_start_ &-> (assign_stmt_804_Update)
          assign_stmt_804_update_completed_ <-& (assign_stmt_804_Update)
          // start: Forward dependencies from wdatacom2 to transition assign_stmt_804_sample_start_
          assign_stmt_804_sample_start_ <-& (SUB_u16_u16_795_update_completed_)
          // done: Forward dependencies from wdatacom2 to transition assign_stmt_804_sample_start_
          // RAW reenables for wdatacom2
          SUB_u16_u16_795_update_start_ o<-& (assign_stmt_804_sample_completed_ 0)
          // self-release: 
          assign_stmt_804_sample_start_ o<-& (assign_stmt_804_sample_completed_ 1)
          $null &-> (assign_stmt_804_update_start_)
          assign_stmt_804_update_start_ o<-& (assign_stmt_804_update_completed_ 0)
          // start: WAR dependencies for NC
          // WAR dependency: Read: NC before Write: 			NC := wdatacom2// bits of buffering = 16. 
          assign_stmt_804_update_start_ <-& (phi_stmt_770_sample_completed_)
          phi_stmt_770_sample_start_ o<-& (assign_stmt_804_update_completed_ 0)
          // WAR dependency: release  Read: NC with Write: 			NC := wdatacom2// bits of buffering = 16. 
          // done: WAR dependencies for NC
          // end:  			NC := wdatacom2 $buffering 2// bits of buffering = 32. 
          // (NC > 0 )
          // NC
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (NC > 0 ) to transition condition_evaluated
          condition_evaluated <-& (assign_stmt_804_update_completed_)
          // done: Forward dependencies from (NC > 0 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_5
          //  call_stmt_779 store
          //  call_stmt_787 store
          $T [call_stmt_779_call_stmt_787_delay] $delay
          // call_stmt_779(store) -> call_stmt_787(store)
          call_stmt_787_sample_start_ <-& (call_stmt_779_call_stmt_787_delay)
          call_stmt_779_call_stmt_787_delay <-& (call_stmt_779_update_completed_)
          //  call_stmt_801 store
          $T [call_stmt_787_call_stmt_801_delay] $delay
          // call_stmt_787(store) -> call_stmt_801(store)
          call_stmt_801_sample_start_ <-& (call_stmt_787_call_stmt_801_delay)
          call_stmt_787_call_stmt_801_delay <-& (call_stmt_787_update_completed_)
          // reenable across ring for memory space memory_space_5
          $T[ring_reenable_memory_space_5] 
          ring_reenable_memory_space_5 <-& (call_stmt_801_update_completed_)
          call_stmt_779_sample_start_ o<-& (ring_reenable_memory_space_5 1)
          // memory-space  memory_space_7
          //  call_stmt_779 store
          // reenable across ring for memory space memory_space_7
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_3
          //  call_stmt_779 store
          // reenable across ring for memory space memory_space_3
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_2
          //  call_stmt_779 store
          // reenable across ring for memory space memory_space_2
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_6
          //  call_stmt_779 load
          // reenable across ring for memory space memory_space_6
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_1
          //  call_stmt_779 load
          // reenable across ring for memory space memory_space_1
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_0
          //  call_stmt_779 store
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_8
          //  call_stmt_779 load
          // reenable across ring for memory space memory_space_8
          // leading and trailing sets are the same... no ring dependency
          // memory-space  memory_space_4
          //  call_stmt_779 store
          // reenable across ring for memory space memory_space_4
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe acc_mem
          // read-dependencies for pipe acc_mem
          // write-dependencies for pipe acc_mem
          // signal dependencies for acc_mem
          // pipe read/write dependencies for pipe acc_mem_add
          // read-dependencies for pipe acc_mem_add
          // write-dependencies for pipe acc_mem_add
          // signal dependencies for acc_mem_add
          // pipe read/write dependencies for pipe status
          // read-dependencies for pipe status
          // write-dependencies for pipe status
          WPIPE_status_780_sample_start_ <-& (WPIPE_status_776_update_completed_)
          // ring dependency in pipeline.
          WPIPE_status_776_sample_start_ o<-& (WPIPE_status_780_update_completed_ 0)
          // signal dependencies for status
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_768__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_768_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_768__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_768_loop_body : condition_evaluated
        $bind do_while_stmt_768__entry__  => do_while_stmt_768_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_768_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_768__exit__)
      }
      do_while_stmt_768__entry__ |-> (do_while_stmt_768)
      do_while_stmt_768__exit__ <-| (do_while_stmt_768)
      do_while_stmt_768__entry__ <-| (branch_block_stmt_767__entry__)
      do_while_stmt_768__exit__ |-> (branch_block_stmt_767__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %try%entire2%
    //  file prog.linked.opt.aa, line 301
    // constant-object-declarations for block %try%entire2
    //  file prog.linked.opt.aa, line 297
    // constant-object-declarations for block %try
    //  file prog.linked.opt.aa, line 287
    // 0 
    $constant $W[konst_753_wire_constant] : $int<4> := _b0000// 0
    // zer
    $constant $W[STORE_zer_752_word_address_0] : $pointer<memory_space_8> := _b0
    // 1 
    $constant $W[konst_756_wire_constant] : $int<1> := _b1// 1
    // one
    $constant $W[STORE_one_755_word_address_0] : $pointer<memory_space_6> := _b0
    // 	$call initial () () 
    //  file prog.linked.opt.aa, line 294
    // 	$call accessMem (0  1040  1  ) (rdatacom1 ) 
    //  file prog.linked.opt.aa, line 296
    // 0 
    $constant $W[konst_762_wire_constant] : $int<1> := _b0// 0
    // 1040 
    $constant $W[konst_763_wire_constant] : $int<12> := _b010000010000// 1040
    // 1 
    $constant $W[konst_764_wire_constant] : $int<16> := _b0000000000000001// 1
    // constant-declarations for block %try%entire2
    //  file prog.linked.opt.aa, line 297
    // do-while statement  
    //  file prog.linked.opt.aa, line 299
    // 0 
    $constant $W[konst_807_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for block %try%entire2%
    //  file prog.linked.opt.aa, line 301
    // constant-declarations for phi:  			$phi C := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  NC $on   $loopback 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 302
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_773_wire_constant] : $int<16> := _b0000000000000000// 0
    // 0 
    $constant $W[konst_777_wire_constant] : $int<16> := _b0000000000000000// 0
    // 			$call try1 () () 
    //  file prog.linked.opt.aa, line 306
    // 1 
    $constant $W[konst_781_wire_constant] : $int<16> := _b0000000000000001// 1
    // 			$call accessMem (1  1040  0  ) (rdatacom ) 
    //  file prog.linked.opt.aa, line 308
    // 1 
    $constant $W[konst_783_wire_constant] : $int<1> := _b1// 1
    // 1040 
    $constant $W[konst_784_wire_constant] : $int<12> := _b010000010000// 1040
    // 0 
    $constant $W[konst_785_wire_constant] : $int<16> := _b0000000000000000// 0
    // 1 
    $constant $W[konst_794_wire_constant] : $int<16> := _b0000000000000001// 1
    // 			$call accessMem (0  1040  wdatacom2 ) (rdatacom2 ) 
    //  file prog.linked.opt.aa, line 311
    // 0 
    $constant $W[konst_797_wire_constant] : $int<1> := _b0// 0
    // 1040 
    $constant $W[konst_798_wire_constant] : $int<12> := _b010000010000// 1040
    // 	zer := 0 // bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 292
    // zer
    $constant $W[STORE_zer_752_word_address_0] : $pointer<memory_space_8> := _b0
    $W[STORE_zer_752_data_0] : $int<4>
    // 	one := 1 // bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 293
    // one
    $constant $W[STORE_one_755_word_address_0] : $pointer<memory_space_6> := _b0
    $W[STORE_one_755_data_0] : $int<1>
    // 	$call initial () () 
    //  file prog.linked.opt.aa, line 294
    // 	star := start// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 295
    // star
    $W[star_761] : $int<16>
    // 	$call accessMem (0  1040  1  ) (rdatacom1 ) 
    //  file prog.linked.opt.aa, line 296
    // rdatacom1
    $W[rdatacom1_766] : $int<64>
    // block %try%entire2
    //  file prog.linked.opt.aa, line 297
    // do-while statement  
    //  file prog.linked.opt.aa, line 299
    // (NC > 0 )
    $intermediate $W[UGT_u16_u1_808_wire] : $int<1>
    // merge-statement  
    //  file prog.linked.opt.aa, line 301
    // 			$phi C := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  NC $on   $loopback 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 302
    $W[NC_804_774_buffered] : $int<16>
    // C
    $W[C_770] : $int<16>
    // 			status := 0 // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 305
    // status
    // 			$call try1 () () 
    //  file prog.linked.opt.aa, line 306
    // 			status := 1 // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 307
    // status
    // 			$call accessMem (1  1040  0  ) (rdatacom ) 
    //  file prog.linked.opt.aa, line 308
    // rdatacom
    $W[rdatacom_787] : $int<64>
    // 			com0 := ( $slice rdatacom 15 0 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 309
    // com0
    $W[com0_791] : $int<16>
    // 			wdatacom2 := (com0 - 1 )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 310
    // wdatacom2
    $W[wdatacom2_796] : $int<16>
    // 			$call accessMem (0  1040  wdatacom2 ) (rdatacom2 ) 
    //  file prog.linked.opt.aa, line 311
    // rdatacom2
    $W[rdatacom2_801] : $int<64>
    // 			NC := wdatacom2 $buffering 2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 312
    // NC
    $W[NC_804] : $int<16>
    // 	zer := 0 // bits of buffering = 4. 
    //  file prog.linked.opt.aa, line 292
    // zer
    $store [STORE_zer_752_store_0] $to memory_space_8 (STORE_zer_752_word_address_0 STORE_zer_752_data_0) 
    $delay STORE_zer_752_store_0 4
    &/ [STORE_zer_752_gather_scatter] (konst_753_wire_constant) (STORE_zer_752_data_0) 
    $flowthrough 
    // 	one := 1 // bits of buffering = 1. 
    //  file prog.linked.opt.aa, line 293
    // one
    $store [STORE_one_755_store_0] $to memory_space_6 (STORE_one_755_word_address_0 STORE_one_755_data_0) 
    $delay STORE_one_755_store_0 4
    &/ [STORE_one_755_gather_scatter] (konst_756_wire_constant) (STORE_one_755_data_0) 
    $flowthrough 
    // 	$call initial () () 
    //  file prog.linked.opt.aa, line 294
    $call [call_stmt_758_call] $module initial() ()  
    $delay call_stmt_758_call 4
    // 	star := start// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 295
    // start
    $ioport $in [RPIPE_start_760_inst] (start) (star_761) 
    $buffering $out RPIPE_start_760_inst star_761 1
    // 	$call accessMem (0  1040  1  ) (rdatacom1 ) 
    //  file prog.linked.opt.aa, line 296
    $call [call_stmt_766_call] $module accessMem(konst_762_wire_constant konst_763_wire_constant konst_764_wire_constant) (rdatacom1_766)  
    $delay call_stmt_766_call 10
    $buffering  $in call_stmt_766_call konst_762_wire_constant 1
    $buffering  $in call_stmt_766_call konst_763_wire_constant 1
    $buffering  $in call_stmt_766_call konst_764_wire_constant 1
    $buffering  $out call_stmt_766_call rdatacom1_766 1
    // datapath-instances for block %try%entire2
    //  file prog.linked.opt.aa, line 297
    // datapath-instances for do-while  
    //  file prog.linked.opt.aa, line 299
    // (NC > 0 )
    >[UGT_u16_u1_808_inst] (NC_804 konst_807_wire_constant) (UGT_u16_u1_808_wire)   $flowthrough 
    $delay UGT_u16_u1_808_inst 0
    ==0? [do_while_stmt_768_branch] (UGT_u16_u1_808_wire)
    $flowthrough
    // data-path instances for merge  
    //  file prog.linked.opt.aa, line 301
    // 			$phi C := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  NC $on   $loopback 
    // type of target is $uint<16>
    //  file prog.linked.opt.aa, line 302
    # := [NC_804_774_buf] (NC_804) (NC_804_774_buffered)    $fullrate
    $buffering $out NC_804_774_buf NC_804_774_buffered  1
    # $phi [phi_stmt_770] (type_cast_773_wire_constant NC_804_774_buffered) ( C_770 ) $fullrate
    // $buffering  $out phi_stmt_770 C_770 2
    // 			status := 0 // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 305
    // status
    $ioport $out [WPIPE_status_776_inst]  (konst_777_wire_constant) (status)  $fullrate 
    // 			$call try1 () () 
    //  file prog.linked.opt.aa, line 306
    $call [call_stmt_779_call] $module try1() ()   $fullrate
    $delay call_stmt_779_call 4
    // 			status := 1 // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 307
    // status
    $ioport $out [WPIPE_status_780_inst]  (konst_781_wire_constant) (status)  $fullrate 
    // 			$call accessMem (1  1040  0  ) (rdatacom ) 
    //  file prog.linked.opt.aa, line 308
    $call [call_stmt_787_call] $module accessMem(konst_783_wire_constant konst_784_wire_constant konst_785_wire_constant) (rdatacom_787)   $fullrate
    $delay call_stmt_787_call 10
    $buffering  $in call_stmt_787_call konst_783_wire_constant 1
    $buffering  $in call_stmt_787_call konst_784_wire_constant 1
    $buffering  $in call_stmt_787_call konst_785_wire_constant 1
    $buffering  $out call_stmt_787_call rdatacom_787 1
    // 			com0 := ( $slice rdatacom 15 0 ) // bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 309
    // ( $slice rdatacom 15 0 ) 
    [:] [slice_790_inst] (rdatacom_787 15 0) (com0_791)  $fullrate
    $buffering  $out slice_790_inst com0_791 1
    $delay slice_790_inst 1
    // 			wdatacom2 := (com0 - 1 )// bits of buffering = 16. 
    //  file prog.linked.opt.aa, line 310
    // (com0 - 1 )
    -[SUB_u16_u16_795_inst] (com0_791 konst_794_wire_constant) (wdatacom2_796)    $fullrate
    $buffering  $out SUB_u16_u16_795_inst wdatacom2_796 1
    $delay SUB_u16_u16_795_inst 1
    // 			$call accessMem (0  1040  wdatacom2 ) (rdatacom2 ) 
    //  file prog.linked.opt.aa, line 311
    $call [call_stmt_801_call] $module accessMem(konst_797_wire_constant konst_798_wire_constant wdatacom2_796) (rdatacom2_801)   $fullrate
    $delay call_stmt_801_call 10
    $buffering  $in call_stmt_801_call konst_797_wire_constant 1
    $buffering  $in call_stmt_801_call konst_798_wire_constant 1
    $buffering  $in call_stmt_801_call wdatacom2_796 1
    $buffering  $out call_stmt_801_call rdatacom2_801 1
    // 			NC := wdatacom2 $buffering 2// bits of buffering = 32. 
    //  file prog.linked.opt.aa, line 312
    # := [W_NC_802_inst] (wdatacom2_796) (NC_804)    $fullrate
    $buffering  $out W_NC_802_inst NC_804 2
  }
  // end data-path
  // 	zer := 0 // bits of buffering = 4. 
  //  file prog.linked.opt.aa, line 292
  // zer
  STORE_zer_752_gather_scatter <=> (assign_stmt_754_to_call_stmt_766/STORE_zer_752_Sample/STORE_zer_752_Split/split_req) (assign_stmt_754_to_call_stmt_766/STORE_zer_752_Sample/STORE_zer_752_Split/split_ack)
  STORE_zer_752_store_0 <=> (assign_stmt_754_to_call_stmt_766/STORE_zer_752_Sample/word_access_start/word_0/rr assign_stmt_754_to_call_stmt_766/STORE_zer_752_Update/word_access_complete/word_0/cr) (assign_stmt_754_to_call_stmt_766/STORE_zer_752_Sample/word_access_start/word_0/ra assign_stmt_754_to_call_stmt_766/STORE_zer_752_Update/word_access_complete/word_0/ca)
  // 	one := 1 // bits of buffering = 1. 
  //  file prog.linked.opt.aa, line 293
  // one
  STORE_one_755_gather_scatter <=> (assign_stmt_754_to_call_stmt_766/STORE_one_755_Sample/STORE_one_755_Split/split_req) (assign_stmt_754_to_call_stmt_766/STORE_one_755_Sample/STORE_one_755_Split/split_ack)
  STORE_one_755_store_0 <=> (assign_stmt_754_to_call_stmt_766/STORE_one_755_Sample/word_access_start/word_0/rr assign_stmt_754_to_call_stmt_766/STORE_one_755_Update/word_access_complete/word_0/cr) (assign_stmt_754_to_call_stmt_766/STORE_one_755_Sample/word_access_start/word_0/ra assign_stmt_754_to_call_stmt_766/STORE_one_755_Update/word_access_complete/word_0/ca)
  // 	$call initial () () 
  //  file prog.linked.opt.aa, line 294
  call_stmt_758_call <=> (assign_stmt_754_to_call_stmt_766/call_stmt_758_Sample/crr assign_stmt_754_to_call_stmt_766/call_stmt_758_Update/ccr) (assign_stmt_754_to_call_stmt_766/call_stmt_758_Sample/cra assign_stmt_754_to_call_stmt_766/call_stmt_758_Update/cca)
  // 	star := start// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 295
  // start
  RPIPE_start_760_inst <=> (assign_stmt_754_to_call_stmt_766/RPIPE_start_760_Sample/rr assign_stmt_754_to_call_stmt_766/RPIPE_start_760_Update/cr) (assign_stmt_754_to_call_stmt_766/RPIPE_start_760_Sample/ra assign_stmt_754_to_call_stmt_766/RPIPE_start_760_Update/ca)
  // 	$call accessMem (0  1040  1  ) (rdatacom1 ) 
  //  file prog.linked.opt.aa, line 296
  call_stmt_766_call <=> (assign_stmt_754_to_call_stmt_766/call_stmt_766_Sample/crr assign_stmt_754_to_call_stmt_766/call_stmt_766_Update/ccr) (assign_stmt_754_to_call_stmt_766/call_stmt_766_Sample/cra assign_stmt_754_to_call_stmt_766/call_stmt_766_Update/cca)
  // CP-DP links for do-while  do_while_stmt_768
  //  file prog.linked.opt.aa, line 299
  phi_stmt_770 <=> (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/phi_stmt_770_entry_sample_req branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/phi_stmt_770_loopback_sample_req) (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/phi_stmt_770_phi_mux_ack)
  NC_804_774_buf <=> (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/R_NC_774_Sample/req branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/R_NC_774_Update/req) (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/R_NC_774_Sample/ack branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/R_NC_774_Update/ack)
  // 			status := 0 // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 305
  // status
  WPIPE_status_776_inst <=> (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/WPIPE_status_776_Sample/req branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/WPIPE_status_776_Update/req) (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/WPIPE_status_776_Sample/ack branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/WPIPE_status_776_Update/ack)
  // 			$call try1 () () 
  //  file prog.linked.opt.aa, line 306
  call_stmt_779_call <=> (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/call_stmt_779_Sample/crr branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/call_stmt_779_Update/ccr) (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/call_stmt_779_Sample/cra branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/call_stmt_779_Update/cca)
  // 			status := 1 // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 307
  // status
  WPIPE_status_780_inst <=> (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/WPIPE_status_780_Sample/req branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/WPIPE_status_780_Update/req) (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/WPIPE_status_780_Sample/ack branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/WPIPE_status_780_Update/ack)
  // 			$call accessMem (1  1040  0  ) (rdatacom ) 
  //  file prog.linked.opt.aa, line 308
  call_stmt_787_call <=> (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/call_stmt_787_Sample/crr branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/call_stmt_787_Update/ccr) (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/call_stmt_787_Sample/cra branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/call_stmt_787_Update/cca)
  // 			com0 := ( $slice rdatacom 15 0 ) // bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 309
  // rdatacom
  // ( $slice rdatacom 15 0 ) 
  slice_790_inst <=> (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/slice_790_Sample/rr branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/slice_790_Update/cr) (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/slice_790_Sample/ra branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/slice_790_Update/ca)
  // 			wdatacom2 := (com0 - 1 )// bits of buffering = 16. 
  //  file prog.linked.opt.aa, line 310
  // (com0 - 1 )
  // com0
  SUB_u16_u16_795_inst <=> (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/SUB_u16_u16_795_Sample/rr branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/SUB_u16_u16_795_Update/cr) (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/SUB_u16_u16_795_Sample/ra branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/SUB_u16_u16_795_Update/ca)
  // 			$call accessMem (0  1040  wdatacom2 ) (rdatacom2 ) 
  //  file prog.linked.opt.aa, line 311
  // wdatacom2
  call_stmt_801_call <=> (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/call_stmt_801_Sample/crr branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/call_stmt_801_Update/ccr) (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/call_stmt_801_Sample/cra branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/call_stmt_801_Update/cca)
  // 			NC := wdatacom2 $buffering 2// bits of buffering = 32. 
  //  file prog.linked.opt.aa, line 312
  // wdatacom2
  W_NC_802_inst <=> (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/assign_stmt_804_Sample/req branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/assign_stmt_804_Update/req) (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/assign_stmt_804_Sample/ack branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/assign_stmt_804_Update/ack)
  // (NC > 0 )
  // NC
  do_while_stmt_768_branch <=> (branch_block_stmt_767/do_while_stmt_768/do_while_stmt_768_loop_body/condition_evaluated) (branch_block_stmt_767/do_while_stmt_768/loop_exit/ack branch_block_stmt_767/do_while_stmt_768/loop_taken/ack)
}
